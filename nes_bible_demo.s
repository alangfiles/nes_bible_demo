;
; File generated by cc65 v 2.18 - N/A
;
	.fopt		compiler,"cc65 v 2.18 - N/A"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_mask
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play
	.import		_music_stop
	.import		_sfx_play
	.import		_pad_poll
	.import		_bank_spr
	.import		_bank_bg
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_multi_vram_buffer_horz
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_frame_count
	.import		_set_music_speed
	.import		_check_collision
	.import		_pal_fade_to
	.import		_set_scroll_x
	.import		_set_scroll_y
	.import		_get_ppu_addr
	.import		_set_data_pointer
	.import		_set_mt_pointer
	.import		_buffer_4_mt
	.import		_flush_vram_update2
	.export		_animate_bread_data
	.export		_animate_bread2_data
	.export		_animate_bun_data
	.export		_animate_bun2_data
	.export		_animate_fruit_data
	.export		_animate_wine_data
	.export		_animate_implosion1_data
	.export		_animate_implosion2_data
	.export		_animate_implosion3_data
	.export		_animate_orb0_data
	.export		_animate_meter28_data
	.export		_animate_meter27_data
	.export		_animate_meter26_data
	.export		_animate_meter25_data
	.export		_animate_meter24_data
	.export		_animate_meter23_data
	.export		_animate_meter22_data
	.export		_animate_meter21_data
	.export		_animate_meter20_data
	.export		_animate_meter19_data
	.export		_animate_meter18_data
	.export		_animate_meter17_data
	.export		_animate_meter16_data
	.export		_animate_meter15_data
	.export		_animate_meter14_data
	.export		_animate_meter13_data
	.export		_animate_meter12_data
	.export		_animate_meter11_data
	.export		_animate_meter10_data
	.export		_animate_meter9_data
	.export		_animate_meter8_data
	.export		_animate_meter7_data
	.export		_animate_meter6_data
	.export		_animate_meter5_data
	.export		_animate_meter4_data
	.export		_animate_meter3_data
	.export		_animate_meter2_data
	.export		_animate_meter1_data
	.export		_animate_meter0_data
	.export		_animate_laddertop_data
	.export		_animate_playerclimb1_data
	.export		_animate_playerclimb2_data
	.export		_animate_playerclimbshootleft_data
	.export		_animate_playerclimbshootright_data
	.export		_animate_recoilleft_data
	.export		_animate_skeletonleft_data
	.export		_animate_deathleft1_data
	.export		_animate_deathleft2_data
	.export		_animate_deathleft3_data
	.export		_animate_deathleft4_data
	.export		_animate_deathleft5_data
	.export		_animate_deathleft6_data
	.export		_animate_deathleft7_data
	.export		_animate_deathleft8_data
	.export		_animate_recoilright_data
	.export		_animate_skeletonright_data
	.export		_animate_deathright1_data
	.export		_animate_deathright2_data
	.export		_animate_deathright3_data
	.export		_animate_deathright4_data
	.export		_animate_deathright5_data
	.export		_animate_deathright6_data
	.export		_animate_deathright7_data
	.export		_animate_deathright8_data
	.export		_animate_playerstandright_data
	.export		_animate_playerstandleft_data
	.export		_animate_playerstandshootleft_data
	.export		_animate_playerstandshootright_data
	.export		_animate_playerrun1left_data
	.export		_animate_playerrun2left_data
	.export		_animate_playerrun3left_data
	.export		_animate_playerrun1right_data
	.export		_animate_playerrun2right_data
	.export		_animate_playerrun3right_data
	.export		_animate_playerrunshoot1left_data
	.export		_animate_playerrunshoot2left_data
	.export		_animate_playerrunshoot3left_data
	.export		_animate_playerrunshoot1right_data
	.export		_animate_playerrunshoot2right_data
	.export		_animate_playerrunshoot3right_data
	.export		_animate_playerjumpleft_data
	.export		_animate_playerjumpleftshoot_data
	.export		_animate_playerjumpright_data
	.export		_animate_playerjumprightshoot_data
	.export		_animate_hootyowl1left_data
	.export		_animate_hootyowl2left_data
	.export		_animate_hootyowl3left_data
	.export		_animate_hootyowl4left_data
	.export		_animate_hootyowl5left_data
	.export		_animate_hootyowl1right_data
	.export		_animate_hootyowl2right_data
	.export		_animate_hootyowl3right_data
	.export		_animate_hootyowl4right_data
	.export		_animate_hootyowl5right_data
	.export		_animate_snail1left_data
	.export		_animate_snail2left_data
	.export		_animate_snail3left_data
	.export		_animate_snail1right_data
	.export		_animate_snail2right_data
	.export		_animate_snail3right_data
	.export		_animate_snake1left_data
	.export		_animate_snake2left_data
	.export		_animate_snake3left_data
	.export		_animate_snake4left_data
	.export		_animate_snake5left_data
	.export		_animate_snake6left_data
	.export		_animate_snake7left_data
	.export		_animate_snake8left_data
	.export		_animate_snake9left_data
	.export		_animate_snake10left_data
	.export		_animate_snake11left_data
	.export		_animate_snake12left_data
	.export		_animate_snake13left_data
	.export		_animate_snake14left_data
	.export		_animate_snake15left_data
	.export		_animate_snake16left_data
	.export		_animate_snake17left_data
	.export		_animate_snake18left_data
	.export		_animate_snake19left_data
	.export		_animate_snake20left_data
	.export		_animate_snake21left_data
	.export		_animate_snake22left_data
	.export		_animate_spidrer1_data
	.export		_animate_spider2_data
	.export		_animate_spider3_data
	.export		_animate_spiderweb_data
	.export		_animate_mousewalk1left_data
	.export		_animate_mousewalk2left_data
	.export		_animate_mousewalk3left_data
	.export		_animate_mousewalk1right_data
	.export		_animate_mousewalk2right_data
	.export		_animate_mousewalk3right_data
	.export		_animate_mousejumpleft_data
	.export		_animate_mousejumpright_data
	.export		_animate_bearstandleft_data
	.export		_animate_bearstandright_data
	.export		_animate_bearroarleft_data
	.export		_animate_bearroarright_data
	.export		_animate_beararms_data
	.export		_animate_beararmsright_data
	.export		_animate_bearwalk1eft_data
	.export		_animate_bearwalk2left_data
	.export		_animate_bearwalk3left_data
	.export		_animate_bearwalkright_data
	.export		_animate_bearwalk2right_data
	.export		_animate_bearwalk3right_data
	.export		_animate_bouldersmall_data
	.export		_animate_fisleft_data
	.export		_animate_fishright_data
	.export		_animate_stoneupplerleft_data
	.export		_animate_stoneupperright_data
	.export		_animate_stownlowerleft_data
	.export		_animate_stonelowerright_data
	.export		_animate_stonebig_data
	.export		_animate_stonesmall_data
	.export		_animate_starburst1_data
	.export		_animate_starburst2_data
	.export		_animate_starburst3_data
	.export		_debug
	.export		_pad1
	.export		_pad1_new
	.export		_short_jump_count
	.export		_map_loaded
	.export		_collision
	.export		_player_in_air
	.export		_player_is_running
	.export		_player_on_ladder
	.export		_player_on_ladder_pose
	.export		_player_in_hitstun
	.export		_player_running
	.export		_collision_L
	.export		_collision_R
	.export		_collision_U
	.export		_collision_D
	.export		_coordinates
	.export		_falling_down
	.export		_nametable_to_load
	.export		_temp1
	.export		_temp2
	.export		_temp3
	.export		_temp4
	.export		_multi_jump
	.export		_temp5
	.export		_temp6
	.export		_tempint
	.export		_tempint2
	.export		_temp_playerlocation
	.export		_level
	.export		_offset
	.export		_level_up
	.export		_level_down
	.export		_eject_L
	.export		_eject_R
	.export		_eject_D
	.export		_eject_U
	.export		_direction
	.export		_hit_direction
	.export		_direction_y
	.export		_sprite_frame_counter
	.export		_frame_counter
	.export		_frame_counter2
	.export		_address
	.export		_x
	.export		_y
	.export		_nt
	.export		_index
	.export		_index2
	.export		_room_to_load
	.export		_current_room
	.export		_map
	.export		_scroll_x
	.export		_scroll_y
	.export		_scroll_count
	.export		_pseudo_scroll_x
	.export		_song
	.export		_game_mode
	.export		_pointer
	.export		_l_scroll_frames
	.export		_r_scroll_frames
	.export		_old_x
	.export		_old_y
	.export		_bright
	.export		_bright_count
	.export		_temp
	.export		_temp_x
	.export		_temp_y
	.export		_temp_room
	.export		_player_shooting
	.export		_death
	.export		_death_flag
	.export		_invul_frames
	.export		_projectile_cooldown
	.export		_projectile_count
	.export		_projectile_index
	.export		_projectiles_list
	.export		_projectiles_x
	.export		_projectiles_y
	.export		_sine_wave
	.export		_shuffle_array
	.export		_c_map
	.export		_c_map2
	.export		_Generic
	.export		_Generic2
	.export		_BoxGuy1
	.export		_max_rooms
	.export		_max_scroll
	.export		_enemy_x
	.export		_enemy_y
	.export		_enemy_active
	.export		_enemy_mode
	.export		_enemy_health
	.export		_enemy_room
	.export		_enemy_actual_x
	.export		_enemy_type
	.export		_enemy_dir
	.export		_enemy_anim
	.export		_enemy_frames
	.export		_entity_x
	.export		_entity_y
	.export		_entity_active
	.export		_entity_room
	.export		_entity_actual_x
	.export		_entity_type
	.export		_entity_anim
	.export		_entity_frames
	.export		_palette_bg
	.export		_palette_sp
	.export		_metatile
	.export		_metatile_colision_map
	.export		_level0_0
	.export		_level0_1
	.export		_level0_2
	.export		_level0_3
	.export		_level0_4
	.export		_level0_5
	.export		_level0_6
	.export		_level0_7
	.export		_level1_0
	.export		_level2_0
	.export		_level2_1
	.export		_level2_2
	.export		_level2_3
	.export		_level3_0
	.export		_level4_0
	.export		_level4_1
	.export		_level4_2
	.export		_level4_3
	.export		_level4_4
	.export		_level5_0
	.export		_level6_0
	.export		_level6_1
	.export		_level7_0
	.export		_stage1_levels_list
	.export		_level_max_rooms
	.export		_level_offsets
	.export		_level_0_enemies
	.export		_level_1_enemies
	.export		_level_2_enemies
	.export		_level_3_enemies
	.export		_level_4_enemies
	.export		_level_5_enemies
	.export		_level_6_enemies
	.export		_level_7_enemies
	.export		_Enemy_list
	.export		_level_0_entities
	.export		_level_1_entities
	.export		_level_2_entities
	.export		_level_3_entities
	.export		_level_4_entities
	.export		_level_5_entities
	.export		_level_6_entities
	.export		_entity_list
	.export		_load_room
	.export		_draw_sprites
	.export		_movement
	.export		_bg_collision_sub
	.export		_draw_screen_R
	.export		_draw_screen_L
	.export		_new_cmap
	.export		_handle_scrolling
	.export		_projectile_movement
	.export		_check_spr_objects
	.export		_check_entity_objects
	.export		_sprite_collisions
	.export		_entity_collisions
	.export		_load_title
	.export		_load_victory
	.export		_enemy_moves
	.export		_entity_moves
	.export		_reset
	.export		_sprite_obj_init
	.export		_entity_obj_init
	.export		_init_death
	.export		_init_mode_switch
	.export		_level_down_routine
	.export		_level_up_routine
	.export		_enemy_snail_behavior
	.export		_enemy_owl_behavior
	.export		_enemy_bear_behavior
	.export		_bg_coll_L
	.export		_bg_coll_R
	.export		_bg_coll_U
	.export		_bg_coll_D
	.export		_bg_coll_D2
	.export		_get_position
	.export		_bg_collision_fast
	.export		_bg_coll_ladder
	.export		_bg_coll_ladder_top_at_player
	.export		_bg_coll_ladder_top_under_player
	.export		_draw_health_meter
	.export		_draw_player_sprites
	.export		_main
	.export		_titletiled_0
	.export		_gameovertiled_0
	.export		_palette_gameover
	.export		_load_gameover
	.export		_victory
	.export		_palette_victory

.segment	"DATA"

_direction:
	.byte	$01
_direction_y:
	.byte	$01
_room_to_load:
	.byte	$00
_current_room:
	.byte	$00
_projectiles_list:
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
_projectiles_x:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_projectiles_y:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_sine_wave:
	.byte	$05
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$08
	.byte	$05
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$02
_BoxGuy1:
	.word	$4000
	.word	$8400
	.res	5,$00

.segment	"RODATA"

_animate_bread_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$2B
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$2B
	.byte	$C2
	.byte	$80
_animate_bread2_data:
	.byte	$00
	.byte	$00
	.byte	$0D
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$2B
	.byte	$82
	.byte	$08
	.byte	$F8
	.byte	$2B
	.byte	$42
	.byte	$80
_animate_bun_data:
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$2B
	.byte	$02
	.byte	$80
_animate_bun2_data:
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$2B
	.byte	$C2
	.byte	$80
_animate_fruit_data:
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$00
	.byte	$80
_animate_wine_data:
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$1F
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$1C
	.byte	$00
	.byte	$80
_animate_implosion1_data:
	.byte	$00
	.byte	$00
	.byte	$2E
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$2E
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$2E
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$2E
	.byte	$C2
	.byte	$80
_animate_implosion2_data:
	.byte	$04
	.byte	$04
	.byte	$4E
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$2F
	.byte	$02
	.byte	$80
_animate_implosion3_data:
	.byte	$04
	.byte	$05
	.byte	$4F
	.byte	$02
	.byte	$80
_animate_orb0_data:
	.byte	$00
	.byte	$00
	.byte	$0C
	.byte	$00
	.byte	$80
_animate_meter28_data:
	.byte	$00
	.byte	$00
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter27_data:
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter26_data:
	.byte	$00
	.byte	$00
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter25_data:
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter24_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter23_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter22_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter21_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter20_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter19_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter18_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter17_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter16_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter15_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter14_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter13_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter12_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter11_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter10_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter9_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter8_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$50
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter7_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$51
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter6_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$52
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter5_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$53
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter4_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$50
	.byte	$02
	.byte	$80
_animate_meter3_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$51
	.byte	$02
	.byte	$80
_animate_meter2_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$52
	.byte	$02
	.byte	$80
_animate_meter1_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$53
	.byte	$02
	.byte	$80
_animate_meter0_data:
	.byte	$00
	.byte	$00
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$10
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$18
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$20
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$28
	.byte	$54
	.byte	$02
	.byte	$00
	.byte	$30
	.byte	$54
	.byte	$02
	.byte	$80
_animate_laddertop_data:
	.byte	$00
	.byte	$00
	.byte	$57
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$57
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$26
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$36
	.byte	$00
	.byte	$00
	.byte	$F8
	.byte	$55
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$56
	.byte	$00
	.byte	$80
_animate_playerclimb1_data:
	.byte	$00
	.byte	$F8
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$80
_animate_playerclimb2_data:
	.byte	$00
	.byte	$F8
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$80
_animate_playerclimbshootleft_data:
	.byte	$00
	.byte	$F8
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$16
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$25
	.byte	$00
	.byte	$01
	.byte	$F9
	.byte	$0A
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerclimbshootright_data:
	.byte	$00
	.byte	$F8
	.byte	$07
	.byte	$40
	.byte	$08
	.byte	$F8
	.byte	$06
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$16
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$23
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$07
	.byte	$F9
	.byte	$0A
	.byte	$42
	.byte	$80
_animate_recoilleft_data:
	.byte	$00
	.byte	$F8
	.byte	$29
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$2A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$39
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$49
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$4A
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$3B
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$3B
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_skeletonleft_data:
	.byte	$00
	.byte	$F8
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$2D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4D
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$4B
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$80
_animate_deathleft1_data:
	.byte	$00
	.byte	$F8
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$2D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4D
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$4B
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$80
_animate_deathleft2_data:
	.byte	$00
	.byte	$F8
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$F8
	.byte	$2D
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4D
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$4B
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$80
_animate_deathleft3_data:
	.byte	$00
	.byte	$FA
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$02
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$FA
	.byte	$2D
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$4B
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4D
	.byte	$02
	.byte	$80
_animate_deathleft4_data:
	.byte	$00
	.byte	$FC
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$04
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$04
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$FC
	.byte	$2D
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$4B
	.byte	$42
	.byte	$F8
	.byte	$02
	.byte	$4B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4D
	.byte	$02
	.byte	$80
_animate_deathleft5_data:
	.byte	$00
	.byte	$FE
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$06
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$FE
	.byte	$2D
	.byte	$02
	.byte	$10
	.byte	$04
	.byte	$4B
	.byte	$42
	.byte	$F8
	.byte	$04
	.byte	$4B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4D
	.byte	$02
	.byte	$80
_animate_deathleft6_data:
	.byte	$00
	.byte	$FE
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$06
	.byte	$3C
	.byte	$02
	.byte	$08
	.byte	$06
	.byte	$3D
	.byte	$02
	.byte	$08
	.byte	$FE
	.byte	$2D
	.byte	$02
	.byte	$10
	.byte	$06
	.byte	$4B
	.byte	$42
	.byte	$F8
	.byte	$06
	.byte	$4B
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$4C
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$4D
	.byte	$02
	.byte	$80
_animate_deathleft7_data:
	.byte	$00
	.byte	$FF
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$5E
	.byte	$02
	.byte	$08
	.byte	$07
	.byte	$5F
	.byte	$02
	.byte	$08
	.byte	$FF
	.byte	$2D
	.byte	$02
	.byte	$0F
	.byte	$09
	.byte	$4B
	.byte	$42
	.byte	$F9
	.byte	$09
	.byte	$4B
	.byte	$02
	.byte	$80
_animate_deathleft8_data:
	.byte	$00
	.byte	$FF
	.byte	$2C
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$5E
	.byte	$02
	.byte	$08
	.byte	$07
	.byte	$5F
	.byte	$02
	.byte	$08
	.byte	$FF
	.byte	$2D
	.byte	$02
	.byte	$0F
	.byte	$0B
	.byte	$4B
	.byte	$42
	.byte	$F9
	.byte	$0B
	.byte	$4B
	.byte	$02
	.byte	$80
_animate_recoilright_data:
	.byte	$08
	.byte	$F8
	.byte	$29
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$2A
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$39
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$3A
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$49
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$4A
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$3B
	.byte	$40
	.byte	$10
	.byte	$00
	.byte	$3B
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_skeletonright_data:
	.byte	$08
	.byte	$F8
	.byte	$2C
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$3D
	.byte	$42
	.byte	$00
	.byte	$F8
	.byte	$2D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$4B
	.byte	$42
	.byte	$80
_animate_deathright1_data:
	.byte	$08
	.byte	$F8
	.byte	$2C
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$3D
	.byte	$42
	.byte	$00
	.byte	$F8
	.byte	$2D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$4B
	.byte	$42
	.byte	$80
_animate_deathright2_data:
	.byte	$08
	.byte	$F8
	.byte	$2C
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$3D
	.byte	$42
	.byte	$00
	.byte	$F8
	.byte	$2D
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$4B
	.byte	$42
	.byte	$80
_animate_deathright3_data:
	.byte	$08
	.byte	$FA
	.byte	$2C
	.byte	$42
	.byte	$08
	.byte	$02
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$02
	.byte	$3D
	.byte	$42
	.byte	$00
	.byte	$FA
	.byte	$2D
	.byte	$42
	.byte	$F8
	.byte	$00
	.byte	$4B
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$4B
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$42
	.byte	$80
_animate_deathright4_data:
	.byte	$08
	.byte	$FC
	.byte	$2C
	.byte	$42
	.byte	$08
	.byte	$04
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$04
	.byte	$3D
	.byte	$42
	.byte	$00
	.byte	$FC
	.byte	$2D
	.byte	$42
	.byte	$F8
	.byte	$02
	.byte	$4B
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$4B
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$42
	.byte	$80
_animate_deathright5_data:
	.byte	$08
	.byte	$FE
	.byte	$2C
	.byte	$42
	.byte	$08
	.byte	$06
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$06
	.byte	$3D
	.byte	$42
	.byte	$00
	.byte	$FE
	.byte	$2D
	.byte	$42
	.byte	$F8
	.byte	$04
	.byte	$4B
	.byte	$02
	.byte	$10
	.byte	$04
	.byte	$4B
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$42
	.byte	$80
_animate_deathright6_data:
	.byte	$08
	.byte	$FE
	.byte	$2C
	.byte	$42
	.byte	$08
	.byte	$06
	.byte	$3C
	.byte	$42
	.byte	$00
	.byte	$06
	.byte	$3D
	.byte	$42
	.byte	$00
	.byte	$FE
	.byte	$2D
	.byte	$42
	.byte	$F8
	.byte	$06
	.byte	$4B
	.byte	$02
	.byte	$10
	.byte	$06
	.byte	$4B
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$4C
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$4D
	.byte	$42
	.byte	$80
_animate_deathright7_data:
	.byte	$08
	.byte	$FF
	.byte	$2C
	.byte	$42
	.byte	$08
	.byte	$07
	.byte	$5E
	.byte	$42
	.byte	$00
	.byte	$07
	.byte	$5F
	.byte	$42
	.byte	$00
	.byte	$FF
	.byte	$2D
	.byte	$42
	.byte	$F9
	.byte	$09
	.byte	$4B
	.byte	$02
	.byte	$0F
	.byte	$09
	.byte	$4B
	.byte	$42
	.byte	$80
_animate_deathright8_data:
	.byte	$08
	.byte	$FF
	.byte	$2C
	.byte	$42
	.byte	$08
	.byte	$07
	.byte	$5E
	.byte	$42
	.byte	$00
	.byte	$07
	.byte	$5F
	.byte	$42
	.byte	$00
	.byte	$FF
	.byte	$2D
	.byte	$42
	.byte	$F9
	.byte	$0B
	.byte	$4B
	.byte	$02
	.byte	$0F
	.byte	$0B
	.byte	$4B
	.byte	$42
	.byte	$80
_animate_playerstandright_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$10
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerstandleft_data:
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerstandshootleft_data:
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$21
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerstandshootright_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$20
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$21
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerrun1left_data:
	.byte	$00
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$32
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$43
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerrun2left_data:
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerrun3left_data:
	.byte	$00
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$34
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$35
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$44
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerrun1right_data:
	.byte	$08
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$32
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$43
	.byte	$40
	.byte	$F8
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerrun2right_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$30
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$41
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerrun3right_data:
	.byte	$08
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$34
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$35
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$45
	.byte	$40
	.byte	$F8
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerrunshoot1left_data:
	.byte	$00
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$43
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$80
_animate_playerrunshoot2left_data:
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$31
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$41
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerrunshoot3left_data:
	.byte	$00
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$1B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$35
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$44
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$45
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$46
	.byte	$00
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$80
_animate_playerrunshoot1right_data:
	.byte	$08
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$19
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$33
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$42
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$43
	.byte	$40
	.byte	$F8
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$18
	.byte	$40
	.byte	$80
_animate_playerrunshoot2right_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$31
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$41
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_playerrunshoot3right_data:
	.byte	$08
	.byte	$F8
	.byte	$1A
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$1B
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$19
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$35
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$45
	.byte	$40
	.byte	$F8
	.byte	$08
	.byte	$46
	.byte	$40
	.byte	$04
	.byte	$FB
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$18
	.byte	$40
	.byte	$80
_animate_playerjumpleft_data:
	.byte	$00
	.byte	$F8
	.byte	$27
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$37
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$48
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$58
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_playerjumpleftshoot_data:
	.byte	$00
	.byte	$F8
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$F8
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$47
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$48
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$58
	.byte	$00
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$80
_animate_playerjumpright_data:
	.byte	$08
	.byte	$F8
	.byte	$27
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$28
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$37
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$47
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$48
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$58
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_playerjumprightshoot_data:
	.byte	$08
	.byte	$F8
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$F8
	.byte	$28
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$47
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$48
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$58
	.byte	$40
	.byte	$04
	.byte	$F9
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$40
	.byte	$80
_animate_hootyowl1left_data:
	.byte	$00
	.byte	$00
	.byte	$E7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$F7
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$E9
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$F9
	.byte	$02
	.byte	$80
_animate_hootyowl2left_data:
	.byte	$00
	.byte	$00
	.byte	$C7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$F7
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$C9
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$F9
	.byte	$02
	.byte	$80
_animate_hootyowl3left_data:
	.byte	$00
	.byte	$00
	.byte	$A7
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$B7
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$A9
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$B9
	.byte	$02
	.byte	$80
_animate_hootyowl4left_data:
	.byte	$00
	.byte	$00
	.byte	$87
	.byte	$02
	.byte	$08
	.byte	$00
	.byte	$88
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$89
	.byte	$02
	.byte	$08
	.byte	$08
	.byte	$98
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$97
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$99
	.byte	$02
	.byte	$80
_animate_hootyowl5left_data:
	.byte	$00
	.byte	$08
	.byte	$87
	.byte	$82
	.byte	$08
	.byte	$08
	.byte	$88
	.byte	$82
	.byte	$10
	.byte	$08
	.byte	$89
	.byte	$82
	.byte	$08
	.byte	$00
	.byte	$98
	.byte	$82
	.byte	$00
	.byte	$00
	.byte	$97
	.byte	$82
	.byte	$10
	.byte	$00
	.byte	$99
	.byte	$82
	.byte	$80
_animate_hootyowl1right_data:
	.byte	$10
	.byte	$00
	.byte	$E7
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$F7
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$E9
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$F9
	.byte	$42
	.byte	$80
_animate_hootyowl2right_data:
	.byte	$10
	.byte	$00
	.byte	$C7
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$F7
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$C9
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$F9
	.byte	$42
	.byte	$80
_animate_hootyowl3right_data:
	.byte	$10
	.byte	$00
	.byte	$A7
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$B7
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$E8
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$A9
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$F8
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$B9
	.byte	$42
	.byte	$80
_animate_hootyowl4right_data:
	.byte	$10
	.byte	$00
	.byte	$87
	.byte	$42
	.byte	$08
	.byte	$00
	.byte	$88
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$42
	.byte	$08
	.byte	$08
	.byte	$98
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$97
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$99
	.byte	$42
	.byte	$80
_animate_hootyowl5right_data:
	.byte	$10
	.byte	$08
	.byte	$87
	.byte	$C2
	.byte	$08
	.byte	$08
	.byte	$88
	.byte	$C2
	.byte	$00
	.byte	$08
	.byte	$89
	.byte	$C2
	.byte	$08
	.byte	$00
	.byte	$98
	.byte	$C2
	.byte	$10
	.byte	$00
	.byte	$97
	.byte	$C2
	.byte	$00
	.byte	$00
	.byte	$99
	.byte	$C2
	.byte	$80
_animate_snail1left_data:
	.byte	$00
	.byte	$00
	.byte	$ED
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$FD
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$EF
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$FF
	.byte	$03
	.byte	$80
_animate_snail2left_data:
	.byte	$00
	.byte	$00
	.byte	$CD
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$DD
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$EF
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$DF
	.byte	$03
	.byte	$80
_animate_snail3left_data:
	.byte	$00
	.byte	$00
	.byte	$AD
	.byte	$03
	.byte	$00
	.byte	$08
	.byte	$BD
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$EF
	.byte	$03
	.byte	$10
	.byte	$08
	.byte	$BF
	.byte	$03
	.byte	$80
_animate_snail1right_data:
	.byte	$10
	.byte	$00
	.byte	$ED
	.byte	$43
	.byte	$10
	.byte	$08
	.byte	$FD
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$EF
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$43
	.byte	$80
_animate_snail2right_data:
	.byte	$10
	.byte	$00
	.byte	$CD
	.byte	$43
	.byte	$10
	.byte	$08
	.byte	$DD
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$EF
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$DF
	.byte	$43
	.byte	$80
_animate_snail3right_data:
	.byte	$10
	.byte	$00
	.byte	$AD
	.byte	$43
	.byte	$10
	.byte	$08
	.byte	$BD
	.byte	$43
	.byte	$08
	.byte	$00
	.byte	$EE
	.byte	$43
	.byte	$08
	.byte	$08
	.byte	$FE
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$EF
	.byte	$43
	.byte	$00
	.byte	$08
	.byte	$BF
	.byte	$43
	.byte	$80
_animate_snake1left_data:
	.byte	$20
	.byte	$08
	.byte	$FA
	.byte	$C1
	.byte	$80
_animate_snake2left_data:
	.byte	$20
	.byte	$00
	.byte	$FA
	.byte	$C1
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$80
_animate_snake3left_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$80
_animate_snake4left_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$80
_animate_snake5left_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$FA
	.byte	$01
	.byte	$80
_animate_snake6left_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$CC
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake7left_data:
	.byte	$20
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$20
	.byte	$08
	.byte	$EC
	.byte	$C1
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake8left_data:
	.byte	$20
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$FA
	.byte	$C1
	.byte	$80
_animate_snake9left_data:
	.byte	$10
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$18
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$FA
	.byte	$C1
	.byte	$80
_animate_snake10left_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$80
_animate_snake11left_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$FB
	.byte	$01
	.byte	$80
_animate_snake12left_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$FC
	.byte	$01
	.byte	$80
_animate_snake13left_data:
	.byte	$10
	.byte	$00
	.byte	$EC
	.byte	$41
	.byte	$10
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$FB
	.byte	$01
	.byte	$80
_animate_snake14left_data:
	.byte	$10
	.byte	$08
	.byte	$EC
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$CB
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$80
_animate_snake15left_data:
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$FA
	.byte	$01
	.byte	$80
_animate_snake16left_data:
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake17left_data:
	.byte	$00
	.byte	$08
	.byte	$CC
	.byte	$81
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake18left_data:
	.byte	$00
	.byte	$08
	.byte	$EC
	.byte	$C1
	.byte	$00
	.byte	$00
	.byte	$EB
	.byte	$01
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake19left_data:
	.byte	$00
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F8
	.byte	$00
	.byte	$DC
	.byte	$81
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake20left_data:
	.byte	$F8
	.byte	$00
	.byte	$DB
	.byte	$41
	.byte	$F0
	.byte	$00
	.byte	$EA
	.byte	$01
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake21left_data:
	.byte	$F0
	.byte	$00
	.byte	$EC
	.byte	$01
	.byte	$F0
	.byte	$08
	.byte	$CC
	.byte	$41
	.byte	$80
_animate_snake22left_data:
	.byte	$F0
	.byte	$08
	.byte	$EC
	.byte	$01
	.byte	$80
_animate_spidrer1_data:
	.byte	$00
	.byte	$00
	.byte	$BA
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$BA
	.byte	$43
	.byte	$80
_animate_spider2_data:
	.byte	$00
	.byte	$00
	.byte	$CA
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$CA
	.byte	$43
	.byte	$80
_animate_spider3_data:
	.byte	$00
	.byte	$00
	.byte	$DA
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$DA
	.byte	$43
	.byte	$80
_animate_spiderweb_data:
	.byte	$00
	.byte	$00
	.byte	$BB
	.byte	$02
	.byte	$80
_animate_mousewalk1left_data:
	.byte	$00
	.byte	$00
	.byte	$78
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$79
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$69
	.byte	$03
	.byte	$80
_animate_mousewalk2left_data:
	.byte	$00
	.byte	$00
	.byte	$74
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$75
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$65
	.byte	$03
	.byte	$80
_animate_mousewalk3left_data:
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$77
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$67
	.byte	$03
	.byte	$80
_animate_mousewalk1right_data:
	.byte	$08
	.byte	$00
	.byte	$78
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$79
	.byte	$43
	.byte	$00
	.byte	$F8
	.byte	$69
	.byte	$43
	.byte	$80
_animate_mousewalk2right_data:
	.byte	$08
	.byte	$00
	.byte	$74
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$75
	.byte	$43
	.byte	$00
	.byte	$F8
	.byte	$65
	.byte	$43
	.byte	$80
_animate_mousewalk3right_data:
	.byte	$08
	.byte	$00
	.byte	$76
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$43
	.byte	$00
	.byte	$F8
	.byte	$67
	.byte	$43
	.byte	$80
_animate_mousejumpleft_data:
	.byte	$00
	.byte	$00
	.byte	$66
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$68
	.byte	$03
	.byte	$08
	.byte	$F8
	.byte	$69
	.byte	$03
	.byte	$80
_animate_mousejumpright_data:
	.byte	$08
	.byte	$00
	.byte	$66
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$68
	.byte	$43
	.byte	$00
	.byte	$F8
	.byte	$69
	.byte	$43
	.byte	$80
_animate_bearstandleft_data:
	.byte	$00
	.byte	$F0
	.byte	$B4
	.byte	$01
	.byte	$08
	.byte	$F0
	.byte	$B5
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$C4
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$C5
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$D4
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$D5
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$E4
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$E5
	.byte	$01
	.byte	$03
	.byte	$F2
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_bearstandright_data:
	.byte	$08
	.byte	$F0
	.byte	$B4
	.byte	$41
	.byte	$00
	.byte	$F0
	.byte	$B5
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$C4
	.byte	$41
	.byte	$00
	.byte	$F8
	.byte	$C5
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$D4
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$D5
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$E4
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$E5
	.byte	$41
	.byte	$05
	.byte	$F2
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_bearroarleft_data:
	.byte	$00
	.byte	$F0
	.byte	$94
	.byte	$01
	.byte	$08
	.byte	$F0
	.byte	$B5
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$A4
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$C5
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$D4
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$D5
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$E4
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$E5
	.byte	$01
	.byte	$03
	.byte	$F2
	.byte	$0B
	.byte	$02
	.byte	$F8
	.byte	$F4
	.byte	$C3
	.byte	$01
	.byte	$80
_animate_bearroarright_data:
	.byte	$08
	.byte	$F0
	.byte	$94
	.byte	$41
	.byte	$00
	.byte	$F0
	.byte	$B5
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$A4
	.byte	$41
	.byte	$00
	.byte	$F8
	.byte	$C5
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$D4
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$D5
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$E4
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$E5
	.byte	$41
	.byte	$05
	.byte	$F2
	.byte	$0B
	.byte	$42
	.byte	$10
	.byte	$F4
	.byte	$C3
	.byte	$41
	.byte	$80
_animate_beararms_data:
	.byte	$00
	.byte	$F0
	.byte	$A0
	.byte	$01
	.byte	$08
	.byte	$F0
	.byte	$A1
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$B0
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$B1
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$C1
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$E4
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$E5
	.byte	$01
	.byte	$03
	.byte	$F2
	.byte	$0B
	.byte	$02
	.byte	$10
	.byte	$F8
	.byte	$B2
	.byte	$01
	.byte	$10
	.byte	$F0
	.byte	$A2
	.byte	$01
	.byte	$80
_animate_beararmsright_data:
	.byte	$08
	.byte	$F0
	.byte	$A0
	.byte	$41
	.byte	$00
	.byte	$F0
	.byte	$A1
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$B0
	.byte	$41
	.byte	$00
	.byte	$F8
	.byte	$B1
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$C0
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$C1
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$E4
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$E5
	.byte	$41
	.byte	$05
	.byte	$F2
	.byte	$0B
	.byte	$42
	.byte	$F8
	.byte	$F8
	.byte	$B2
	.byte	$41
	.byte	$F8
	.byte	$F0
	.byte	$A2
	.byte	$41
	.byte	$80
_animate_bearwalk1eft_data:
	.byte	$00
	.byte	$F0
	.byte	$D0
	.byte	$01
	.byte	$08
	.byte	$F0
	.byte	$D1
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$E0
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$E1
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$F1
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$F3
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$F2
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$D3
	.byte	$01
	.byte	$03
	.byte	$F4
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_bearwalk2left_data:
	.byte	$00
	.byte	$F0
	.byte	$B4
	.byte	$01
	.byte	$08
	.byte	$F0
	.byte	$B5
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$C4
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$C5
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$D2
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$D5
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$F4
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$F5
	.byte	$01
	.byte	$03
	.byte	$F2
	.byte	$0B
	.byte	$02
	.byte	$80
_animate_bearwalk3left_data:
	.byte	$00
	.byte	$F0
	.byte	$D0
	.byte	$01
	.byte	$08
	.byte	$F0
	.byte	$D1
	.byte	$01
	.byte	$00
	.byte	$F8
	.byte	$E0
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$E1
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$E2
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$E3
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$F2
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$F3
	.byte	$01
	.byte	$03
	.byte	$F4
	.byte	$0B
	.byte	$02
	.byte	$10
	.byte	$08
	.byte	$D3
	.byte	$01
	.byte	$80
_animate_bearwalkright_data:
	.byte	$08
	.byte	$F0
	.byte	$D0
	.byte	$41
	.byte	$00
	.byte	$F0
	.byte	$D1
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$E0
	.byte	$41
	.byte	$00
	.byte	$F8
	.byte	$E1
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$F0
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$F1
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$F3
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$F2
	.byte	$41
	.byte	$F8
	.byte	$08
	.byte	$D3
	.byte	$41
	.byte	$05
	.byte	$F4
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_bearwalk2right_data:
	.byte	$08
	.byte	$F0
	.byte	$B4
	.byte	$41
	.byte	$00
	.byte	$F0
	.byte	$B5
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$C4
	.byte	$41
	.byte	$00
	.byte	$F8
	.byte	$C5
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$D2
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$D5
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$F4
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$F5
	.byte	$41
	.byte	$05
	.byte	$F2
	.byte	$0B
	.byte	$42
	.byte	$80
_animate_bearwalk3right_data:
	.byte	$08
	.byte	$F0
	.byte	$D0
	.byte	$41
	.byte	$00
	.byte	$F0
	.byte	$D1
	.byte	$41
	.byte	$08
	.byte	$F8
	.byte	$E0
	.byte	$41
	.byte	$00
	.byte	$F8
	.byte	$E1
	.byte	$41
	.byte	$08
	.byte	$00
	.byte	$E2
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$E3
	.byte	$41
	.byte	$08
	.byte	$08
	.byte	$F2
	.byte	$41
	.byte	$00
	.byte	$08
	.byte	$F3
	.byte	$41
	.byte	$05
	.byte	$F4
	.byte	$0B
	.byte	$42
	.byte	$F8
	.byte	$08
	.byte	$D3
	.byte	$41
	.byte	$80
_animate_bouldersmall_data:
	.byte	$00
	.byte	$00
	.byte	$C2
	.byte	$01
	.byte	$80
_animate_fisleft_data:
	.byte	$00
	.byte	$01
	.byte	$B3
	.byte	$03
	.byte	$80
_animate_fishright_data:
	.byte	$00
	.byte	$01
	.byte	$B3
	.byte	$43
	.byte	$80
_animate_stoneupplerleft_data:
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$03
	.byte	$80
_animate_stoneupperright_data:
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$03
	.byte	$80
_animate_stownlowerleft_data:
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$80
_animate_stonelowerright_data:
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$03
	.byte	$80
_animate_stonebig_data:
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$03
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$03
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$03
	.byte	$80
_animate_stonesmall_data:
	.byte	$00
	.byte	$00
	.byte	$C2
	.byte	$03
	.byte	$80
_animate_starburst1_data:
	.byte	$01
	.byte	$F8
	.byte	$59
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$59
	.byte	$41
	.byte	$08
	.byte	$FF
	.byte	$59
	.byte	$C1
	.byte	$01
	.byte	$FF
	.byte	$59
	.byte	$81
	.byte	$80
_animate_starburst2_data:
	.byte	$01
	.byte	$F8
	.byte	$5A
	.byte	$01
	.byte	$08
	.byte	$F8
	.byte	$5A
	.byte	$41
	.byte	$08
	.byte	$FF
	.byte	$5A
	.byte	$C1
	.byte	$01
	.byte	$FF
	.byte	$5A
	.byte	$81
	.byte	$80
_animate_starburst3_data:
	.byte	$08
	.byte	$F8
	.byte	$5B
	.byte	$41
	.byte	$08
	.byte	$FF
	.byte	$5B
	.byte	$C1
	.byte	$01
	.byte	$FF
	.byte	$5B
	.byte	$81
	.byte	$01
	.byte	$F8
	.byte	$5B
	.byte	$01
	.byte	$80
_shuffle_array:
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$0D
	.byte	$0E
	.byte	$0F
	.byte	$0F
	.byte	$0E
	.byte	$0D
	.byte	$0C
	.byte	$0B
	.byte	$0A
	.byte	$09
	.byte	$08
	.byte	$07
	.byte	$06
	.byte	$05
	.byte	$04
	.byte	$03
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$06
	.byte	$08
	.byte	$0A
	.byte	$0C
	.byte	$0E
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$07
	.byte	$09
	.byte	$0B
	.byte	$0D
	.byte	$0F
	.byte	$0F
	.byte	$0D
	.byte	$0B
	.byte	$09
	.byte	$07
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$0E
	.byte	$0C
	.byte	$0A
	.byte	$08
	.byte	$06
	.byte	$04
	.byte	$02
	.byte	$00
_palette_bg:
	.byte	$21
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$21
	.byte	$0F
	.byte	$30
	.byte	$08
	.byte	$21
	.byte	$0F
	.byte	$17
	.byte	$06
	.byte	$21
	.byte	$0F
	.byte	$19
	.byte	$29
_palette_sp:
	.byte	$21
	.byte	$17
	.byte	$24
	.byte	$36
	.byte	$21
	.byte	$05
	.byte	$16
	.byte	$37
	.byte	$21
	.byte	$0F
	.byte	$11
	.byte	$30
	.byte	$21
	.byte	$17
	.byte	$3D
	.byte	$37
_metatile:
	.byte	$7B
	.byte	$7C
	.byte	$8B
	.byte	$8C
	.byte	$00
	.byte	$7D
	.byte	$7E
	.byte	$8D
	.byte	$8E
	.byte	$00
	.byte	$9B
	.byte	$9C
	.byte	$AB
	.byte	$AC
	.byte	$00
	.byte	$9D
	.byte	$9E
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$BE
	.byte	$AF
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$BE
	.byte	$BE
	.byte	$8B
	.byte	$8C
	.byte	$00
	.byte	$BE
	.byte	$BF
	.byte	$8D
	.byte	$8E
	.byte	$00
	.byte	$BE
	.byte	$BE
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$BE
	.byte	$B9
	.byte	$9B
	.byte	$9C
	.byte	$00
	.byte	$BE
	.byte	$BE
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$BE
	.byte	$BB
	.byte	$AB
	.byte	$AC
	.byte	$00
	.byte	$BE
	.byte	$AF
	.byte	$AD
	.byte	$AE
	.byte	$00
	.byte	$BE
	.byte	$BD
	.byte	$7B
	.byte	$7C
	.byte	$00
	.byte	$BE
	.byte	$BD
	.byte	$7D
	.byte	$7E
	.byte	$00
	.byte	$BA
	.byte	$BF
	.byte	$9B
	.byte	$9C
	.byte	$00
	.byte	$BA
	.byte	$B8
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$7B
	.byte	$AE
	.byte	$7C
	.byte	$7B
	.byte	$00
	.byte	$8B
	.byte	$8C
	.byte	$9B
	.byte	$9C
	.byte	$00
	.byte	$8D
	.byte	$8E
	.byte	$9D
	.byte	$9E
	.byte	$00
	.byte	$7B
	.byte	$7C
	.byte	$8B
	.byte	$01
	.byte	$00
	.byte	$AD
	.byte	$8E
	.byte	$AE
	.byte	$01
	.byte	$00
	.byte	$AD
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$7D
	.byte	$7E
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$9D
	.byte	$9E
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$AB
	.byte	$AC
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$7B
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$7B
	.byte	$AD
	.byte	$01
	.byte	$AE
	.byte	$00
	.byte	$7B
	.byte	$7C
	.byte	$01
	.byte	$7B
	.byte	$00
	.byte	$7A
	.byte	$7C
	.byte	$8B
	.byte	$8C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$00
	.byte	$7B
	.byte	$6A
	.byte	$7C
	.byte	$7B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6A
	.byte	$00
	.byte	$00
	.byte	$75
	.byte	$76
	.byte	$85
	.byte	$86
	.byte	$02
	.byte	$65
	.byte	$66
	.byte	$85
	.byte	$86
	.byte	$02
	.byte	$75
	.byte	$76
	.byte	$95
	.byte	$96
	.byte	$02
	.byte	$74
	.byte	$76
	.byte	$84
	.byte	$86
	.byte	$02
	.byte	$75
	.byte	$77
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$64
	.byte	$66
	.byte	$84
	.byte	$86
	.byte	$02
	.byte	$65
	.byte	$67
	.byte	$85
	.byte	$87
	.byte	$02
	.byte	$74
	.byte	$76
	.byte	$94
	.byte	$96
	.byte	$02
	.byte	$75
	.byte	$77
	.byte	$95
	.byte	$97
	.byte	$02
	.byte	$DF
	.byte	$DF
	.byte	$DC
	.byte	$CD
	.byte	$03
	.byte	$DF
	.byte	$CE
	.byte	$CE
	.byte	$DB
	.byte	$03
	.byte	$CD
	.byte	$CE
	.byte	$EE
	.byte	$EE
	.byte	$03
	.byte	$DF
	.byte	$CF
	.byte	$DC
	.byte	$CC
	.byte	$03
	.byte	$34
	.byte	$CF
	.byte	$DF
	.byte	$33
	.byte	$03
	.byte	$DF
	.byte	$CF
	.byte	$33
	.byte	$CF
	.byte	$03
	.byte	$CB
	.byte	$CE
	.byte	$EF
	.byte	$EE
	.byte	$03
	.byte	$65
	.byte	$66
	.byte	$95
	.byte	$96
	.byte	$02
	.byte	$64
	.byte	$66
	.byte	$94
	.byte	$96
	.byte	$02
	.byte	$65
	.byte	$67
	.byte	$95
	.byte	$97
	.byte	$02
	.byte	$EB
	.byte	$EB
	.byte	$FB
	.byte	$FC
	.byte	$03
	.byte	$EB
	.byte	$EA
	.byte	$FC
	.byte	$FB
	.byte	$03
	.byte	$FA
	.byte	$EB
	.byte	$FC
	.byte	$FC
	.byte	$03
	.byte	$EB
	.byte	$EC
	.byte	$FB
	.byte	$FC
	.byte	$03
	.byte	$98
	.byte	$99
	.byte	$A8
	.byte	$A9
	.byte	$03
	.byte	$9A
	.byte	$98
	.byte	$AA
	.byte	$A8
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$9A
	.byte	$98
	.byte	$03
	.byte	$7B
	.byte	$8B
	.byte	$AD
	.byte	$9B
	.byte	$00
	.byte	$8E
	.byte	$7B
	.byte	$9C
	.byte	$AE
	.byte	$00
	.byte	$8B
	.byte	$7C
	.byte	$9B
	.byte	$AD
	.byte	$00
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$02
	.byte	$0A
	.byte	$0B
	.byte	$0A
	.byte	$0B
	.byte	$02
	.byte	$CA
	.byte	$CA
	.byte	$DA
	.byte	$DA
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$63
	.byte	$73
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$63
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$73
	.byte	$01
	.byte	$03
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$12
	.byte	$13
	.byte	$00
	.byte	$EF
	.byte	$9F
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$EF
	.byte	$EF
	.byte	$EE
	.byte	$EF
	.byte	$03
	.byte	$ED
	.byte	$ED
	.byte	$36
	.byte	$37
	.byte	$03
	.byte	$ED
	.byte	$38
	.byte	$37
	.byte	$00
	.byte	$03
	.byte	$39
	.byte	$ED
	.byte	$00
	.byte	$39
	.byte	$03
	.byte	$02
	.byte	$0D
	.byte	$0E
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$1F
	.byte	$02
	.byte	$02
	.byte	$2F
	.byte	$03
	.byte	$1B
	.byte	$0C
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$3F
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$2A
	.byte	$01
	.byte	$03
	.byte	$1A
	.byte	$01
	.byte	$01
	.byte	$2A
	.byte	$03
	.byte	$1A
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$03
	.byte	$F2
	.byte	$F2
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$F3
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$D4
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$81
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$82
	.byte	$82
	.byte	$03
	.byte	$01
	.byte	$2A
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$1A
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$AA
	.byte	$03
	.byte	$E8
	.byte	$03
	.byte	$A8
	.byte	$A9
	.byte	$68
	.byte	$FC
	.byte	$03
	.byte	$8A
	.byte	$03
	.byte	$F8
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$E9
	.byte	$03
	.byte	$03
	.byte	$08
	.byte	$19
	.byte	$09
	.byte	$18
	.byte	$02
	.byte	$08
	.byte	$19
	.byte	$08
	.byte	$18
	.byte	$02
	.byte	$B1
	.byte	$B2
	.byte	$08
	.byte	$18
	.byte	$02
	.byte	$D4
	.byte	$B0
	.byte	$F3
	.byte	$C0
	.byte	$02
	.byte	$08
	.byte	$19
	.byte	$C1
	.byte	$C2
	.byte	$02
	.byte	$B3
	.byte	$F3
	.byte	$C3
	.byte	$D4
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$F0
	.byte	$02
	.byte	$F1
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$14
	.byte	$04
	.byte	$15
	.byte	$04
	.byte	$02
	.byte	$15
	.byte	$04
	.byte	$15
	.byte	$05
	.byte	$02
	.byte	$E5
	.byte	$E6
	.byte	$14
	.byte	$04
	.byte	$02
	.byte	$D4
	.byte	$E4
	.byte	$F3
	.byte	$F4
	.byte	$02
	.byte	$14
	.byte	$04
	.byte	$F5
	.byte	$F6
	.byte	$02
	.byte	$E7
	.byte	$F3
	.byte	$F7
	.byte	$D4
	.byte	$02
	.byte	$00
	.byte	$E2
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$E3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$17
	.byte	$06
	.byte	$17
	.byte	$02
	.byte	$07
	.byte	$16
	.byte	$07
	.byte	$17
	.byte	$02
	.byte	$06
	.byte	$17
	.byte	$07
	.byte	$17
	.byte	$02
	.byte	$E0
	.byte	$E1
	.byte	$06
	.byte	$16
	.byte	$02
	.byte	$D4
	.byte	$D0
	.byte	$F2
	.byte	$F2
	.byte	$02
	.byte	$D1
	.byte	$F3
	.byte	$F2
	.byte	$F2
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D2
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$D3
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$AA
	.byte	$AA
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$A9
	.byte	$A9
	.byte	$78
	.byte	$69
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$89
	.byte	$00
	.byte	$03
	.byte	$8A
	.byte	$00
	.byte	$8A
	.byte	$00
	.byte	$03
	.byte	$8A
	.byte	$00
	.byte	$79
	.byte	$00
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$F9
	.byte	$03
	.byte	$F9
	.byte	$E9
	.byte	$AA
	.byte	$AA
	.byte	$03
	.byte	$90
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$91
	.byte	$92
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$92
	.byte	$92
	.byte	$02
	.byte	$92
	.byte	$90
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$92
	.byte	$90
	.byte	$02
	.byte	$01
	.byte	$92
	.byte	$90
	.byte	$00
	.byte	$02
	.byte	$7A
	.byte	$32
	.byte	$32
	.byte	$DF
	.byte	$03
	.byte	$CF
	.byte	$89
	.byte	$DF
	.byte	$CF
	.byte	$03
	.byte	$DF
	.byte	$33
	.byte	$DE
	.byte	$DF
	.byte	$03
	.byte	$DD
	.byte	$CF
	.byte	$DF
	.byte	$34
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7A
	.byte	$03
	.byte	$AA
	.byte	$A8
	.byte	$68
	.byte	$69
	.byte	$03
	.byte	$AA
	.byte	$A8
	.byte	$68
	.byte	$68
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$D7
	.byte	$A7
	.byte	$00
	.byte	$D7
	.byte	$A7
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$DF
	.byte	$CF
	.byte	$DC
	.byte	$DB
	.byte	$03
	.byte	$32
	.byte	$33
	.byte	$DE
	.byte	$DF
	.byte	$03
	.byte	$DF
	.byte	$35
	.byte	$CF
	.byte	$DD
	.byte	$03
	.byte	$32
	.byte	$34
	.byte	$32
	.byte	$33
	.byte	$03
	.byte	$33
	.byte	$35
	.byte	$34
	.byte	$35
	.byte	$03
	.byte	$00
	.byte	$7A
	.byte	$88
	.byte	$DF
	.byte	$03
	.byte	$00
	.byte	$88
	.byte	$88
	.byte	$CF
	.byte	$03
	.byte	$6A
	.byte	$00
	.byte	$CF
	.byte	$6A
	.byte	$03
	.byte	$89
	.byte	$00
	.byte	$A8
	.byte	$89
	.byte	$03
	.byte	$A9
	.byte	$6A
	.byte	$A9
	.byte	$AA
	.byte	$03
	.byte	$01
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$03
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$FE
	.byte	$03
	.byte	$EF
	.byte	$EF
	.byte	$FE
	.byte	$FD
	.byte	$03
	.byte	$ED
	.byte	$EE
	.byte	$FE
	.byte	$FF
	.byte	$03
	.byte	$FD
	.byte	$FE
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$FF
	.byte	$FD
	.byte	$00
	.byte	$00
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$3F
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$03
	.byte	$05
	.byte	$03
	.byte	$2F
	.byte	$03
	.byte	$03
	.byte	$01
	.byte	$1F
	.byte	$1F
	.byte	$02
	.byte	$03
	.byte	$0F
	.byte	$02
	.byte	$01
	.byte	$0F
	.byte	$03
	.byte	$02
	.byte	$2F
	.byte	$11
	.byte	$11
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$11
	.byte	$11
	.byte	$03
	.byte	$03
	.byte	$61
	.byte	$60
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$62
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$61
	.byte	$03
	.byte	$03
	.byte	$60
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$72
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$71
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$03
	.byte	$C8
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$C8
	.byte	$C9
	.byte	$01
	.byte	$D9
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3F
	.byte	$03
	.byte	$02
	.byte	$3F
	.byte	$03
	.byte	$01
	.byte	$01
	.byte	$0D
	.byte	$01
	.byte	$03
	.byte	$03
	.byte	$0E
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$A1
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$A2
	.byte	$03
	.byte	$03
	.byte	$A2
	.byte	$03
	.byte	$03
	.byte	$A1
	.byte	$03
	.byte	$A0
	.byte	$03
	.byte	$03
	.byte	$A1
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$83
	.byte	$93
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$03
	.byte	$93
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$03
	.byte	$83
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$C9
	.byte	$D9
	.byte	$D8
	.byte	$01
	.byte	$01
	.byte	$B5
	.byte	$B6
	.byte	$C5
	.byte	$C6
	.byte	$02
	.byte	$01
	.byte	$B4
	.byte	$01
	.byte	$C4
	.byte	$02
	.byte	$B7
	.byte	$01
	.byte	$C7
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$A5
	.byte	$A6
	.byte	$02
	.byte	$D5
	.byte	$D6
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6B
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$9F
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$C8
	.byte	$C9
	.byte	$D8
	.byte	$D9
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$D8
	.byte	$D9
	.byte	$01
	.byte	$C8
	.byte	$01
	.byte	$D8
	.byte	$D9
	.byte	$01
	.byte	$01
	.byte	$C9
	.byte	$D8
	.byte	$D9
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$D8
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$D9
	.byte	$01
	.byte	$01
	.byte	$D9
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$5E
	.byte	$6C
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$6B
	.byte	$6C
	.byte	$00
	.byte	$6B
	.byte	$5E
	.byte	$03
	.byte	$6D
	.byte	$00
	.byte	$6B
	.byte	$5E
	.byte	$6D
	.byte	$5D
	.byte	$00
	.byte	$6D
	.byte	$03
	.byte	$03
	.byte	$6D
	.byte	$00
	.byte	$6D
	.byte	$6D
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$6D
	.byte	$03
	.byte	$03
	.byte	$03
	.byte	$00
	.byte	$6D
	.byte	$40
	.byte	$6D
	.byte	$40
	.byte	$00
	.byte	$40
	.byte	$6E
	.byte	$6F
	.byte	$40
	.byte	$00
	.byte	$6D
	.byte	$14
	.byte	$03
	.byte	$6F
	.byte	$00
	.byte	$40
	.byte	$6E
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$6E
	.byte	$6E
	.byte	$40
	.byte	$6E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1C
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$1D
	.byte	$00
	.byte	$01
	.byte	$6D
	.byte	$6D
	.byte	$A3
	.byte	$A4
	.byte	$00
	.byte	$5D
	.byte	$5B
	.byte	$40
	.byte	$9F
	.byte	$00
	.byte	$5C
	.byte	$80
	.byte	$9F
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5B
	.byte	$5C
	.byte	$00
	.byte	$5F
	.byte	$00
	.byte	$9F
	.byte	$5F
	.byte	$00
	.byte	$5B
	.byte	$5C
	.byte	$9F
	.byte	$01
	.byte	$00
	.byte	$6B
	.byte	$6C
	.byte	$01
	.byte	$A3
	.byte	$00
	.byte	$6D
	.byte	$03
	.byte	$A4
	.byte	$03
	.byte	$00
	.byte	$A3
	.byte	$A4
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$03
	.byte	$6D
	.byte	$A4
	.byte	$03
	.byte	$00
	.byte	$9F
	.byte	$9F
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$9F
	.byte	$01
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$6E
	.byte	$9F
	.byte	$6E
	.byte	$8F
	.byte	$00
	.byte	$8F
	.byte	$7F
	.byte	$6E
	.byte	$6E
	.byte	$00
	.byte	$9F
	.byte	$9F
	.byte	$8F
	.byte	$7F
	.byte	$00
	.byte	$7F
	.byte	$9F
	.byte	$6E
	.byte	$8F
	.byte	$00
_metatile_colision_map:
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_level0_0:
	.byte	$3C
	.byte	$1E
	.byte	$1F
	.byte	$50
	.byte	$8B
	.byte	$86
	.byte	$2D
	.byte	$87
	.byte	$7B
	.byte	$86
	.byte	$2D
	.byte	$2D
	.byte	$92
	.byte	$94
	.byte	$89
	.byte	$94
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$1F
	.byte	$86
	.byte	$93
	.byte	$2D
	.byte	$2D
	.byte	$87
	.byte	$93
	.byte	$2E
	.byte	$93
	.byte	$2D
	.byte	$2D
	.byte	$89
	.byte	$91
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$1E
	.byte	$93
	.byte	$92
	.byte	$2E
	.byte	$2D
	.byte	$92
	.byte	$91
	.byte	$2E
	.byte	$2E
	.byte	$93
	.byte	$2D
	.byte	$94
	.byte	$2D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$91
	.byte	$93
	.byte	$2D
	.byte	$2D
	.byte	$2D
	.byte	$91
	.byte	$89
	.byte	$2D
	.byte	$2D
	.byte	$92
	.byte	$94
	.byte	$91
	.byte	$02
	.byte	$03
	.byte	$15
	.byte	$1B
	.byte	$91
	.byte	$2D
	.byte	$2D
	.byte	$2D
	.byte	$89
	.byte	$90
	.byte	$88
	.byte	$2E
	.byte	$2D
	.byte	$2E
	.byte	$88
	.byte	$91
	.byte	$00
	.byte	$15
	.byte	$CC
	.byte	$CD
	.byte	$29
	.byte	$89
	.byte	$2D
	.byte	$88
	.byte	$2A
	.byte	$46
	.byte	$90
	.byte	$2A
	.byte	$2B
	.byte	$2F
	.byte	$90
	.byte	$88
	.byte	$14
	.byte	$CE
	.byte	$BF
	.byte	$9A
	.byte	$49
	.byte	$90
	.byte	$2C
	.byte	$2A
	.byte	$47
	.byte	$73
	.byte	$48
	.byte	$49
	.byte	$6A
	.byte	$9F
	.byte	$49
	.byte	$2B
	.byte	$CA
	.byte	$C9
	.byte	$CD
	.byte	$50
	.byte	$50
	.byte	$49
	.byte	$62
	.byte	$48
	.byte	$50
	.byte	$71
	.byte	$77
	.byte	$50
	.byte	$69
	.byte	$50
	.byte	$50
	.byte	$9F
	.byte	$C9
	.byte	$CB
	.byte	$51
	.byte	$50
	.byte	$50
	.byte	$66
	.byte	$60
	.byte	$67
	.byte	$50
	.byte	$71
	.byte	$50
	.byte	$6E
	.byte	$69
	.byte	$50
	.byte	$50
	.byte	$76
	.byte	$C9
	.byte	$CB
	.byte	$CD
	.byte	$E2
	.byte	$59
	.byte	$59
	.byte	$61
	.byte	$58
	.byte	$59
	.byte	$72
	.byte	$58
	.byte	$59
	.byte	$68
	.byte	$58
	.byte	$59
	.byte	$58
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$51
	.byte	$54
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$74
	.byte	$55
	.byte	$75
	.byte	$52
	.byte	$69
	.byte	$54
	.byte	$51
	.byte	$74
	.byte	$0F
	.byte	$04
	.byte	$04
	.byte	$0C
	.byte	$42
	.byte	$51
	.byte	$55
	.byte	$42
	.byte	$54
	.byte	$55
	.byte	$53
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$53
	.byte	$51
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$0F
	.byte	$06
	.byte	$08
	.byte	$0C
	.byte	$51
	.byte	$40
	.byte	$41
	.byte	$56
	.byte	$55
	.byte	$57
	.byte	$56
	.byte	$56
	.byte	$00
	.byte	$3C
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
_level0_1:
	.byte	$2D
	.byte	$2E
	.byte	$89
	.byte	$88
	.byte	$89
	.byte	$2E
	.byte	$2E
	.byte	$89
	.byte	$88
	.byte	$89
	.byte	$2E
	.byte	$2E
	.byte	$89
	.byte	$87
	.byte	$50
	.byte	$50
	.byte	$2D
	.byte	$2E
	.byte	$94
	.byte	$93
	.byte	$93
	.byte	$2D
	.byte	$92
	.byte	$2E
	.byte	$94
	.byte	$2E
	.byte	$2E
	.byte	$2E
	.byte	$2E
	.byte	$2E
	.byte	$50
	.byte	$50
	.byte	$2E
	.byte	$2E
	.byte	$2E
	.byte	$91
	.byte	$2D
	.byte	$2E
	.byte	$2D
	.byte	$2E
	.byte	$92
	.byte	$2D
	.byte	$2E
	.byte	$2E
	.byte	$92
	.byte	$2A
	.byte	$50
	.byte	$50
	.byte	$2D
	.byte	$2E
	.byte	$92
	.byte	$88
	.byte	$94
	.byte	$2D
	.byte	$2E
	.byte	$2E
	.byte	$92
	.byte	$93
	.byte	$2E
	.byte	$2E
	.byte	$94
	.byte	$48
	.byte	$50
	.byte	$50
	.byte	$2D
	.byte	$2D
	.byte	$94
	.byte	$89
	.byte	$88
	.byte	$2D
	.byte	$2D
	.byte	$89
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$2E
	.byte	$2A
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$90
	.byte	$2B
	.byte	$2C
	.byte	$2A
	.byte	$90
	.byte	$2D
	.byte	$2C
	.byte	$2A
	.byte	$46
	.byte	$62
	.byte	$47
	.byte	$2B
	.byte	$48
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$46
	.byte	$62
	.byte	$48
	.byte	$49
	.byte	$46
	.byte	$2F
	.byte	$46
	.byte	$46
	.byte	$48
	.byte	$61
	.byte	$67
	.byte	$9F
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$73
	.byte	$61
	.byte	$DC
	.byte	$DE
	.byte	$9F
	.byte	$6A
	.byte	$73
	.byte	$9E
	.byte	$50
	.byte	$61
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$71
	.byte	$60
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$69
	.byte	$71
	.byte	$77
	.byte	$50
	.byte	$61
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$72
	.byte	$60
	.byte	$58
	.byte	$58
	.byte	$59
	.byte	$68
	.byte	$72
	.byte	$58
	.byte	$59
	.byte	$61
	.byte	$58
	.byte	$59
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$54
	.byte	$52
	.byte	$69
	.byte	$72
	.byte	$52
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$54
	.byte	$55
	.byte	$54
	.byte	$51
	.byte	$53
	.byte	$55
	.byte	$55
	.byte	$52
	.byte	$42
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$75
	.byte	$56
	.byte	$55
	.byte	$57
	.byte	$52
	.byte	$51
	.byte	$56
	.byte	$51
	.byte	$52
	.byte	$51
	.byte	$54
	.byte	$55
	.byte	$57
	.byte	$56
	.byte	$41
	.byte	$57
	.byte	$51
	.byte	$51
	.byte	$53
	.byte	$41
	.byte	$40
	.byte	$42
	.byte	$0F
	.byte	$04
	.byte	$0C
	.byte	$0B
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$04
	.byte	$08
	.byte	$06
	.byte	$07
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$0D
	.byte	$00
	.byte	$10
	.byte	$11
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
_level0_2:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$35
	.byte	$34
	.byte	$A4
	.byte	$A1
	.byte	$BB
	.byte	$BD
	.byte	$B6
	.byte	$BD
	.byte	$BA
	.byte	$B0
	.byte	$BC
	.byte	$B0
	.byte	$BD
	.byte	$BC
	.byte	$35
	.byte	$36
	.byte	$25
	.byte	$21
	.byte	$51
	.byte	$A0
	.byte	$B8
	.byte	$B0
	.byte	$BC
	.byte	$B0
	.byte	$B8
	.byte	$B0
	.byte	$B7
	.byte	$B9
	.byte	$B0
	.byte	$B8
	.byte	$25
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$A3
	.byte	$A2
	.byte	$AA
	.byte	$A9
	.byte	$B0
	.byte	$A8
	.byte	$AB
	.byte	$B0
	.byte	$A8
	.byte	$A9
	.byte	$35
	.byte	$36
	.byte	$23
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$A5
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$35
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$36
	.byte	$25
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$23
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
_level0_3:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$8B
	.byte	$86
	.byte	$89
	.byte	$2D
	.byte	$89
	.byte	$87
	.byte	$7B
	.byte	$50
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$86
	.byte	$89
	.byte	$2E
	.byte	$88
	.byte	$88
	.byte	$89
	.byte	$87
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$89
	.byte	$93
	.byte	$88
	.byte	$2D
	.byte	$91
	.byte	$2E
	.byte	$94
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$91
	.byte	$89
	.byte	$2E
	.byte	$2D
	.byte	$92
	.byte	$2E
	.byte	$89
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$2C
	.byte	$88
	.byte	$91
	.byte	$2E
	.byte	$88
	.byte	$89
	.byte	$2A
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$49
	.byte	$2C
	.byte	$90
	.byte	$2B
	.byte	$90
	.byte	$2A
	.byte	$48
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9F
	.byte	$49
	.byte	$6A
	.byte	$47
	.byte	$48
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$6E
	.byte	$69
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$68
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$33
	.byte	$36
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$69
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$21
	.byte	$26
	.byte	$35
	.byte	$36
	.byte	$BC
	.byte	$B0
	.byte	$BD
	.byte	$BC
	.byte	$B0
	.byte	$4D
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$53
	.byte	$4F
	.byte	$BE
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$BD
	.byte	$B8
	.byte	$B0
	.byte	$B7
	.byte	$B6
	.byte	$4A
	.byte	$4B
	.byte	$5A
	.byte	$4B
	.byte	$5B
	.byte	$4C
	.byte	$B6
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$24
	.byte	$35
	.byte	$34
	.byte	$36
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$B9
	.byte	$B0
	.byte	$A8
	.byte	$AB
	.byte	$A8
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$21
	.byte	$26
	.byte	$35
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$33
	.byte	$33
	.byte	$36
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$24
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$38
_level0_4:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D2
	.byte	$D6
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$D0
	.byte	$D5
	.byte	$D4
	.byte	$D4
	.byte	$B0
	.byte	$B6
	.byte	$B0
	.byte	$BA
	.byte	$B0
	.byte	$BB
	.byte	$7E
	.byte	$78
	.byte	$5F
	.byte	$BA
	.byte	$B0
	.byte	$BA
	.byte	$BD
	.byte	$BE
	.byte	$BA
	.byte	$B0
	.byte	$B8
	.byte	$B0
	.byte	$B9
	.byte	$B0
	.byte	$B7
	.byte	$BC
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$B6
	.byte	$B7
	.byte	$A9
	.byte	$AB
	.byte	$B7
	.byte	$0E
	.byte	$0D
	.byte	$B0
	.byte	$B9
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$B7
	.byte	$B0
	.byte	$A8
	.byte	$B7
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$0E
	.byte	$0D
	.byte	$00
	.byte	$3C
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$0E
	.byte	$09
	.byte	$04
	.byte	$05
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$14
	.byte	$02
	.byte	$01
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
_level0_5:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D3
	.byte	$50
	.byte	$50
	.byte	$C5
	.byte	$D1
	.byte	$D3
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D2
	.byte	$D5
	.byte	$0E
	.byte	$50
	.byte	$D0
	.byte	$D4
	.byte	$D6
	.byte	$D7
	.byte	$EC
	.byte	$EB
	.byte	$EA
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$D0
	.byte	$D5
	.byte	$D4
	.byte	$D4
	.byte	$00
	.byte	$D2
	.byte	$D4
	.byte	$D4
	.byte	$D4
	.byte	$D9
	.byte	$DA
	.byte	$EE
	.byte	$E9
	.byte	$E9
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$D4
	.byte	$0F
	.byte	$0C
	.byte	$02
	.byte	$D6
	.byte	$D4
	.byte	$D6
	.byte	$D6
	.byte	$D4
	.byte	$D8
	.byte	$DA
	.byte	$EF
	.byte	$E9
	.byte	$E9
	.byte	$EB
	.byte	$EA
	.byte	$E7
	.byte	$3C
	.byte	$12
	.byte	$3A
	.byte	$0E
	.byte	$07
	.byte	$04
	.byte	$06
	.byte	$04
	.byte	$0C
	.byte	$D8
	.byte	$DB
	.byte	$EE
	.byte	$0E
	.byte	$0C
	.byte	$E9
	.byte	$EB
	.byte	$12
	.byte	$01
	.byte	$12
	.byte	$00
	.byte	$3C
	.byte	$12
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$BC
	.byte	$B0
	.byte	$BD
	.byte	$00
	.byte	$01
	.byte	$BB
	.byte	$BD
	.byte	$10
	.byte	$03
	.byte	$3C
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$12
	.byte	$11
	.byte	$B9
	.byte	$B0
	.byte	$B9
	.byte	$02
	.byte	$03
	.byte	$B8
	.byte	$BC
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$A9
	.byte	$B6
	.byte	$A9
	.byte	$00
	.byte	$01
	.byte	$B0
	.byte	$A7
	.byte	$00
	.byte	$3C
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$3C
	.byte	$10
	.byte	$03
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$02
	.byte	$03
	.byte	$A6
	.byte	$A6
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$38
	.byte	$38
	.byte	$51
	.byte	$51
	.byte	$38
	.byte	$38
	.byte	$37
_level0_6:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$E3
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$0A
	.byte	$06
	.byte	$0C
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D3
	.byte	$E0
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$E4
	.byte	$E2
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$C5
	.byte	$D0
	.byte	$D4
	.byte	$D9
	.byte	$EC
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$08
	.byte	$06
	.byte	$0D
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D2
	.byte	$D4
	.byte	$D6
	.byte	$D4
	.byte	$D5
	.byte	$DB
	.byte	$3B
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$E4
	.byte	$E5
	.byte	$E8
	.byte	$D6
	.byte	$D6
	.byte	$D4
	.byte	$D6
	.byte	$D4
	.byte	$D8
	.byte	$12
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$3C
	.byte	$E9
	.byte	$EB
	.byte	$EB
	.byte	$E7
	.byte	$DF
	.byte	$D6
	.byte	$D4
	.byte	$D6
	.byte	$D9
	.byte	$01
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$01
	.byte	$0E
	.byte	$0A
	.byte	$0C
	.byte	$B9
	.byte	$BA
	.byte	$BA
	.byte	$B0
	.byte	$BC
	.byte	$B0
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$B8
	.byte	$B0
	.byte	$B8
	.byte	$AB
	.byte	$B9
	.byte	$BA
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$3C
	.byte	$3C
	.byte	$03
	.byte	$00
	.byte	$3C
	.byte	$14
	.byte	$10
	.byte	$A9
	.byte	$AB
	.byte	$A7
	.byte	$B8
	.byte	$B0
	.byte	$AA
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$10
	.byte	$3C
	.byte	$12
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$A6
	.byte	$0E
	.byte	$09
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$38
	.byte	$38
	.byte	$37
	.byte	$37
	.byte	$38
	.byte	$37
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$10
	.byte	$00
_level0_7:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$44
	.byte	$19
	.byte	$18
	.byte	$10
	.byte	$3D
	.byte	$00
	.byte	$3C
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$44
	.byte	$19
	.byte	$3D
	.byte	$02
	.byte	$10
	.byte	$14
	.byte	$01
	.byte	$00
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9F
	.byte	$3D
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$02
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$02
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$00
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$E1
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3E
	.byte	$0E
	.byte	$05
	.byte	$0A
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$E9
	.byte	$E9
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$3C
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$12
	.byte	$02
	.byte	$3C
	.byte	$00
	.byte	$ED
	.byte	$EF
	.byte	$EB
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$10
	.byte	$02
	.byte	$DB
	.byte	$DB
	.byte	$E9
	.byte	$EB
	.byte	$E3
	.byte	$AC
	.byte	$3D
	.byte	$02
	.byte	$03
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$DA
	.byte	$DB
	.byte	$EF
	.byte	$EB
	.byte	$0F
	.byte	$07
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$BC
	.byte	$B0
	.byte	$BD
	.byte	$BC
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$3C
	.byte	$1A
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$25
	.byte	$B9
	.byte	$0F
	.byte	$08
	.byte	$0C
	.byte	$00
	.byte	$12
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$3C
	.byte	$01
	.byte	$02
	.byte	$25
	.byte	$20
	.byte	$A9
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$3C
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$02
	.byte	$25
	.byte	$20
	.byte	$20
	.byte	$0D
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$11
	.byte	$3C
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$02
	.byte	$25
	.byte	$21
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$25
	.byte	$21
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
_level1_0:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$3C
	.byte	$10
	.byte	$01
	.byte	$10
	.byte	$12
	.byte	$15
	.byte	$16
	.byte	$12
	.byte	$02
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$44
	.byte	$18
	.byte	$17
	.byte	$51
	.byte	$CE
	.byte	$CA
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$1B
	.byte	$3C
	.byte	$11
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$50
	.byte	$9E
	.byte	$9B
	.byte	$CF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CB
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$43
	.byte	$CF
	.byte	$CF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$02
	.byte	$03
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$CF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$3C
	.byte	$01
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$58
	.byte	$8E
	.byte	$8F
	.byte	$CE
	.byte	$C9
	.byte	$C9
	.byte	$0E
	.byte	$0C
	.byte	$10
	.byte	$03
	.byte	$50
	.byte	$50
	.byte	$58
	.byte	$58
	.byte	$8E
	.byte	$8F
	.byte	$CA
	.byte	$CE
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CA
	.byte	$3A
	.byte	$3B
	.byte	$1D
	.byte	$8F
	.byte	$51
	.byte	$51
	.byte	$CE
	.byte	$0E
	.byte	$04
	.byte	$04
	.byte	$07
	.byte	$0C
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$13
	.byte	$01
	.byte	$1C
	.byte	$51
	.byte	$CA
	.byte	$CC
	.byte	$C9
	.byte	$CB
	.byte	$CA
	.byte	$CA
	.byte	$CA
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$10
	.byte	$03
	.byte	$01
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$3C
	.byte	$01
	.byte	$01
	.byte	$0E
	.byte	$0D
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$AE
	.byte	$51
	.byte	$10
	.byte	$03
	.byte	$1A
	.byte	$12
	.byte	$11
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$51
	.byte	$51
	.byte	$00
	.byte	$01
	.byte	$44
	.byte	$18
	.byte	$1A
	.byte	$0F
	.byte	$05
	.byte	$07
	.byte	$08
	.byte	$05
	.byte	$07
	.byte	$07
	.byte	$3E
	.byte	$05
	.byte	$08
	.byte	$0D
	.byte	$02
	.byte	$03
	.byte	$50
	.byte	$9B
	.byte	$84
	.byte	$1A
	.byte	$02
	.byte	$3C
	.byte	$11
	.byte	$02
	.byte	$10
	.byte	$11
	.byte	$3D
	.byte	$03
	.byte	$3C
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$9B
	.byte	$44
	.byte	$1B
	.byte	$11
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$3D
	.byte	$10
	.byte	$11
	.byte	$3C
	.byte	$02
	.byte	$03
_level2_0:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$0E
	.byte	$0B
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$0D
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$58
	.byte	$59
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$10
	.byte	$3C
	.byte	$10
	.byte	$AD
	.byte	$8E
	.byte	$8F
	.byte	$50
	.byte	$50
	.byte	$0E
	.byte	$3E
	.byte	$04
	.byte	$04
	.byte	$0C
	.byte	$10
	.byte	$3C
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$0E
	.byte	$09
	.byte	$0C
	.byte	$50
	.byte	$50
	.byte	$43
	.byte	$3D
	.byte	$3B
	.byte	$01
	.byte	$3C
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$01
	.byte	$3C
	.byte	$10
	.byte	$03
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3D
	.byte	$3C
	.byte	$03
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$10
	.byte	$3C
	.byte	$3C
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$01
_level2_1:
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$58
	.byte	$8E
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$58
	.byte	$58
	.byte	$8E
	.byte	$0E
	.byte	$0D
	.byte	$E2
	.byte	$58
	.byte	$0F
	.byte	$0C
	.byte	$51
	.byte	$CE
	.byte	$CD
	.byte	$0E
	.byte	$0B
	.byte	$05
	.byte	$0D
	.byte	$CE
	.byte	$CD
	.byte	$51
	.byte	$11
	.byte	$10
	.byte	$CD
	.byte	$51
	.byte	$3C
	.byte	$12
	.byte	$CB
	.byte	$C9
	.byte	$C9
	.byte	$3A
	.byte	$3B
	.byte	$14
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$CC
	.byte	$CB
	.byte	$CC
	.byte	$C9
	.byte	$CC
	.byte	$CB
	.byte	$CC
	.byte	$C9
	.byte	$AF
	.byte	$C9
	.byte	$CB
	.byte	$CA
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
_level2_2:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$95
	.byte	$99
	.byte	$7B
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$7A
	.byte	$8D
	.byte	$7D
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$0E
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$8E
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$11
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$8E
	.byte	$0E
	.byte	$0C
	.byte	$10
	.byte	$3C
	.byte	$02
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$51
	.byte	$CE
	.byte	$CD
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$10
	.byte	$C8
	.byte	$E3
	.byte	$8E
	.byte	$0E
	.byte	$05
	.byte	$08
	.byte	$0C
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CD
	.byte	$03
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$3C
	.byte	$CB
	.byte	$CD
	.byte	$C8
	.byte	$11
	.byte	$02
	.byte	$10
	.byte	$12
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$01
	.byte	$10
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CA
	.byte	$CA
	.byte	$CA
	.byte	$CF
	.byte	$0E
	.byte	$05
	.byte	$0C
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$CF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3F
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$3F
_level2_3:
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$E1
	.byte	$E2
	.byte	$58
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$CD
	.byte	$C8
	.byte	$C8
	.byte	$E4
	.byte	$E2
	.byte	$AC
	.byte	$AD
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$AC
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$C9
	.byte	$CB
	.byte	$CD
	.byte	$0F
	.byte	$06
	.byte	$07
	.byte	$06
	.byte	$08
	.byte	$07
	.byte	$05
	.byte	$08
	.byte	$3E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3F
	.byte	$3F
	.byte	$3F
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$03
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$10
	.byte	$3D
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
_level3_0:
	.byte	$10
	.byte	$3C
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3C
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$3D
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$3D
	.byte	$C8
	.byte	$E4
	.byte	$E2
	.byte	$50
	.byte	$00
	.byte	$12
	.byte	$00
	.byte	$12
	.byte	$3C
	.byte	$12
	.byte	$11
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$3D
	.byte	$CB
	.byte	$C8
	.byte	$0E
	.byte	$0D
	.byte	$00
	.byte	$01
	.byte	$13
	.byte	$16
	.byte	$15
	.byte	$CA
	.byte	$CA
	.byte	$51
	.byte	$1B
	.byte	$02
	.byte	$14
	.byte	$3D
	.byte	$C9
	.byte	$CC
	.byte	$10
	.byte	$3C
	.byte	$02
	.byte	$03
	.byte	$15
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CD
	.byte	$CE
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3A
	.byte	$3B
	.byte	$00
	.byte	$11
	.byte	$CC
	.byte	$C9
	.byte	$BF
	.byte	$C3
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$10
	.byte	$12
	.byte	$02
	.byte	$10
	.byte	$C9
	.byte	$C9
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$C4
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$C9
	.byte	$0E
	.byte	$0C
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$51
	.byte	$51
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$10
	.byte	$3C
	.byte	$01
	.byte	$C9
	.byte	$3E
	.byte	$0E
	.byte	$06
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0D
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$03
	.byte	$C9
	.byte	$3D
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$3C
	.byte	$01
	.byte	$3C
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$00
	.byte	$03
	.byte	$01
	.byte	$14
	.byte	$C9
	.byte	$3D
	.byte	$CD
	.byte	$CA
	.byte	$19
	.byte	$16
	.byte	$17
	.byte	$11
	.byte	$10
	.byte	$12
	.byte	$11
	.byte	$01
	.byte	$17
	.byte	$19
	.byte	$03
	.byte	$15
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$C9
	.byte	$CD
	.byte	$51
	.byte	$1A
	.byte	$14
	.byte	$51
	.byte	$51
	.byte	$CC
	.byte	$CB
	.byte	$10
	.byte	$CC
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CD
	.byte	$CE
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3C
	.byte	$C9
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
_level4_0:
	.byte	$3C
	.byte	$C9
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$51
	.byte	$19
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$12
	.byte	$10
	.byte	$C9
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CD
	.byte	$19
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$10
	.byte	$01
	.byte	$AF
	.byte	$AE
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CD
	.byte	$16
	.byte	$10
	.byte	$10
	.byte	$3A
	.byte	$02
	.byte	$0F
	.byte	$0D
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CD
	.byte	$19
	.byte	$18
	.byte	$10
	.byte	$12
	.byte	$10
	.byte	$3C
	.byte	$3D
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$51
	.byte	$1A
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$3D
	.byte	$51
	.byte	$AE
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CD
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$0E
	.byte	$0B
	.byte	$06
	.byte	$05
	.byte	$0D
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$02
	.byte	$02
	.byte	$10
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$51
	.byte	$AE
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$C9
	.byte	$BF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$AF
	.byte	$C9
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$C9
	.byte	$26
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$00
	.byte	$12
	.byte	$01
	.byte	$11
	.byte	$C9
	.byte	$20
	.byte	$26
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$10
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$03
	.byte	$02
	.byte	$10
	.byte	$03
	.byte	$3C
	.byte	$C9
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$01
	.byte	$10
	.byte	$3C
	.byte	$01
	.byte	$CF
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$11
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$0E
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$21
	.byte	$26
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
_level4_1:
	.byte	$10
	.byte	$11
	.byte	$1E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3C
	.byte	$00
	.byte	$01
	.byte	$1F
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$3B
	.byte	$02
	.byte	$03
	.byte	$1E
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$1F
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$1E
	.byte	$1F
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$1E
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$C5
	.byte	$D1
	.byte	$D3
	.byte	$E1
	.byte	$CD
	.byte	$51
	.byte	$1A
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$D0
	.byte	$D5
	.byte	$D4
	.byte	$D7
	.byte	$ED
	.byte	$C9
	.byte	$CB
	.byte	$51
	.byte	$1A
	.byte	$11
	.byte	$14
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D2
	.byte	$D5
	.byte	$D6
	.byte	$D4
	.byte	$D9
	.byte	$DB
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CD
	.byte	$CA
	.byte	$CD
	.byte	$C8
	.byte	$E4
	.byte	$E5
	.byte	$D4
	.byte	$D4
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D4
	.byte	$DA
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CD
	.byte	$CF
	.byte	$C8
	.byte	$C8
	.byte	$E7
	.byte	$DF
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D6
	.byte	$D8
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CA
	.byte	$CD
	.byte	$AE
	.byte	$C8
	.byte	$EB
	.byte	$A4
	.byte	$B3
	.byte	$BC
	.byte	$B0
	.byte	$BC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$51
	.byte	$CD
	.byte	$C8
	.byte	$A4
	.byte	$A1
	.byte	$BE
	.byte	$7E
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$51
	.byte	$51
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CD
	.byte	$CD
	.byte	$A3
	.byte	$A2
	.byte	$A8
	.byte	$5C
	.byte	$05
	.byte	$04
	.byte	$0A
	.byte	$0B
	.byte	$07
	.byte	$05
	.byte	$04
	.byte	$05
	.byte	$07
	.byte	$09
	.byte	$05
	.byte	$0D
	.byte	$35
	.byte	$33
	.byte	$33
	.byte	$34
	.byte	$02
	.byte	$3C
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$12
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
_level4_2:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$86
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$86
	.byte	$93
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$91
	.byte	$94
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$91
	.byte	$89
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$91
	.byte	$92
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$2C
	.byte	$93
	.byte	$EB
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$49
	.byte	$29
	.byte	$EF
	.byte	$EB
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D3
	.byte	$E3
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$49
	.byte	$DB
	.byte	$ED
	.byte	$EB
	.byte	$E4
	.byte	$E5
	.byte	$D5
	.byte	$D9
	.byte	$EF
	.byte	$E3
	.byte	$D1
	.byte	$D3
	.byte	$E4
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$66
	.byte	$DB
	.byte	$DB
	.byte	$EF
	.byte	$E9
	.byte	$EB
	.byte	$E7
	.byte	$DF
	.byte	$D8
	.byte	$EC
	.byte	$E7
	.byte	$DF
	.byte	$EF
	.byte	$EE
	.byte	$E3
	.byte	$50
	.byte	$58
	.byte	$BD
	.byte	$B8
	.byte	$B7
	.byte	$BD
	.byte	$BC
	.byte	$BC
	.byte	$7E
	.byte	$78
	.byte	$5F
	.byte	$BD
	.byte	$B0
	.byte	$BC
	.byte	$BC
	.byte	$A8
	.byte	$4D
	.byte	$63
	.byte	$7F
	.byte	$5F
	.byte	$B7
	.byte	$B0
	.byte	$B7
	.byte	$B0
	.byte	$5C
	.byte	$8C
	.byte	$5E
	.byte	$B7
	.byte	$B6
	.byte	$B6
	.byte	$B0
	.byte	$AB
	.byte	$4A
	.byte	$B4
	.byte	$8C
	.byte	$5E
	.byte	$AB
	.byte	$A8
	.byte	$B0
	.byte	$B8
	.byte	$A8
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$A8
	.byte	$B0
	.byte	$AA
	.byte	$B7
	.byte	$B5
	.byte	$4A
	.byte	$34
	.byte	$33
	.byte	$33
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$34
	.byte	$33
	.byte	$34
	.byte	$33
	.byte	$33
	.byte	$34
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$37
_level4_3:
	.byte	$88
	.byte	$89
	.byte	$94
	.byte	$2D
	.byte	$89
	.byte	$7B
	.byte	$50
	.byte	$50
	.byte	$1D
	.byte	$1C
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$3A
	.byte	$89
	.byte	$2E
	.byte	$88
	.byte	$93
	.byte	$94
	.byte	$87
	.byte	$50
	.byte	$1D
	.byte	$1C
	.byte	$12
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$2D
	.byte	$93
	.byte	$89
	.byte	$2E
	.byte	$2D
	.byte	$89
	.byte	$50
	.byte	$1C
	.byte	$02
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$93
	.byte	$88
	.byte	$2D
	.byte	$92
	.byte	$2E
	.byte	$92
	.byte	$1D
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$89
	.byte	$2E
	.byte	$93
	.byte	$89
	.byte	$89
	.byte	$92
	.byte	$1C
	.byte	$10
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$3C
	.byte	$89
	.byte	$2A
	.byte	$2B
	.byte	$2C
	.byte	$90
	.byte	$2A
	.byte	$02
	.byte	$00
	.byte	$01
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$03
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$2F
	.byte	$46
	.byte	$6A
	.byte	$46
	.byte	$90
	.byte	$48
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$12
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$51
	.byte	$62
	.byte	$47
	.byte	$68
	.byte	$73
	.byte	$48
	.byte	$50
	.byte	$1B
	.byte	$3A
	.byte	$3B
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$13
	.byte	$16
	.byte	$CE
	.byte	$C9
	.byte	$61
	.byte	$67
	.byte	$68
	.byte	$70
	.byte	$77
	.byte	$50
	.byte	$9B
	.byte	$18
	.byte	$10
	.byte	$16
	.byte	$10
	.byte	$14
	.byte	$51
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$61
	.byte	$58
	.byte	$68
	.byte	$70
	.byte	$58
	.byte	$58
	.byte	$58
	.byte	$C8
	.byte	$CD
	.byte	$CD
	.byte	$CD
	.byte	$CF
	.byte	$CC
	.byte	$C9
	.byte	$BF
	.byte	$C3
	.byte	$64
	.byte	$65
	.byte	$68
	.byte	$55
	.byte	$75
	.byte	$51
	.byte	$53
	.byte	$CD
	.byte	$CD
	.byte	$CF
	.byte	$CA
	.byte	$CE
	.byte	$CE
	.byte	$C9
	.byte	$C1
	.byte	$C0
	.byte	$55
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$57
	.byte	$51
	.byte	$C8
	.byte	$AE
	.byte	$CF
	.byte	$CD
	.byte	$CD
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$C4
	.byte	$B4
	.byte	$55
	.byte	$51
	.byte	$53
	.byte	$57
	.byte	$57
	.byte	$53
	.byte	$C8
	.byte	$EA
	.byte	$C8
	.byte	$CB
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$33
	.byte	$36
	.byte	$0E
	.byte	$04
	.byte	$07
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$04
	.byte	$09
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$37
	.byte	$37
	.byte	$37
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$12
	.byte	$10
	.byte	$12
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$11
_level4_4:
	.byte	$3B
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$3D
	.byte	$00
	.byte	$3A
	.byte	$3B
	.byte	$11
	.byte	$02
	.byte	$10
	.byte	$13
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$18
	.byte	$02
	.byte	$03
	.byte	$10
	.byte	$02
	.byte	$3D
	.byte	$02
	.byte	$3C
	.byte	$03
	.byte	$3C
	.byte	$01
	.byte	$14
	.byte	$51
	.byte	$19
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$16
	.byte	$1A
	.byte	$3D
	.byte	$14
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$51
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$C3
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$CD
	.byte	$3D
	.byte	$CD
	.byte	$1B
	.byte	$10
	.byte	$10
	.byte	$51
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$CD
	.byte	$01
	.byte	$18
	.byte	$CE
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$C4
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$03
	.byte	$CC
	.byte	$C9
	.byte	$BF
	.byte	$51
	.byte	$CF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$12
	.byte	$01
	.byte	$C9
	.byte	$C9
	.byte	$0E
	.byte	$07
	.byte	$08
	.byte	$06
	.byte	$0D
	.byte	$C9
	.byte	$C9
	.byte	$3E
	.byte	$0E
	.byte	$09
	.byte	$04
	.byte	$0D
	.byte	$10
	.byte	$01
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CA
	.byte	$CA
	.byte	$CA
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$3D
	.byte	$12
	.byte	$1B
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3D
	.byte	$CB
	.byte	$51
	.byte	$1A
	.byte	$01
	.byte	$00
	.byte	$25
	.byte	$C2
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$CB
	.byte	$51
	.byte	$1A
	.byte	$25
	.byte	$20
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$12
	.byte	$23
	.byte	$20
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$3C
	.byte	$25
	.byte	$20
	.byte	$20
	.byte	$09
	.byte	$05
	.byte	$09
	.byte	$07
	.byte	$04
	.byte	$04
	.byte	$06
	.byte	$08
	.byte	$04
	.byte	$07
	.byte	$07
	.byte	$0D
	.byte	$25
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$10
	.byte	$03
	.byte	$12
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$03
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$3C
	.byte	$25
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
_level5_0:
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$3D
	.byte	$10
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$19
	.byte	$10
	.byte	$01
	.byte	$10
	.byte	$12
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$3D
	.byte	$19
	.byte	$16
	.byte	$15
	.byte	$19
	.byte	$18
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$16
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$15
	.byte	$CE
	.byte	$3D
	.byte	$CC
	.byte	$CB
	.byte	$CC
	.byte	$CB
	.byte	$51
	.byte	$CC
	.byte	$CB
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$01
	.byte	$3C
	.byte	$00
	.byte	$CC
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$02
	.byte	$10
	.byte	$03
	.byte	$AF
	.byte	$C9
	.byte	$3D
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$10
	.byte	$11
	.byte	$11
	.byte	$51
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$0F
	.byte	$07
	.byte	$04
	.byte	$0A
	.byte	$0B
	.byte	$0C
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$AF
	.byte	$C9
	.byte	$10
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$51
	.byte	$CA
	.byte	$CA
	.byte	$CA
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$AE
	.byte	$51
	.byte	$51
	.byte	$AF
	.byte	$3C
	.byte	$02
	.byte	$3C
	.byte	$03
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$0E
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0C
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$10
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CA
	.byte	$CA
	.byte	$CD
	.byte	$51
	.byte	$11
	.byte	$10
	.byte	$3A
	.byte	$14
	.byte	$C9
	.byte	$C9
	.byte	$0E
	.byte	$07
	.byte	$0A
	.byte	$0C
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CD
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$15
	.byte	$CF
	.byte	$C9
	.byte	$CB
	.byte	$CA
	.byte	$CA
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CD
	.byte	$11
	.byte	$10
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$10
	.byte	$3C
	.byte	$0F
	.byte	$07
	.byte	$06
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$06
	.byte	$07
	.byte	$3E
	.byte	$04
	.byte	$0D
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$12
	.byte	$03
	.byte	$10
	.byte	$3D
	.byte	$10
	.byte	$3C
	.byte	$12
_level6_0:
	.byte	$02
	.byte	$00
	.byte	$3C
	.byte	$03
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$03
	.byte	$02
	.byte	$3C
	.byte	$10
	.byte	$02
	.byte	$03
	.byte	$3C
	.byte	$10
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$11
	.byte	$03
	.byte	$14
	.byte	$18
	.byte	$19
	.byte	$16
	.byte	$10
	.byte	$03
	.byte	$3C
	.byte	$13
	.byte	$02
	.byte	$1B
	.byte	$3B
	.byte	$11
	.byte	$14
	.byte	$16
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$1B
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$51
	.byte	$CE
	.byte	$CA
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$00
	.byte	$CE
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$51
	.byte	$3C
	.byte	$10
	.byte	$12
	.byte	$02
	.byte	$BF
	.byte	$C3
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$10
	.byte	$00
	.byte	$3C
	.byte	$10
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$01
	.byte	$02
	.byte	$10
	.byte	$10
	.byte	$CB
	.byte	$C4
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$02
	.byte	$3C
	.byte	$3A
	.byte	$3B
	.byte	$0E
	.byte	$08
	.byte	$0C
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$1A
	.byte	$10
	.byte	$10
	.byte	$3C
	.byte	$14
	.byte	$16
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$CA
	.byte	$3B
	.byte	$00
	.byte	$CE
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$12
	.byte	$02
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$11
	.byte	$00
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$AE
	.byte	$51
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$10
	.byte	$02
	.byte	$0E
	.byte	$3E
	.byte	$04
	.byte	$09
	.byte	$0A
	.byte	$07
	.byte	$04
	.byte	$05
	.byte	$04
	.byte	$07
	.byte	$04
	.byte	$08
	.byte	$05
	.byte	$04
	.byte	$3C
	.byte	$00
	.byte	$10
	.byte	$3D
	.byte	$3C
	.byte	$10
	.byte	$01
	.byte	$11
	.byte	$01
	.byte	$02
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$3A
	.byte	$02
	.byte	$10
_level6_1:
	.byte	$3C
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$12
	.byte	$3C
	.byte	$17
	.byte	$17
	.byte	$10
	.byte	$14
	.byte	$51
	.byte	$1B
	.byte	$10
	.byte	$3C
	.byte	$13
	.byte	$3A
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$51
	.byte	$CE
	.byte	$CA
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$1B
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$CE
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$51
	.byte	$51
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$3C
	.byte	$51
	.byte	$BF
	.byte	$C3
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$C3
	.byte	$AF
	.byte	$CD
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$CC
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$C9
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$C9
	.byte	$CB
	.byte	$C4
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$C4
	.byte	$CC
	.byte	$C9
	.byte	$10
	.byte	$3A
	.byte	$03
	.byte	$10
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$14
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$11
	.byte	$3C
	.byte	$CA
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$10
	.byte	$10
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$51
	.byte	$AF
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3C
	.byte	$11
	.byte	$C9
	.byte	$BF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3C
	.byte	$10
	.byte	$C9
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$10
	.byte	$11
	.byte	$07
	.byte	$09
	.byte	$04
	.byte	$04
	.byte	$0A
	.byte	$09
	.byte	$04
	.byte	$06
	.byte	$04
	.byte	$07
	.byte	$04
	.byte	$07
	.byte	$04
	.byte	$0C
	.byte	$3C
	.byte	$3A
	.byte	$3C
	.byte	$10
	.byte	$12
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$03
	.byte	$13
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$10
	.byte	$01
	.byte	$11
_level7_0:
	.byte	$3C
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$02
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$03
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$12
	.byte	$3C
	.byte	$17
	.byte	$17
	.byte	$10
	.byte	$14
	.byte	$51
	.byte	$1B
	.byte	$10
	.byte	$3C
	.byte	$13
	.byte	$3A
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$51
	.byte	$CE
	.byte	$CA
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$CA
	.byte	$51
	.byte	$51
	.byte	$1B
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$13
	.byte	$CE
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$51
	.byte	$51
	.byte	$11
	.byte	$10
	.byte	$10
	.byte	$3C
	.byte	$51
	.byte	$BF
	.byte	$C3
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$C3
	.byte	$AF
	.byte	$CD
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$11
	.byte	$CC
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$C9
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$C9
	.byte	$CB
	.byte	$C4
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$C4
	.byte	$CC
	.byte	$C9
	.byte	$10
	.byte	$3A
	.byte	$03
	.byte	$10
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$14
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$11
	.byte	$3C
	.byte	$10
	.byte	$CC
	.byte	$C9
	.byte	$BF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$BF
	.byte	$51
	.byte	$51
	.byte	$AF
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3C
	.byte	$11
	.byte	$3C
	.byte	$AE
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$3C
	.byte	$10
	.byte	$10
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$10
	.byte	$11
	.byte	$10
	.byte	$0F
	.byte	$04
	.byte	$04
	.byte	$0A
	.byte	$09
	.byte	$04
	.byte	$06
	.byte	$04
	.byte	$07
	.byte	$04
	.byte	$07
	.byte	$04
	.byte	$0C
	.byte	$3C
	.byte	$3A
	.byte	$3C
	.byte	$10
	.byte	$12
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$11
	.byte	$03
	.byte	$13
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$10
	.byte	$01
	.byte	$11
_stage1_levels_list:
	.addr	_level0_0
	.addr	_level0_1
	.addr	_level0_2
	.addr	_level0_3
	.addr	_level0_4
	.addr	_level0_5
	.addr	_level0_6
	.addr	_level0_7
	.addr	_level1_0
	.addr	_level2_0
	.addr	_level2_1
	.addr	_level2_2
	.addr	_level2_3
	.addr	_level3_0
	.addr	_level4_0
	.addr	_level4_1
	.addr	_level4_2
	.addr	_level4_3
	.addr	_level4_4
	.addr	_level5_0
	.addr	_level6_0
	.addr	_level6_1
	.addr	_level7_0
_level_max_rooms:
	.byte	$08
	.byte	$01
	.byte	$04
	.byte	$01
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$01
_level_offsets:
	.byte	$00
	.byte	$08
	.byte	$09
	.byte	$0D
	.byte	$0E
	.byte	$13
	.byte	$14
	.byte	$16
_level_0_enemies:
	.byte	$30
	.byte	$01
	.byte	$60
	.byte	$01
	.byte	$10
	.byte	$01
	.byte	$C0
	.byte	$01
	.byte	$20
	.byte	$03
	.byte	$A0
	.byte	$01
	.byte	$C0
	.byte	$01
	.byte	$A0
	.byte	$00
	.byte	$80
	.byte	$03
	.byte	$10
	.byte	$00
	.byte	$80
	.byte	$05
	.byte	$50
	.byte	$00
	.byte	$40
	.byte	$06
	.byte	$20
	.byte	$00
	.byte	$40
	.byte	$07
	.byte	$90
	.byte	$00
	.byte	$FF
_level_1_enemies:
	.byte	$B0
	.byte	$00
	.byte	$70
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$FF
_level_2_enemies:
	.byte	$A0
	.byte	$01
	.byte	$60
	.byte	$00
	.byte	$60
	.byte	$02
	.byte	$80
	.byte	$00
	.byte	$FF
_level_3_enemies:
	.byte	$30
	.byte	$00
	.byte	$30
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$B0
	.byte	$00
	.byte	$FF
_level_4_enemies:
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$01
	.byte	$80
	.byte	$00
	.byte	$E0
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$E0
	.byte	$01
	.byte	$C0
	.byte	$01
	.byte	$B0
	.byte	$00
	.byte	$20
	.byte	$02
	.byte	$E6
	.byte	$01
	.byte	$60
	.byte	$03
	.byte	$E6
	.byte	$01
	.byte	$60
	.byte	$04
	.byte	$C0
	.byte	$00
	.byte	$FF
_level_5_enemies:
	.byte	$50
	.byte	$00
	.byte	$70
	.byte	$01
	.byte	$FF
_level_6_enemies:
	.byte	$BE
	.byte	$00
	.byte	$C8
	.byte	$00
	.byte	$FF
_level_7_enemies:
	.byte	$BE
	.byte	$00
	.byte	$28
	.byte	$02
	.byte	$FF
_Enemy_list:
	.addr	_level_0_enemies
	.addr	_level_1_enemies
	.addr	_level_2_enemies
	.addr	_level_3_enemies
	.addr	_level_4_enemies
	.addr	_level_5_enemies
	.addr	_level_6_enemies
	.addr	_level_7_enemies
_level_0_entities:
	.byte	$E6
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$E6
	.byte	$02
	.byte	$40
	.byte	$02
	.byte	$E6
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$E6
	.byte	$04
	.byte	$40
	.byte	$02
	.byte	$E6
	.byte	$05
	.byte	$60
	.byte	$02
	.byte	$E6
	.byte	$05
	.byte	$B0
	.byte	$02
	.byte	$E6
	.byte	$06
	.byte	$A0
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$A0
	.byte	$00
	.byte	$FF
_level_1_entities:
	.byte	$E6
	.byte	$00
	.byte	$A0
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$48
	.byte	$00
	.byte	$C0
	.byte	$08
	.byte	$FF
_level_2_entities:
	.byte	$E6
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$E6
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$E6
	.byte	$01
	.byte	$00
	.byte	$06
	.byte	$E6
	.byte	$01
	.byte	$40
	.byte	$06
	.byte	$E6
	.byte	$01
	.byte	$70
	.byte	$06
	.byte	$E6
	.byte	$01
	.byte	$B0
	.byte	$06
	.byte	$E6
	.byte	$01
	.byte	$F0
	.byte	$06
	.byte	$E6
	.byte	$02
	.byte	$90
	.byte	$06
	.byte	$E6
	.byte	$02
	.byte	$D0
	.byte	$06
	.byte	$E6
	.byte	$03
	.byte	$00
	.byte	$06
	.byte	$E6
	.byte	$03
	.byte	$B0
	.byte	$00
	.byte	$E6
	.byte	$03
	.byte	$C0
	.byte	$00
	.byte	$E6
	.byte	$03
	.byte	$DA
	.byte	$00
	.byte	$E6
	.byte	$03
	.byte	$EA
	.byte	$00
	.byte	$FF
_level_3_entities:
	.byte	$00
	.byte	$00
	.byte	$B0
	.byte	$03
	.byte	$E6
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$E6
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$FF
_level_4_entities:
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$00
	.byte	$04
	.byte	$C0
	.byte	$00
	.byte	$FF
_level_5_entities:
	.byte	$E6
	.byte	$00
	.byte	$C0
	.byte	$03
	.byte	$E6
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$FF
_level_6_entities:
	.byte	$E6
	.byte	$00
	.byte	$30
	.byte	$03
	.byte	$70
	.byte	$00
	.byte	$30
	.byte	$08
	.byte	$BE
	.byte	$01
	.byte	$C8
	.byte	$0B
	.byte	$FF
_entity_list:
	.addr	_level_0_entities
	.addr	_level_1_entities
	.addr	_level_2_entities
	.addr	_level_3_entities
	.addr	_level_4_entities
	.addr	_level_5_entities
	.addr	_level_6_entities
_titletiled_0:
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$DC
	.byte	$DE
	.byte	$95
	.byte	$91
	.byte	$97
	.byte	$50
	.byte	$DD
	.byte	$DC
	.byte	$DE
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$50
	.byte	$96
	.byte	$91
	.byte	$2D
	.byte	$89
	.byte	$97
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$50
	.byte	$91
	.byte	$89
	.byte	$94
	.byte	$89
	.byte	$94
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$50
	.byte	$2C
	.byte	$91
	.byte	$89
	.byte	$94
	.byte	$2A
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$50
	.byte	$49
	.byte	$2C
	.byte	$90
	.byte	$90
	.byte	$48
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$C6
	.byte	$50
	.byte	$50
	.byte	$49
	.byte	$6A
	.byte	$48
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D3
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$50
	.byte	$50
	.byte	$D1
	.byte	$D3
	.byte	$D1
	.byte	$D2
	.byte	$E4
	.byte	$68
	.byte	$58
	.byte	$59
	.byte	$D0
	.byte	$D4
	.byte	$D9
	.byte	$EC
	.byte	$EE
	.byte	$E9
	.byte	$E3
	.byte	$D0
	.byte	$D4
	.byte	$D9
	.byte	$BE
	.byte	$BE
	.byte	$BD
	.byte	$69
	.byte	$BD
	.byte	$BC
	.byte	$B0
	.byte	$BD
	.byte	$B0
	.byte	$BC
	.byte	$BD
	.byte	$BC
	.byte	$B0
	.byte	$BD
	.byte	$BE
	.byte	$BD
	.byte	$B0
	.byte	$B8
	.byte	$B0
	.byte	$68
	.byte	$B0
	.byte	$BE
	.byte	$BC
	.byte	$B0
	.byte	$BE
	.byte	$B6
	.byte	$7E
	.byte	$7F
	.byte	$5F
	.byte	$B9
	.byte	$B0
	.byte	$BC
	.byte	$BC
	.byte	$4D
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$4F
	.byte	$B0
	.byte	$A7
	.byte	$B0
	.byte	$B8
	.byte	$5C
	.byte	$5D
	.byte	$5E
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$B0
	.byte	$4A
	.byte	$4B
	.byte	$4B
	.byte	$4B
	.byte	$4C
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$AB
	.byte	$A7
	.byte	$B0
	.byte	$A8
	.byte	$A9
	.byte	$B0
	.byte	$A9
	.byte	$B6
	.byte	$B7
	.byte	$B0
	.byte	$B0
	.byte	$B8
	.byte	$B0
	.byte	$B6
	.byte	$B0
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$B7
	.byte	$B0
	.byte	$B9
	.byte	$A7
	.byte	$A8
	.byte	$AB
	.byte	$AA
	.byte	$B0
	.byte	$A7
	.byte	$A8
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$AA
	.byte	$B0
	.byte	$A9
	.byte	$B0
	.byte	$B9
	.byte	$B0
	.byte	$B0
	.byte	$B6
	.byte	$B7
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$B0
	.byte	$A9
	.byte	$B7
	.byte	$B0
	.byte	$B0
	.byte	$A9
	.byte	$AA
	.byte	$B0
	.byte	$B0
	.byte	$AB
_gameovertiled_0:
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$14
	.byte	$03
	.byte	$10
	.byte	$14
	.byte	$10
	.byte	$3C
	.byte	$10
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$01
	.byte	$14
	.byte	$51
	.byte	$1A
	.byte	$03
	.byte	$12
	.byte	$03
	.byte	$1A
	.byte	$00
	.byte	$10
	.byte	$3A
	.byte	$3B
	.byte	$02
	.byte	$03
	.byte	$14
	.byte	$51
	.byte	$17
	.byte	$CE
	.byte	$C9
	.byte	$CD
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CD
	.byte	$19
	.byte	$18
	.byte	$10
	.byte	$10
	.byte	$14
	.byte	$51
	.byte	$51
	.byte	$CC
	.byte	$CA
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CD
	.byte	$19
	.byte	$1B
	.byte	$51
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$51
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$C3
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$C3
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C1
	.byte	$C0
	.byte	$C2
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$C4
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$CB
	.byte	$C4
	.byte	$CC
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$BF
	.byte	$51
	.byte	$AF
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$AF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$BF
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$51
	.byte	$CF
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$C9
	.byte	$04
	.byte	$05
	.byte	$07
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$06
	.byte	$04
	.byte	$06
	.byte	$06
	.byte	$07
	.byte	$08
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$04
	.byte	$00
	.byte	$02
	.byte	$3A
	.byte	$3B
	.byte	$10
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$03
	.byte	$02
	.byte	$10
	.byte	$00
	.byte	$3C
	.byte	$01
	.byte	$3A
	.byte	$3B
_palette_gameover:
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$08
	.byte	$0F
	.byte	$0F
	.byte	$17
	.byte	$06
	.byte	$0F
	.byte	$0F
	.byte	$19
	.byte	$29
_victory:
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$06
	.byte	$EF
	.byte	$EF
	.byte	$ED
	.byte	$39
	.byte	$EF
	.byte	$C1
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$B0
	.byte	$01
	.byte	$01
	.byte	$B0
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$C0
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$C3
	.byte	$01
	.byte	$C0
	.byte	$C1
	.byte	$EF
	.byte	$38
	.byte	$00
	.byte	$39
	.byte	$36
	.byte	$36
	.byte	$37
	.byte	$36
	.byte	$EF
	.byte	$6D
	.byte	$C1
	.byte	$C1
	.byte	$B0
	.byte	$6D
	.byte	$EF
	.byte	$5D
	.byte	$36
	.byte	$39
	.byte	$EF
	.byte	$C0
	.byte	$01
	.byte	$C3
	.byte	$01
	.byte	$01
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$C1
	.byte	$C1
	.byte	$EF
	.byte	$5D
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$39
	.byte	$37
	.byte	$37
	.byte	$39
	.byte	$5D
	.byte	$5D
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$36
	.byte	$EF
	.byte	$01
	.byte	$C0
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$C1
	.byte	$9F
	.byte	$EE
	.byte	$38
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$39
	.byte	$EE
	.byte	$B0
	.byte	$B0
	.byte	$01
	.byte	$9F
	.byte	$5D
	.byte	$39
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$39
	.byte	$ED
	.byte	$C0
	.byte	$01
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$1B
	.byte	$39
	.byte	$EE
	.byte	$C0
	.byte	$00
	.byte	$02
	.byte	$1D
	.byte	$39
	.byte	$5D
	.byte	$00
	.byte	$02
	.byte	$2B
	.byte	$59
	.byte	$4F
	.byte	$55
	.byte	$00
	.byte	$57
	.byte	$49
	.byte	$4E
	.byte	$21
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$59
	.byte	$4F
	.byte	$55
	.byte	$52
	.byte	$00
	.byte	$53
	.byte	$4B
	.byte	$49
	.byte	$4C
	.byte	$4C
	.byte	$53
	.byte	$00
	.byte	$41
	.byte	$52
	.byte	$45
	.byte	$00
	.byte	$44
	.byte	$49
	.byte	$56
	.byte	$49
	.byte	$4E
	.byte	$45
	.byte	$00
	.byte	$02
	.byte	$6A
	.byte	$42
	.byte	$55
	.byte	$59
	.byte	$00
	.byte	$54
	.byte	$48
	.byte	$45
	.byte	$00
	.byte	$46
	.byte	$55
	.byte	$4C
	.byte	$4C
	.byte	$00
	.byte	$56
	.byte	$45
	.byte	$52
	.byte	$53
	.byte	$49
	.byte	$4F
	.byte	$4E
	.byte	$00
	.byte	$02
	.byte	$30
	.byte	$4E
	.byte	$45
	.byte	$58
	.byte	$54
	.byte	$00
	.byte	$59
	.byte	$45
	.byte	$41
	.byte	$52
	.byte	$00
	.byte	$02
	.byte	$55
	.byte	$50
	.byte	$52
	.byte	$45
	.byte	$53
	.byte	$45
	.byte	$4E
	.byte	$54
	.byte	$45
	.byte	$44
	.byte	$00
	.byte	$42
	.byte	$59
	.byte	$00
	.byte	$02
	.byte	$33
	.byte	$41
	.byte	$4C
	.byte	$41
	.byte	$4E
	.byte	$00
	.byte	$26
	.byte	$00
	.byte	$42
	.byte	$52
	.byte	$49
	.byte	$41
	.byte	$4E
	.byte	$00
	.byte	$02
	.byte	$07
	.byte	$5E
	.byte	$5F
	.byte	$6F
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$1A
	.byte	$6C
	.byte	$6D
	.byte	$B1
	.byte	$6D
	.byte	$6D
	.byte	$6F
	.byte	$00
	.byte	$02
	.byte	$17
	.byte	$6B
	.byte	$6D
	.byte	$6D
	.byte	$01
	.byte	$EF
	.byte	$01
	.byte	$EE
	.byte	$6D
	.byte	$6F
	.byte	$00
	.byte	$02
	.byte	$15
	.byte	$6C
	.byte	$6D
	.byte	$01
	.byte	$C1
	.byte	$C0
	.byte	$01
	.byte	$01
	.byte	$C1
	.byte	$01
	.byte	$6D
	.byte	$5F
	.byte	$00
	.byte	$02
	.byte	$09
	.byte	$81
	.byte	$80
	.byte	$82
	.byte	$00
	.byte	$02
	.byte	$06
	.byte	$6C
	.byte	$C3
	.byte	$EF
	.byte	$C3
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$C0
	.byte	$01
	.byte	$6D
	.byte	$6F
	.byte	$82
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$82
	.byte	$6C
	.byte	$6D
	.byte	$EF
	.byte	$6D
	.byte	$5F
	.byte	$00
	.byte	$02
	.byte	$03
	.byte	$81
	.byte	$6C
	.byte	$6D
	.byte	$6D
	.byte	$01
	.byte	$01
	.byte	$B2
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$C1
	.byte	$EE
	.byte	$EE
	.byte	$ED
	.byte	$EE
	.byte	$ED
	.byte	$5F
	.byte	$82
	.byte	$82
	.byte	$6B
	.byte	$ED
	.byte	$6D
	.byte	$C1
	.byte	$01
	.byte	$01
	.byte	$EF
	.byte	$6F
	.byte	$80
	.byte	$81
	.byte	$5E
	.byte	$ED
	.byte	$6D
	.byte	$01
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$09
	.byte	$6D
	.byte	$01
	.byte	$01
	.byte	$EF
	.byte	$02
	.byte	$02
	.byte	$6D
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$C1
	.byte	$EF
	.byte	$01
	.byte	$C1
	.byte	$01
	.byte	$EF
	.byte	$EF
	.byte	$01
	.byte	$02
	.byte	$0D
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$C1
	.byte	$01
	.byte	$02
	.byte	$07
	.byte	$AA
	.byte	$AA
	.byte	$0A
	.byte	$0A
	.byte	$AA
	.byte	$AA
	.byte	$8A
	.byte	$AA
	.byte	$2A
	.byte	$00
	.byte	$02
	.byte	$05
	.byte	$8A
	.byte	$00
	.byte	$F0
	.byte	$FE
	.byte	$FF
	.byte	$FF
	.byte	$F5
	.byte	$F1
	.byte	$10
	.byte	$00
	.byte	$C0
	.byte	$F0
	.byte	$02
	.byte	$04
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$FC
	.byte	$FF
	.byte	$FF
	.byte	$F0
	.byte	$00
	.byte	$00
	.byte	$A0
	.byte	$00
	.byte	$0F
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$80
	.byte	$A8
	.byte	$AA
	.byte	$A2
	.byte	$A0
	.byte	$A8
	.byte	$A2
	.byte	$A0
	.byte	$AA
	.byte	$AA
	.byte	$0A
	.byte	$02
	.byte	$06
	.byte	$0A
	.byte	$02
	.byte	$00
_palette_victory:
	.byte	$21
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$21
	.byte	$21
	.byte	$30
	.byte	$21
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$0F
	.byte	$0F
	.byte	$29
L3143:
	.byte	$42,$52,$49,$41,$4E,$20,$26,$20,$41,$4C,$41,$4E,$20,$47,$41,$4D
	.byte	$45,$53,$00
L327F:
	.byte	$50,$52,$45,$53,$53,$20,$53,$54,$41,$52,$54,$00
L3139:
	.byte	$43,$4F,$52,$47,$53,$20,$44,$45,$4D,$4F,$00
L3275:
	.byte	$47,$41,$4D,$45,$20,$4F,$56,$45,$52,$00

.segment	"BSS"

.segment	"ZEROPAGE"
_debug:
	.res	1,$00
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_short_jump_count:
	.res	1,$00
_map_loaded:
	.res	1,$00
_collision:
	.res	1,$00
_player_in_air:
	.res	1,$00
_player_is_running:
	.res	1,$00
_player_on_ladder:
	.res	1,$00
_player_on_ladder_pose:
	.res	1,$00
_player_in_hitstun:
	.res	1,$00
_player_running:
	.res	1,$00
_collision_L:
	.res	1,$00
_collision_R:
	.res	1,$00
_collision_U:
	.res	1,$00
_collision_D:
	.res	1,$00
_coordinates:
	.res	1,$00
_falling_down:
	.res	1,$00
_nametable_to_load:
	.res	1,$00
_temp1:
	.res	1,$00
_temp2:
	.res	1,$00
_temp3:
	.res	1,$00
_temp4:
	.res	1,$00
_multi_jump:
	.res	1,$00
_temp5:
	.res	2,$00
_temp6:
	.res	2,$00
_tempint:
	.res	2,$00
_tempint2:
	.res	2,$00
_temp_playerlocation:
	.res	2,$00
_level:
	.res	1,$00
_offset:
	.res	1,$00
_level_up:
	.res	1,$00
_level_down:
	.res	1,$00
_eject_L:
	.res	1,$00
_eject_R:
	.res	1,$00
_eject_D:
	.res	1,$00
_eject_U:
	.res	1,$00
_hit_direction:
	.res	1,$00
_sprite_frame_counter:
	.res	1,$00
_frame_counter:
	.res	1,$00
_frame_counter2:
	.res	1,$00
_address:
	.res	2,$00
_x:
	.res	1,$00
_y:
	.res	1,$00
_nt:
	.res	1,$00
_index:
	.res	1,$00
_index2:
	.res	1,$00
_map:
	.res	1,$00
_scroll_x:
	.res	2,$00
_scroll_y:
	.res	2,$00
_scroll_count:
	.res	1,$00
_pseudo_scroll_x:
	.res	2,$00
_song:
	.res	1,$00
_game_mode:
	.res	1,$00
_pointer:
	.res	2,$00
_l_scroll_frames:
	.res	1,$00
_r_scroll_frames:
	.res	1,$00
_old_x:
	.res	2,$00
_old_y:
	.res	2,$00
_bright:
	.res	1,$00
_bright_count:
	.res	1,$00
_temp:
	.res	1,$00
_temp_x:
	.res	1,$00
_temp_y:
	.res	1,$00
_temp_room:
	.res	1,$00
_player_shooting:
	.res	1,$00
_death:
	.res	1,$00
_death_flag:
	.res	1,$00
_invul_frames:
	.res	1,$00
_projectile_cooldown:
	.res	1,$00
_projectile_count:
	.res	1,$00
_projectile_index:
	.res	1,$00
.segment	"BSS"
_c_map:
	.res	240,$00
_c_map2:
	.res	240,$00
_Generic:
	.res	4,$00
_Generic2:
	.res	4,$00
_max_rooms:
	.res	1,$00
_max_scroll:
	.res	2,$00
_enemy_x:
	.res	16,$00
_enemy_y:
	.res	16,$00
_enemy_active:
	.res	16,$00
_enemy_mode:
	.res	16,$00
_enemy_health:
	.res	16,$00
_enemy_room:
	.res	16,$00
_enemy_actual_x:
	.res	16,$00
_enemy_type:
	.res	16,$00
_enemy_dir:
	.res	16,$00
_enemy_anim:
	.res	32,$00
_enemy_frames:
	.res	16,$00
_entity_x:
	.res	16,$00
_entity_y:
	.res	16,$00
_entity_active:
	.res	16,$00
_entity_room:
	.res	16,$00
_entity_actual_x:
	.res	16,$00
_entity_type:
	.res	16,$00
_entity_anim:
	.res	32,$00
_entity_frames:
	.res	16,$00

; ---------------------------------------------------------------
; void __near__ load_room (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_room: near

.segment	"CODE"

;
; offset = level_offsets[level];
;
	ldy     _level
	lda     _level_offsets,y
	sta     _offset
;
; offset += room_to_load;
;
	lda     _room_to_load
	clc
	adc     _offset
	sta     _offset
;
; set_data_pointer(stage1_levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L3F31
	inx
	clc
L3F31:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; set_mt_pointer(metatile);
;
	lda     #<(_metatile)
	ldx     #>(_metatile)
	jsr     _set_mt_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L3F2D:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L3F2C:	sta     _x
;
; address = get_ppu_addr(nametable_to_load, x, y);
;
	jsr     decsp2
	lda     _nametable_to_load
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L3F34
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L3F2C
;
; if (y == 0xe0)
;
L3F34:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L352D
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L3F2D
;
; ppu_off();
;
L352D:	jsr     _ppu_off
;
; set_data_pointer(stage1_levels_list[offset + 1]);
;
	ldx     #$00
	lda     _offset
	clc
	adc     #$01
	bcc     L3551
	inx
L3551:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_stage1_levels_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L3F2E:	sta     _y
;
; x = 0;
;
	lda     #$00
	sta     _x
;
; temp1 = (nametable_to_load + 1) % 2;
;
	lda     _nametable_to_load
	clc
	adc     #$01
	and     #$01
	sta     _temp1
;
; address = get_ppu_addr(temp1, x, y);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0);
;
	lda     _y
	and     #$F0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (y == 0xe0)
;
	ldx     #$00
	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L3F35
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L3F2E
;
; set_data_pointer(stage1_levels_list[offset - 1]);
;
L3F35:	lda     _offset
	sec
	sbc     #$01
	bcs     L3571
	dex
L3571:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_stage1_levels_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L3F2F:	sta     _y
;
; x = 240;
;
	lda     #$F0
	sta     _x
;
; temp1 = (nametable_to_load + 1) % 2;
;
	lda     _nametable_to_load
	clc
	adc     #$01
	and     #$01
	sta     _temp1
;
; address = get_ppu_addr(temp1, x, y);
;
	jsr     decsp2
	lda     _temp1
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = y + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     _y
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (y == 0xe0)
;
	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L3F36
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L3F2F
;
; map = room_to_load & 1; // even or odd?
;
L3F36:	lda     _room_to_load
	and     #$01
	sta     _map
;
; if (!map)
;
	lda     _map
	bne     L3590
;
; memcpy(c_map, stage1_levels_list[offset], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L3F32
	inx
	clc
L3F32:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; memcpy(c_map2, stage1_levels_list[offset - 1], 240);
;
	lda     #<(_c_map2)
	ldx     #>(_c_map2)
;
; else
;
	jmp     L3F4D
;
; memcpy(c_map2, stage1_levels_list[offset], 240);
;
L3590:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L3F33
	inx
	clc
L3F33:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; memcpy(c_map, stage1_levels_list[offset - 1], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
L3F4D:	jsr     pushax
	ldx     #$00
	lda     _offset
	sec
	sbc     #$01
	bcs     L35A7
	dex
L35A7:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_stage1_levels_list)
	sta     ptr1
	lda     tmp1
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jsr     _memcpy
;
; max_rooms = level_max_rooms[level] - 1;
;
	ldy     _level
	lda     _level_max_rooms,y
	sec
	sbc     #$01
	sta     _max_rooms
;
; max_scroll = (max_rooms * 0x100) - 1; // 11 rooms makes 0x0AFF as the max
;
	tax
	lda     #$00
	sec
	sbc     #$01
	bcs     L35B1
	dex
L35B1:	sta     _max_scroll
	stx     _max_scroll+1
;
; sprite_obj_init();
;
	jsr     _sprite_obj_init
;
; entity_obj_init();
;
	jmp     _entity_obj_init

.endproc

; ---------------------------------------------------------------
; void __near__ draw_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_sprites: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_player_sprites();
;
	jsr     _draw_player_sprites
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	lda     #$00
	sta     _temp1
L3F50:	lda     _temp1
	cmp     #$03
	bcs     L35B8
;
; if (projectiles_list[temp1] != TURN_OFF)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	beq     L3F51
;
; temp6 = projectiles_y[temp1]; //+ sine_wave[frame_counter % 10];
;
	ldy     _temp1
	lda     #$00
	sta     _temp6+1
	lda     _projectiles_y,y
	sta     _temp6
;
; oam_meta_spr(projectiles_x[temp1], temp6, animate_orb0_data);
;
	jsr     decsp2
	ldy     _temp1
	lda     _projectiles_x,y
	ldy     #$01
	sta     (sp),y
	lda     _temp6
	dey
	sta     (sp),y
	lda     #<(_animate_orb0_data)
	ldx     #>(_animate_orb0_data)
	jsr     _oam_meta_spr
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
L3F51:	inc     _temp1
	jmp     L3F50
;
; offset = get_frame_count() & 3;
;
L35B8:	jsr     _get_frame_count
	and     #$03
	sta     _offset
;
; offset = offset << 4; // * 16, the size of the shuffle array
;
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _offset
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
	lda     #$00
	sta     _index
L3F52:	lda     _index
	cmp     #$10
	jcs     L35D2
;
; index2 = shuffle_array[offset];
;
	ldy     _offset
	lda     _shuffle_array,y
	sta     _index2
;
; ++offset;
;
	inc     _offset
;
; temp_y = enemy_y[index2];
;
	ldy     _index2
	lda     _enemy_y,y
	sta     _temp_y
;
; if (enemy_health[index2] == 0)
;
	ldy     _index2
	lda     _enemy_health,y
;
; continue;
;
	jeq     L3F54
;
; if (temp_y == TURN_OFF)
;
	lda     _temp_y
	cmp     #$FF
;
; continue;
;
	jeq     L3F54
;
; if (!enemy_active[index2])
;
	ldy     _index2
	lda     _enemy_active,y
;
; continue;
;
	beq     L3F54
;
; temp_x = enemy_x[index2];
;
	ldy     _index2
	lda     _enemy_x,y
	sta     _temp_x
;
; if (temp_x == 0)
;
	lda     _temp_x
	bne     L3F53
;
; temp_x = 1; // problems with x = 0
;
	lda     #$01
	sta     _temp_x
;
; if (temp_x > 0xf0)
;
L3F53:	lda     _temp_x
	cmp     #$F1
;
; continue;
;
	bcs     L3F54
;
; if (temp_y < 0xf0)
;
	lda     _temp_y
	cmp     #$F0
	bcs     L3F54
;
; oam_meta_spr(temp_x, temp_y, enemy_anim[index2]);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	ldx     #$00
	lda     _index2
	asl     a
	bcc     L3F4F
	inx
	clc
L3F4F:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; if (enemy_type[index2] == ENEMY_BEAR)
;
	ldy     _index2
	lda     _enemy_type,y
	cmp     #$02
	bne     L3F54
;
; temp = enemy_health[index2];
;
	ldy     _index2
	lda     _enemy_health,y
	sta     _temp
;
; draw_health_meter();
;
	jsr     _draw_health_meter
;
; oam_meta_spr(0x28, 0x16, tempint2);
;
	jsr     decsp2
	lda     #$28
	ldy     #$01
	sta     (sp),y
	lda     #$16
	dey
	sta     (sp),y
	lda     _tempint2
	ldx     _tempint2+1
	jsr     _oam_meta_spr
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
L3F54:	inc     _index
	jmp     L3F52
;
; offset = get_frame_count() & 3;
;
L35D2:	jsr     _get_frame_count
	and     #$03
	sta     _offset
;
; offset = offset << 4; // * 16, the size of the shuffle array
;
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _offset
;
; for (index = 0; index < MAX_ENTITY; ++index)
;
	lda     #$00
	sta     _index
L3F55:	lda     _index
	cmp     #$10
	bcc     L3F58
;
; }
;
	rts
;
; index2 = shuffle_array[offset];
;
L3F58:	ldy     _offset
	lda     _shuffle_array,y
	sta     _index2
;
; ++offset;
;
	inc     _offset
;
; temp_y = entity_y[index2];
;
	ldy     _index2
	lda     _entity_y,y
	sta     _temp_y
;
; if (temp_y == TURN_OFF)
;
	cmp     #$FF
;
; continue;
;
	jeq     L3F57
;
; if (!entity_active[index2])
;
	ldy     _index2
	lda     _entity_active,y
;
; continue;
;
	jeq     L3F57
;
; temp_x = entity_x[index2];
;
	ldy     _index2
	lda     _entity_x,y
	sta     _temp_x
;
; if (temp_x == 0)
;
	lda     _temp_x
	bne     L3F56
;
; temp_x = 1; // problems with x = 0
;
	lda     #$01
	sta     _temp_x
;
; if (temp_x > 0xf0)
;
L3F56:	lda     _temp_x
	cmp     #$F1
;
; continue;
;
	jcs     L3F57
;
; if (temp_y < 0xf0)
;
	lda     _temp_y
	cmp     #$F0
	jcs     L3F57
;
; ++entity_frames[index2];
;
	lda     #<(_entity_frames)
	ldx     #>(_entity_frames)
	clc
	adc     _index2
	bcc     L3633
	inx
L3633:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (entity_type[index2] == ENTITY_STARBURST)
;
	ldy     _index2
	lda     _entity_type,y
	cmp     #$0B
	jne     L3634
;
; if (entity_frames[index2] < 20)
;
	ldy     _index2
	lda     _entity_frames,y
	cmp     #$14
	bcs     L3638
;
; oam_meta_spr(temp_x, temp_y, animate_starburst1_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_starburst1_data)
	ldx     #>(_animate_starburst1_data)
	jsr     _oam_meta_spr
;
; else if (entity_frames[index2] < 40)
;
	jmp     L3634
L3638:	ldy     _index2
	lda     _entity_frames,y
	cmp     #$28
	bcs     L3641
;
; oam_meta_spr(temp_x, temp_y, animate_starburst2_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_starburst2_data)
	ldx     #>(_animate_starburst2_data)
	jsr     _oam_meta_spr
;
; else if (entity_frames[index2] < 60)
;
	jmp     L3634
L3641:	ldy     _index2
	lda     _entity_frames,y
	cmp     #$3C
	bcs     L364A
;
; oam_meta_spr(temp_x, temp_y, animate_starburst3_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_starburst3_data)
	ldx     #>(_animate_starburst3_data)
	jsr     _oam_meta_spr
;
; else if (entity_frames[index2] < 80)
;
	jmp     L3634
L364A:	ldy     _index2
	lda     _entity_frames,y
	cmp     #$50
	bcs     L3653
;
; oam_meta_spr(temp_x, temp_y, animate_starburst2_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_starburst2_data)
	ldx     #>(_animate_starburst2_data)
	jsr     _oam_meta_spr
;
; else
;
	jmp     L3634
;
; oam_meta_spr(temp_x, temp_y, animate_starburst1_data);
;
L3653:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_starburst1_data)
	ldx     #>(_animate_starburst1_data)
	jsr     _oam_meta_spr
;
; entity_frames[index2] = 0;
;
	ldy     _index2
	lda     #$00
	sta     _entity_frames,y
;
; if (entity_type[index2] == ENTITY_WINE)
;
L3634:	ldy     _index2
	lda     _entity_type,y
	cmp     #$07
	bne     L3664
;
; oam_meta_spr(temp_x, temp_y, animate_wine_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_wine_data)
	ldx     #>(_animate_wine_data)
	jsr     _oam_meta_spr
;
; if (entity_type[index2] == ENTITY_BREAD)
;
L3664:	ldy     _index2
	lda     _entity_type,y
	cmp     #$08
	bne     L366C
;
; if (entity_frames[index2] < 20)
;
	ldy     _index2
	lda     _entity_frames,y
	cmp     #$14
	bcs     L3670
;
; oam_meta_spr(temp_x, temp_y, animate_bread_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_bread_data)
	ldx     #>(_animate_bread_data)
	jsr     _oam_meta_spr
;
; else if (entity_frames[index2] < 40)
;
	jmp     L366C
L3670:	ldy     _index2
	lda     _entity_frames,y
	cmp     #$28
	bcs     L3679
;
; oam_meta_spr(temp_x, temp_y, animate_bread2_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_bread2_data)
	ldx     #>(_animate_bread2_data)
	jsr     _oam_meta_spr
;
; else
;
	jmp     L366C
;
; oam_meta_spr(temp_x, temp_y, animate_bread_data);
;
L3679:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_bread_data)
	ldx     #>(_animate_bread_data)
	jsr     _oam_meta_spr
;
; entity_frames[index2] = 0;
;
	ldy     _index2
	lda     #$00
	sta     _entity_frames,y
;
; if (entity_type[index2] == ENTITY_FRUIT)
;
L366C:	ldy     _index2
	lda     _entity_type,y
	cmp     #$0A
	jne     L368A
;
; if (entity_frames[index2] < 20)
;
	ldy     _index2
	lda     _entity_frames,y
	cmp     #$14
	bcs     L368E
;
; oam_meta_spr(temp_x, temp_y, animate_starburst1_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_starburst1_data)
	ldx     #>(_animate_starburst1_data)
	jsr     _oam_meta_spr
;
; else if (entity_frames[index2] < 40)
;
	jmp     L368A
L368E:	ldy     _index2
	lda     _entity_frames,y
	cmp     #$28
	bcs     L3697
;
; oam_meta_spr(temp_x, temp_y, animate_starburst2_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_starburst2_data)
	ldx     #>(_animate_starburst2_data)
	jsr     _oam_meta_spr
;
; else if (entity_frames[index2] < 60)
;
	jmp     L368A
L3697:	ldy     _index2
	lda     _entity_frames,y
	cmp     #$3C
	bcs     L36A0
;
; oam_meta_spr(temp_x, temp_y, animate_starburst3_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_starburst3_data)
	ldx     #>(_animate_starburst3_data)
	jsr     _oam_meta_spr
;
; else if (entity_frames[index2] < 80)
;
	jmp     L368A
L36A0:	ldy     _index2
	lda     _entity_frames,y
	cmp     #$50
	bcs     L36A9
;
; oam_meta_spr(temp_x, temp_y, animate_starburst2_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_starburst2_data)
	ldx     #>(_animate_starburst2_data)
	jsr     _oam_meta_spr
;
; else
;
	jmp     L368A
;
; oam_meta_spr(temp_x, temp_y, animate_starburst1_data);
;
L36A9:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_starburst1_data)
	ldx     #>(_animate_starburst1_data)
	jsr     _oam_meta_spr
;
; entity_frames[index2] = 0;
;
	ldy     _index2
	lda     #$00
	sta     _entity_frames,y
;
; if (entity_type[index2] == ENTITY_BUN)
;
L368A:	ldy     _index2
	lda     _entity_type,y
	cmp     #$09
	bne     L3F57
;
; if (entity_frames[index2] < 20)
;
	ldy     _index2
	lda     _entity_frames,y
	cmp     #$14
	bcs     L36BE
;
; oam_meta_spr(temp_x, temp_y, animate_bun_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_bun_data)
	ldx     #>(_animate_bun_data)
	jsr     _oam_meta_spr
;
; else if (entity_frames[index2] < 40)
;
	jmp     L3F57
L36BE:	ldy     _index2
	lda     _entity_frames,y
	cmp     #$28
	bcs     L36C7
;
; oam_meta_spr(temp_x, temp_y, animate_bun2_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_bun2_data)
	ldx     #>(_animate_bun2_data)
	jsr     _oam_meta_spr
;
; else
;
	jmp     L3F57
;
; oam_meta_spr(temp_x, temp_y, animate_bun_data);
;
L36C7:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_bun_data)
	ldx     #>(_animate_bun_data)
	jsr     _oam_meta_spr
;
; entity_frames[index2] = 0;
;
	ldy     _index2
	lda     #$00
	sta     _entity_frames,y
;
; for (index = 0; index < MAX_ENTITY; ++index)
;
L3F57:	inc     _index
	jmp     L3F55

.endproc

; ---------------------------------------------------------------
; void __near__ movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_movement: near

.segment	"CODE"

;
; if (death_flag > 0)
;
	lda     _death_flag
	beq     L3F64
;
; --death_flag;
;
	dec     _death_flag
;
; if (invul_frames > 0) 
;
L3F64:	lda     _invul_frames
	beq     L36DC
;
; --invul_frames;
;
	dec     _invul_frames
;
; if (player_in_hitstun)
;
L36DC:	lda     _player_in_hitstun
	beq     L3F65
;
; --player_in_hitstun;
;
	dec     _player_in_hitstun
;
; if (player_in_hitstun > 0)
;
L3F65:	lda     _player_in_hitstun
	beq     L36F2
;
; if (hit_direction == RIGHT)
;
	lda     _hit_direction
	cmp     #$01
	bne     L36E4
;
; BoxGuy1.vel_x += HITSTUN_DECEL;
;
	lda     #$2D
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L36E8
	inc     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x >= MAX_SPEED)
;
L36E8:	lda     _BoxGuy1+4
	cmp     #$60
	lda     _BoxGuy1+4+1
	sbc     #$01
	bvs     L36EB
	eor     #$80
L36EB:	bpl     L36F2
;
; BoxGuy1.vel_x = MAX_SPEED;
;
	ldx     #$01
	lda     #$60
;
; else
;
	jmp     L3F97
;
; BoxGuy1.vel_x -= HITSTUN_DECEL;
;
L36E4:	lda     _BoxGuy1+4
	sec
	sbc     #$2D
	sta     _BoxGuy1+4
	bcs     L36F1
	dec     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x < -MAX_SPEED)
;
L36F1:	lda     _BoxGuy1+4
	cmp     #$A0
	lda     _BoxGuy1+4+1
	sbc     #$FE
	bvc     L36F4
	eor     #$80
L36F4:	bpl     L36F2
;
; BoxGuy1.vel_x = -MAX_SPEED;
;
	ldx     #$FE
	lda     #$A0
L3F97:	sta     _BoxGuy1+4
	stx     _BoxGuy1+4+1
;
; old_x = BoxGuy1.x;
;
L36F2:	lda     _BoxGuy1+1
	sta     _old_x+1
	lda     _BoxGuy1
	sta     _old_x
;
; if (pad1 & PAD_LEFT && !player_in_hitstun)
;
	lda     _pad1
	and     #$02
	beq     L3F69
	lda     _player_in_hitstun
	bne     L3F69
;
; direction = LEFT;
;
	sta     _direction
;
; player_is_running = 1;
;
	lda     #$01
	sta     _player_is_running
;
; if (!player_on_ladder)
;
	lda     _player_on_ladder
	jne     L3747
;
; if (BoxGuy1.vel_x >= DECEL)
;
	lda     _BoxGuy1+4
	cmp     #$32
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L3705
	eor     #$80
L3705:	bpl     L3703
;
; BoxGuy1.vel_x -= DECEL;
;
	lda     _BoxGuy1+4
	sec
	sbc     #$32
	sta     _BoxGuy1+4
	jcs     L3747
	dec     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x > 0)
;
	jmp     L3747
L3703:	lda     _BoxGuy1+4
	cmp     #$01
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L370C
	eor     #$80
L370C:	bpl     L370A
;
; BoxGuy1.vel_x = 0;
;
	ldx     #$00
	txa
;
; else
;
	jmp     L3F70
;
; BoxGuy1.vel_x -= ACCEL;
;
L370A:	lda     _BoxGuy1+4
	sec
	sbc     #$1E
	sta     _BoxGuy1+4
	bcs     L3712
	dec     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x < -MAX_SPEED)
;
L3712:	lda     _BoxGuy1+4
	cmp     #$A0
	lda     _BoxGuy1+4+1
	sbc     #$FE
	bvc     L3715
	eor     #$80
L3715:	jpl     L3747
;
; BoxGuy1.vel_x = -MAX_SPEED;
;
	ldx     #$FE
	lda     #$A0
;
; else if (pad1 & PAD_RIGHT && !player_in_hitstun)
;
	jmp     L3F70
L3F69:	lda     _pad1
	and     #$01
	beq     L3F6E
	lda     _player_in_hitstun
	beq     L3F6C
	lda     #$00
	jmp     L3F6E
;
; direction = RIGHT;
;
L3F6C:	lda     #$01
	sta     _direction
;
; player_is_running = 1;
;
	sta     _player_is_running
;
; if (!player_on_ladder)
;
	lda     _player_on_ladder
	jne     L3747
;
; if (BoxGuy1.vel_x <= DECEL)
;
	lda     _BoxGuy1+4
	cmp     #$33
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvc     L3725
	eor     #$80
L3725:	bpl     L3723
;
; BoxGuy1.vel_x += DECEL;
;
	lda     #$32
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	jcc     L3747
	inc     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x < 0)
;
	jmp     L3747
L3723:	ldx     _BoxGuy1+4+1
	cpx     #$80
	bcc     L372A
;
; BoxGuy1.vel_x = 0;
;
	ldx     #$00
	txa
;
; else
;
	jmp     L3F70
;
; BoxGuy1.vel_x += ACCEL;
;
L372A:	lda     #$1E
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L3731
	inc     _BoxGuy1+4+1
;
; if (BoxGuy1.vel_x >= MAX_SPEED)
;
L3731:	lda     _BoxGuy1+4
	cmp     #$60
	lda     _BoxGuy1+4+1
	sbc     #$01
	bvs     L3734
	eor     #$80
L3734:	bpl     L3747
;
; BoxGuy1.vel_x = MAX_SPEED;
;
	ldx     #$01
	lda     #$60
;
; else
;
	jmp     L3F70
;
; player_is_running = 0;
;
L3F6E:	sta     _player_is_running
;
; if (BoxGuy1.vel_x >= ACCEL)
;
	lda     _BoxGuy1+4
	cmp     #$1E
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L373C
	eor     #$80
L373C:	bpl     L373A
;
; BoxGuy1.vel_x -= ACCEL;
;
	lda     _BoxGuy1+4
	sec
	sbc     #$1E
	sta     _BoxGuy1+4
	bcs     L3747
	dec     _BoxGuy1+4+1
;
; else if (BoxGuy1.vel_x < -ACCEL)
;
	jmp     L3747
L373A:	lda     _BoxGuy1+4
	cmp     #$E2
	lda     _BoxGuy1+4+1
	sbc     #$FF
	bvc     L3743
	eor     #$80
L3743:	asl     a
	lda     #$00
	tax
	bcc     L3F70
;
; BoxGuy1.vel_x += ACCEL;
;
	lda     #$1E
	clc
	adc     _BoxGuy1+4
	sta     _BoxGuy1+4
	bcc     L3747
	inc     _BoxGuy1+4+1
;
; else
;
	jmp     L3747
;
; BoxGuy1.vel_x = 0;
;
L3F70:	sta     _BoxGuy1+4
	stx     _BoxGuy1+4+1
;
; BoxGuy1.x += BoxGuy1.vel_x;
;
L3747:	lda     _BoxGuy1+4
	clc
	adc     _BoxGuy1
	sta     _BoxGuy1
	lda     _BoxGuy1+4+1
	adc     _BoxGuy1+1
	sta     _BoxGuy1+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L3F73
;
; if (old_x >= 0x8000)
;
	lda     _old_x
	cmp     #$00
	lda     _old_x+1
	sbc     #$80
	lda     #$00
	tax
	bcc     L3F72
;
; BoxGuy1.x = 0xf000; // max right
;
	ldx     #$F0
;
; BoxGuy1.x = 0x0000; // max left
;
L3F72:	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; Generic.x = high_byte(BoxGuy1.x); // this is much faster than passing a pointer to BoxGuy1
;
L3F73:	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0E
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; if (BoxGuy1.vel_x < 0)
;
	ldx     _BoxGuy1+4+1
	cpx     #$80
	bcc     L3762
;
; if (bg_coll_L())
;
	jsr     _bg_coll_L
	tax
	beq     L377C
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_L;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_L
	sta     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L377C
;
; BoxGuy1.x = 0xf000;
;
	ldx     #$F0
;
; else if (BoxGuy1.vel_x > 0)
;
	jmp     L3F9C
L3762:	lda     _BoxGuy1+4
	cmp     #$01
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L3773
	eor     #$80
L3773:	bpl     L377C
;
; if (bg_coll_R())
;
	jsr     _bg_coll_R
	tax
	beq     L377C
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - eject_R;
;
	lda     _BoxGuy1+1
	sec
	sbc     _eject_R
	sta     _BoxGuy1+1
;
; BoxGuy1.vel_x = 0;
;
	lda     #$00
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if (BoxGuy1.x > 0xf000)
;
	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$F0
	bcc     L377C
;
; BoxGuy1.x = 0x0000;
;
	ldx     #$00
L3F9C:	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; if (player_on_ladder && (bg_coll_ladder() || bg_coll_ladder_top_under_player()))
;
L377C:	lda     _player_on_ladder
	beq     L3780
	jsr     _bg_coll_ladder
	tax
	bne     L3F78
	jsr     _bg_coll_ladder_top_under_player
	tax
	beq     L3780
;
; if (pad1 & PAD_DOWN)
;
L3F78:	lda     _pad1
	and     #$04
	beq     L3F79
;
; direction_y = DOWN;
;
	lda     #$04
	sta     _direction_y
;
; ++player_on_ladder_pose;
;
	inc     _player_on_ladder_pose
;
; BoxGuy1.vel_y += LADDER_ACCEL;
;
	lda     #$14
	clc
	adc     _BoxGuy1+6
	sta     _BoxGuy1+6
	bcc     L378D
	inc     _BoxGuy1+6+1
;
; if (BoxGuy1.vel_y > MAX_LADDER_SPEED)
;
L378D:	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$01
	bvs     L3790
	eor     #$80
L3790:	bpl     L3F7E
;
; BoxGuy1.vel_y = MAX_LADDER_SPEED;
;
	ldx     #$01
;
; else if (pad1 & PAD_UP)
;
	jmp     L3F9D
L3F79:	lda     _pad1
	and     #$08
	beq     L3F7B
;
; direction_y = UP;
;
	lda     #$03
	sta     _direction_y
;
; ++player_on_ladder_pose;
;
	inc     _player_on_ladder_pose
;
; BoxGuy1.vel_y -= LADDER_ACCEL;
;
	lda     _BoxGuy1+6
	sec
	sbc     #$14
	sta     _BoxGuy1+6
	bcs     L379B
	dec     _BoxGuy1+6+1
;
; if (BoxGuy1.vel_y < -MAX_LADDER_SPEED)
;
L379B:	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$FF
	bvc     L379E
	eor     #$80
L379E:	bpl     L3F7E
;
; BoxGuy1.vel_y = -MAX_LADDER_SPEED;
;
	ldx     #$FF
;
; else
;
	jmp     L3F9D
;
; BoxGuy1.vel_y = 0;
;
L3F7B:	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; else
;
	jmp     L3F7E
;
; if (player_on_ladder && bg_coll_ladder_top_under_player())
;
L3780:	lda     _player_on_ladder
	beq     L37A5
	jsr     _bg_coll_ladder_top_under_player
	tax
	beq     L37A5
;
; player_on_ladder = 0;
;
	lda     #$00
	sta     _player_on_ladder
;
; if (BoxGuy1.vel_y < 0x300)
;
L37A5:	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$03
	bvc     L37AD
	eor     #$80
L37AD:	bpl     L37AB
;
; BoxGuy1.vel_y += GRAVITY;
;
	lda     #$3C
	clc
	adc     _BoxGuy1+6
	sta     _BoxGuy1+6
	bcc     L3F7E
	inc     _BoxGuy1+6+1
;
; else
;
	jmp     L3F7E
;
; BoxGuy1.vel_y = 0x300; // consistent
;
L37AB:	ldx     #$03
L3F9D:	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; if (pad1 & PAD_DOWN)
;
L3F7E:	lda     _pad1
	and     #$04
	beq     L37B8
;
; direction_y = DOWN;
;
	lda     #$04
	sta     _direction_y
;
; if (bg_coll_ladder_top_under_player() && level != 6)
;
	jsr     _bg_coll_ladder_top_under_player
	tax
	beq     L37B8
	lda     _level
	cmp     #$06
	beq     L37B8
;
; BoxGuy1.x = (BoxGuy1.x + 0x700) & ~0xF00; // tried to square the player to the ladder
;
	lda     _BoxGuy1
	sta     _BoxGuy1
	lda     _BoxGuy1+1
	clc
	adc     #$07
	and     #$F0
	sta     _BoxGuy1+1
;
; player_on_ladder = 1;
;
	lda     #$01
	sta     _player_on_ladder
;
; player_on_ladder_pose = 0;
;
	lda     #$00
	sta     _player_on_ladder_pose
;
; player_in_air = 0;
;
	sta     _player_in_air
;
; falling_down = 0;
;
	sta     _falling_down
;
; BoxGuy1.vel_y = 0;
;
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; BoxGuy1.y += 0x100;
;
	clc
	adc     _BoxGuy1+2
	sta     _BoxGuy1+2
	lda     #$01
	adc     _BoxGuy1+2+1
	sta     _BoxGuy1+2+1
;
; BoxGuy1.y += BoxGuy1.vel_y; // add gravity to y; (make him go up or down)
;
L37B8:	lda     _BoxGuy1+6
	clc
	adc     _BoxGuy1+2
	sta     _BoxGuy1+2
	lda     _BoxGuy1+6+1
	adc     _BoxGuy1+2+1
	sta     _BoxGuy1+2+1
;
; if (BoxGuy1.y > 0xf000)   // limit how high he can go
;
	lda     _BoxGuy1+2
	cmp     #$01
	lda     _BoxGuy1+2+1
	sbc     #$F0
	bcc     L3F82
;
; BoxGuy1.y = 0x0000;
;
	lda     #$00
	sta     _BoxGuy1+2
	sta     _BoxGuy1+2+1
;
; Generic.x = high_byte(BoxGuy1.x);
;
L3F82:	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; if (BoxGuy1.vel_y > 0) // he's falling
;
	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$00
	bvs     L37DB
	eor     #$80
L37DB:	bpl     L37D9
;
; ++falling_down;
;
	inc     _falling_down
;
; if (falling_down > 2 && !player_on_ladder)
;
	lda     _falling_down
	cmp     #$03
	bcc     L37DD
	lda     _player_on_ladder
	bne     L37DD
;
; player_in_air = 1;
;
	lda     #$01
	sta     _player_in_air
;
; if (bg_coll_D()) // if he's collising below
;
L37DD:	jsr     _bg_coll_D
	tax
	beq     L3F86
;
; player_in_air = 0;
;
	lda     #$00
	sta     _player_in_air
;
; falling_down = 0;
;
	sta     _falling_down
;
; multi_jump = 0;
;
	sta     _multi_jump
;
; player_on_ladder = 0;
;
	sta     _player_on_ladder
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_D;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_D
	sta     _BoxGuy1+3
;
; BoxGuy1.y &= 0xff00;
;
	ldx     _BoxGuy1+2+1
	lda     #$00
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; if (BoxGuy1.vel_y > 0)
;
	lda     _BoxGuy1+6
	cmp     #$01
	lda     _BoxGuy1+6+1
	sbc     #$00
	bvs     L37F5
	eor     #$80
L37F5:	bpl     L3F86
;
; else if (BoxGuy1.vel_y < 0)
;
	jmp     L3F9E
L37D9:	ldx     _BoxGuy1+6+1
	cpx     #$80
	bcc     L3F86
;
; if (bg_coll_U())
;
	jsr     _bg_coll_U
	tax
	beq     L3F86
;
; high_byte(BoxGuy1.y) = high_byte(BoxGuy1.y) - eject_U;
;
	lda     _BoxGuy1+3
	sec
	sbc     _eject_U
	sta     _BoxGuy1+3
;
; BoxGuy1.vel_y = 0;
;
L3F9E:	lda     #$00
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; Generic.y = high_byte(BoxGuy1.y); // the rest should be the same
;
L3F86:	lda     _BoxGuy1+3
	sta     _Generic+1
;
; if (projectile_cooldown > 0)
;
	lda     _projectile_cooldown
	beq     L3F87
;
; --projectile_cooldown;
;
	dec     _projectile_cooldown
;
; if (pad1_new & PAD_UP)
;
L3F87:	lda     _pad1_new
	and     #$08
	beq     L3F88
;
; direction_y = UP;
;
	lda     #$03
	sta     _direction_y
;
; if (bg_coll_ladder())
;
	jsr     _bg_coll_ladder
	tax
	beq     L3F88
;
; BoxGuy1.x = (BoxGuy1.x + 0x700) & ~0xF00;
;
	lda     _BoxGuy1
	sta     _BoxGuy1
	lda     _BoxGuy1+1
	clc
	adc     #$07
	and     #$F0
	sta     _BoxGuy1+1
;
; player_on_ladder_pose = 0;
;
	lda     #$00
	sta     _player_on_ladder_pose
;
; player_on_ladder = 1;
;
	lda     #$01
	sta     _player_on_ladder
;
; player_in_air = 0;
;
	lda     #$00
	sta     _player_in_air
;
; falling_down = 0;
;
	sta     _falling_down
;
; BoxGuy1.vel_y = 0;
;
	sta     _BoxGuy1+6
	sta     _BoxGuy1+6+1
;
; BoxGuy1.vel_x = 0;
;
	sta     _BoxGuy1+4
	sta     _BoxGuy1+4+1
;
; if (pad1_new & PAD_A)
;
L3F88:	lda     _pad1_new
	and     #$80
	beq     L3F8A
;
; if (player_on_ladder)
;
	lda     _player_on_ladder
	beq     L3820
;
; player_on_ladder = 0;
;
	lda     #$00
	sta     _player_on_ladder
;
; player_in_air = 1;
;
	lda     #$01
;
; else if (bg_coll_D2() || multi_jump < 2)
;
	jmp     L3F62
L3820:	jsr     _bg_coll_D2
	tax
	bne     L3F89
	lda     _multi_jump
	cmp     #$02
	bcs     L3F8A
;
; ++multi_jump;
;
L3F89:	inc     _multi_jump
;
; BoxGuy1.vel_y = JUMP_VEL; // JUMP
;
	ldx     #$FA
	lda     #$F0
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; sfx_play(SFX_JUMP, 0);
;
	lda     #$05
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; short_jump_count = 1;
;
	lda     #$01
	sta     _short_jump_count
;
; player_in_air = 1;
;
L3F62:	sta     _player_in_air
;
; if (pad1_new & PAD_B && projectile_cooldown == 0) // shooting
;
L3F8A:	lda     _pad1_new
	and     #$40
	beq     L3846
	lda     _projectile_cooldown
	bne     L3846
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	sta     _temp1
L3F8E:	lda     _temp1
	cmp     #$03
	bcs     L3839
;
; if (projectiles_list[temp1] == TURN_OFF)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	bne     L3F8F
;
; temp2 = 1;
;
	lda     #$01
	sta     _temp2
;
; break;
;
	jmp     L3839
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
L3F8F:	inc     _temp1
	jmp     L3F8E
;
; if (temp2)
;
L3839:	lda     _temp2
	beq     L3846
;
; projectile_cooldown = PROJECTILE_COOLDOWN_FRAMES;
;
	lda     #$0A
	sta     _projectile_cooldown
;
; player_shooting = 10;
;
	sta     _player_shooting
;
; projectile_index = temp1;
;
	lda     _temp1
	sta     _projectile_index
;
; if (direction == RIGHT)
;
	lda     _direction
	cmp     #$01
	bne     L384E
;
; projectiles_list[projectile_index] = RIGHT;
;
	ldy     _projectile_index
;
; else
;
	jmp     L3F63
;
; projectiles_list[projectile_index] = LEFT;
;
L384E:	ldy     _projectile_index
	lda     #$00
L3F63:	sta     _projectiles_list,y
;
; projectiles_x[projectile_index] = high_byte(BoxGuy1.x) + 10;
;
	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _projectile_index
	bcc     L385B
	inx
L385B:	sta     ptr1
	stx     ptr1+1
	lda     _BoxGuy1+1
	clc
	adc     #$0A
	ldy     #$00
	sta     (ptr1),y
;
; projectiles_y[projectile_index] = high_byte(BoxGuy1.y);
;
	ldy     _projectile_index
	lda     _BoxGuy1+3
	sta     _projectiles_y,y
;
; sfx_play(SFX_SHOOT, 0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; if (short_jump_count)
;
L3846:	lda     _short_jump_count
	beq     L386B
;
; ++short_jump_count;
;
	inc     _short_jump_count
;
; if (short_jump_count > 30)
;
	lda     _short_jump_count
	cmp     #$1F
	bcc     L386B
;
; short_jump_count = 0;
;
	lda     #$00
	sta     _short_jump_count
;
; if ((short_jump_count) && ((pad1 & PAD_A) == 0) && (BoxGuy1.vel_y < -0x200))
;
L386B:	lda     _short_jump_count
	beq     L3F9B
	lda     _pad1
	ldx     #$00
	and     #$80
	bne     L3F92
	lda     _BoxGuy1+6
	cmp     #$00
	lda     _BoxGuy1+6+1
	sbc     #$FE
	bvc     L3877
	eor     #$80
L3877:	bpl     L3F92
;
; BoxGuy1.vel_y = -0x200;
;
	ldx     #$FE
	lda     #$00
	sta     _BoxGuy1+6
	stx     _BoxGuy1+6+1
;
; short_jump_count = 0;
;
	sta     _short_jump_count
;
; temp5 = low_byte(scroll_x) + high_byte(BoxGuy1.x);
;
L3F9B:	tax
L3F92:	lda     _scroll_x
	clc
	adc     _BoxGuy1+1
	bcc     L3F59
	inx
L3F59:	sta     _temp5
	stx     _temp5+1
;
; if (temp5 > 0x98 && temp5 < 0xa4) // middle of the screen
;
	cmp     #$99
	txa
	sbc     #$00
	bcc     L3881
	lda     _temp5+1
	cmp     #$00
	bne     L3884
	lda     _temp5
	cmp     #$A4
L3884:	bcs     L3881
;
; map_loaded = 0;
;
	lda     #$00
	sta     _map_loaded
;
; temp5 = BoxGuy1.x; // store his x before we check the scrolling
;
L3881:	lda     _BoxGuy1+1
	sta     _temp5+1
	lda     _BoxGuy1
	sta     _temp5
;
; if (BoxGuy1.x < MAX_LEFT)
;
	ldx     _BoxGuy1+1
	cpx     #$40
	jcs     L38AA
;
; if (!map_loaded)
;
	lda     _map_loaded
	bne     L388C
;
; room_to_load = ((scroll_x >> 8) - 1); // high byte = room, one to the left
;
	lda     _scroll_x+1
	sec
	sbc     #$01
	sta     _room_to_load
;
; new_cmap();
;
	jsr     _new_cmap
;
; map_loaded = 1; // only do once
;
	lda     #$01
	sta     _map_loaded
;
; temp1 = (MAX_LEFT - BoxGuy1.x) >> 8;
;
L388C:	lda     #$00
	sec
	sbc     _BoxGuy1
	lda     #$40
	sbc     _BoxGuy1+1
	sta     _temp1
;
; if (temp1 > 3)
;
	cmp     #$04
	bcc     L3899
;
; temp1 = 3; // max scroll change
;
	lda     #$03
	sta     _temp1
;
; tempint = scroll_x + high_byte(BoxGuy1.x);
;
L3899:	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     _BoxGuy1+1
	bcc     L3F5A
	inx
L3F5A:	sta     _tempint
	stx     _tempint+1
;
; current_room = (tempint >> 8);
;
	lda     _tempint+1
	sta     _current_room
;
; if (max_rooms >= 1) // this is for the multi-room levels
;
	lda     _max_rooms
	beq     L38AA
;
; if ((scroll_x - temp1) > max_scroll) // if subtracting the scroll makes it overflow
;
	lda     _scroll_x
	sec
	sbc     _temp1
	pha
	lda     _scroll_x+1
	sbc     #$00
	tax
	pla
	sec
	sbc     _max_scroll
	sta     tmp1
	txa
	sbc     _max_scroll+1
	ora     tmp1
	bcc     L38A5
	beq     L38A5
;
; scroll_x = 0; // just go to zero (and move the guy)
;
	lda     #$00
	sta     _scroll_x
	sta     _scroll_x+1
;
; else // otherwise scroll the window and offset the guy's movement
;
	jmp     L38AA
;
; scroll_x -= temp1;                  // scroll the window
;
L38A5:	lda     _temp1
	eor     #$FF
	sec
	adc     _scroll_x
	sta     _scroll_x
	lda     #$FF
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) + temp1; // add the offset to the guy
;
	lda     _BoxGuy1+1
	clc
	adc     _temp1
	sta     _BoxGuy1+1
;
; if (BoxGuy1.x > MAX_RIGHT)
;
L38AA:	lda     _BoxGuy1
	cmp     #$01
	lda     _BoxGuy1+1
	sbc     #$90
	bcc     L38C4
;
; if (!map_loaded) // gets reset whenever the player's in the middle of the level
;
	lda     _map_loaded
	bne     L38B3
;
; room_to_load = ((scroll_x >> 8) + 1); // high byte = room, one to the left
;
	lda     _scroll_x+1
	clc
	adc     #$01
	sta     _room_to_load
;
; new_cmap();
;
	jsr     _new_cmap
;
; map_loaded = 1; // only do once
;
	lda     #$01
	sta     _map_loaded
;
; temp1 = (BoxGuy1.x - MAX_RIGHT) >> 8;
;
L38B3:	lda     _BoxGuy1+1
	sec
	sbc     #$90
	sta     _temp1
;
; if (temp1 > 3)
;
	cmp     #$04
	bcc     L3F96
;
; temp1 = 3; // max scroll change
;
	lda     #$03
	sta     _temp1
;
; if (max_rooms >= 1) // used for single room levels
;
L3F96:	lda     _max_rooms
	beq     L38C4
;
; scroll_x += temp1;                  // scroll the window
;
	lda     _temp1
	clc
	adc     _scroll_x
	sta     _scroll_x
	lda     #$00
	adc     _scroll_x+1
	sta     _scroll_x+1
;
; high_byte(BoxGuy1.x) = high_byte(BoxGuy1.x) - temp1; // sub the offet from the guy
;
	lda     _BoxGuy1+1
	sec
	sbc     _temp1
	sta     _BoxGuy1+1
;
; if (scroll_x >= max_scroll)
;
L38C4:	lda     _scroll_x
	cmp     _max_scroll
	lda     _scroll_x+1
	sbc     _max_scroll+1
	bcc     L38D2
;
; scroll_x = max_scroll;      // stop scrolling right, end of level
;
	lda     _max_scroll+1
	sta     _scroll_x+1
	lda     _max_scroll
	sta     _scroll_x
;
; BoxGuy1.x = temp5;        // but allow the x position to go all the way right
;
	lda     _temp5+1
	sta     _BoxGuy1+1
	lda     _temp5
	sta     _BoxGuy1
;
; if (high_byte(BoxGuy1.x) >= 0xe0) // but limit how far right he can go
;
	lda     _BoxGuy1+1
	cmp     #$E0
	bcc     L38D2
;
; BoxGuy1.x = 0xe000;
;
	ldx     #$E0
	lda     #$00
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; }
;
L38D2:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_collision_sub (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_sub: near

.segment	"CODE"

;
; if (temp_y >= 0xf0)
;
	lda     _temp_y
	cmp     #$F0
	ldx     #$00
	bcc     L3FA0
;
; return 0;
;
	txa
	rts
;
; coordinates = (temp_x >> 4) + (temp_y & 0xf0);
;
L3FA0:	lda     _temp_x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     _temp_y
	and     #$F0
	clc
	adc     ptr1
	sta     _coordinates
;
; map = temp_room & 1; // high byte
;
	lda     _temp_room
	and     #$01
	sta     _map
;
; if (!map)
;
	lda     _map
	bne     L2D32
;
; collision = c_map[coordinates];
;
	ldy     _coordinates
	lda     _c_map,y
;
; else
;
	jmp     L3F9F
;
; collision = c_map2[coordinates];
;
L2D32:	ldy     _coordinates
	lda     _c_map2,y
L3F9F:	sta     _collision
;
; return metatile_colision_map[collision];
;
	ldy     _collision
	lda     _metatile_colision_map,y
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_R: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x + 0x120;
;
	lda     _scroll_x
	ldx     _scroll_x+1
	clc
	adc     #$20
	bcc     L3959
	inx
L3959:	inx
	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; offset = level_offsets[level];
;
	ldy     _level
	lda     _level_offsets,y
	sta     _offset
;
; offset += temp1; // in place of room?!?
;
	lda     _temp1
	clc
	adc     _offset
	sta     _offset
;
; set_data_pointer(stage1_levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L3FA4
	inx
	clc
L3FA4:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch (scroll_count)
;
	lda     _scroll_count
;
; }
;
	beq     L396D
	cmp     #$01
	beq     L3986
	cmp     #$02
	jeq     L39A0
	jmp     L39B9
;
; address = get_ppu_addr(nt, x, 0);
;
L396D:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L3FA9
;
; address = get_ppu_addr(nt, x, 0x40);
;
L3986:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L3FA9
;
; address = get_ppu_addr(nt, x, 0x80);
;
L39A0:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L3FA9
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L39B9:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L3FA9:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; ++scroll_count;
;
	inc     _scroll_count
;
; scroll_count &= 3; // mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_screen_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_screen_L: near

.segment	"CODE"

;
; pseudo_scroll_x = scroll_x - 0x20; // Modify the scroll offset for left scroll
;
	lda     _scroll_x
	ldx     _scroll_x+1
	sec
	sbc     #$20
	bcs     L38DA
	dex
L38DA:	sta     _pseudo_scroll_x
	stx     _pseudo_scroll_x+1
;
; temp1 = pseudo_scroll_x >> 8;
;
	lda     _pseudo_scroll_x+1
	sta     _temp1
;
; offset = level_offsets[level];
;
	ldy     _level
	lda     _level_offsets,y
	sta     _offset
;
; offset += temp1; // in place of room?!?
;
	lda     _temp1
	clc
	adc     _offset
	sta     _offset
;
; set_data_pointer(stage1_levels_list[offset]);
;
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L3FAC
	inx
	clc
L3FAC:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _set_data_pointer
;
; nt = temp1 & 1;
;
	lda     _temp1
	and     #$01
	sta     _nt
;
; x = pseudo_scroll_x & 0xff;
;
	lda     _pseudo_scroll_x
	sta     _x
;
; switch (scroll_count)
;
	lda     _scroll_count
;
; }
;
	beq     L38EE
	cmp     #$01
	beq     L3907
	cmp     #$02
	jeq     L3921
	jmp     L393A
;
; address = get_ppu_addr(nt, x, 0);
;
L38EE:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	tya
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x20);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$20
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x20 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$20
;
; break;
;
	jmp     L3FB1
;
; address = get_ppu_addr(nt, x, 0x40);
;
L3907:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$40
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x40 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$40
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0x60);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$60
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x60 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$60
;
; break;
;
	jmp     L3FB1
;
; address = get_ppu_addr(nt, x, 0x80);
;
L3921:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$80
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0x80 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$80
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xa0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xa0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$A0
;
; break;
;
	jmp     L3FB1
;
; address = get_ppu_addr(nt, x, 0xc0);
;
L393A:	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$C0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xc0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$C0
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; address = get_ppu_addr(nt, x, 0xe0);
;
	jsr     decsp2
	lda     _nt
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     #$E0
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = 0xe0 + (x >> 4);
;
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     #$E0
L3FB1:	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; --scroll_count;   // Reverse the increment to scroll in the opposite direction
;
	dec     _scroll_count
;
; scroll_count &= 3; // mask off top bits, keep it 0-3
;
	lda     _scroll_count
	and     #$03
	sta     _scroll_count
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ new_cmap (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_new_cmap: near

.segment	"CODE"

;
; offset = level_offsets[level];
;
	ldy     _level
	lda     _level_offsets,y
	sta     _offset
;
; offset += room_to_load;
;
	lda     _room_to_load
	clc
	adc     _offset
	sta     _offset
;
; map = room_to_load & 1; // even or odd?
;
	lda     _room_to_load
	and     #$01
	sta     _map
;
; if (!map)
;
	lda     _map
	bne     L39DE
;
; memcpy(c_map, stage1_levels_list[offset], 240);
;
	lda     #<(_c_map)
	ldx     #>(_c_map)
	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L3FB4
	inx
	clc
L3FB4:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy
;
; memcpy(c_map2, stage1_levels_list[offset], 240);
;
L39DE:	lda     #<(_c_map2)
	ldx     #>(_c_map2)
	jsr     pushax
	ldx     #$00
	lda     _offset
	asl     a
	bcc     L3FB5
	inx
	clc
L3FB5:	adc     #<(_stage1_levels_list)
	sta     ptr1
	txa
	adc     #>(_stage1_levels_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     #$F0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ handle_scrolling (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_handle_scrolling: near

.segment	"CODE"

;
; if (!r_scroll_frames && !l_scroll_frames)
;
	lda     _r_scroll_frames
	bne     L3514
	lda     _l_scroll_frames
	bne     L3514
;
; if (BoxGuy1.vel_x > 0)
;
	lda     _BoxGuy1+4
	cmp     #$01
	lda     _BoxGuy1+4+1
	sbc     #$00
	bvs     L3511
	eor     #$80
L3511:	bpl     L3FB6
;
; r_scroll_frames = 4;
;
	lda     #$04
	sta     _r_scroll_frames
;
; else
;
	jmp     L3514
;
; l_scroll_frames = 4;
;
L3FB6:	lda     #$04
	sta     _l_scroll_frames
;
; if (r_scroll_frames)
;
L3514:	lda     _r_scroll_frames
	beq     L3517
;
; draw_screen_R();
;
	jsr     _draw_screen_R
;
; --r_scroll_frames;
;
	dec     _r_scroll_frames
;
; else if (l_scroll_frames)
;
	rts
L3517:	lda     _l_scroll_frames
	beq     L351C
;
; draw_screen_L();
;
	jsr     _draw_screen_L
;
; --l_scroll_frames;
;
	dec     _l_scroll_frames
;
; }
;
L351C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ projectile_movement (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_projectile_movement: near

.segment	"CODE"

;
; for (temp1 = 0; temp1 < 3; ++temp1)
;
	lda     #$00
	sta     _temp1
L3FB8:	lda     _temp1
	cmp     #$03
	bcc     L3FBF
;
; }
;
	rts
;
; if (projectiles_list[temp1] != TURN_OFF)
;
L3FBF:	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	jeq     L3FBE
;
; if (projectiles_x[temp1] > 250)
;
	ldy     _temp1
	lda     _projectiles_x,y
	cmp     #$FB
	bcc     L34D9
;
; projectiles_list[temp1] = TURN_OFF;
;
	ldy     _temp1
	lda     #$FF
	sta     _projectiles_list,y
;
; else
;
	jmp     L3FBE
;
; if (projectiles_list[temp1] == RIGHT)
;
L34D9:	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$01
	bne     L34E2
;
; if ((BoxGuy1.x <= MAX_LEFT) && (pad1 & PAD_LEFT))
;
	lda     _BoxGuy1+1
	cmp     #$40
	bne     L34E9
	lda     _BoxGuy1
	cmp     #$01
L34E9:	bcs     L34E6
	lda     _pad1
	and     #$02
	beq     L34E6
;
; projectiles_x[temp1] += PROJECTILE_SPEED_WITH_SCROLL;
;
	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L34EF
	inx
L34EF:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$05
;
; else
;
	jmp     L3FB7
;
; projectiles_x[temp1] += PROJECTILE_SPEED;
;
L34E6:	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L34F4
	inx
L34F4:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$03
;
; else if (projectiles_list[temp1] == LEFT)
;
	jmp     L3FB7
L34E2:	ldy     _temp1
	lda     _projectiles_list,y
	bne     L3FBE
;
; if ((BoxGuy1.x >= MAX_RIGHT) && (pad1 & PAD_RIGHT))
;
	lda     _BoxGuy1
	cmp     #$00
	lda     _BoxGuy1+1
	sbc     #$90
	bcc     L34FB
	lda     _pad1
	and     #$01
	beq     L34FB
;
; projectiles_x[temp1] -= PROJECTILE_SPEED_WITH_SCROLL;
;
	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L3503
	inx
L3503:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$05
;
; else
;
	jmp     L3FB7
;
; projectiles_x[temp1] -= PROJECTILE_SPEED;
;
L34FB:	lda     #<(_projectiles_x)
	ldx     #>(_projectiles_x)
	clc
	adc     _temp1
	bcc     L3508
	inx
L3508:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$03
L3FB7:	sta     (ptr1),y
;
; for (temp1 = 0; temp1 < 3; ++temp1)
;
L3FBE:	inc     _temp1
	jmp     L3FB8

.endproc

; ---------------------------------------------------------------
; void __near__ check_spr_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_spr_objects: near

.segment	"CODE"

;
; Generic2.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic2
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
	lda     #$00
	sta     _index
L3FC0:	lda     _index
	cmp     #$10
	bcs     L3A4E
;
; enemy_active[index] = 0; // default to zero
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; if (enemy_y[index] != TURN_OFF)
;
	ldy     _index
	lda     _enemy_y,y
	cmp     #$FF
	beq     L3FC2
;
; high_byte(temp5) = enemy_room[index];
;
	ldy     _index
	lda     _enemy_room,y
	sta     _temp5+1
;
; low_byte(temp5) = enemy_actual_x[index];
;
	ldy     _index
	lda     _enemy_actual_x,y
	sta     _temp5
;
; temp1 = enemy_active[index] = get_position();
;
	lda     #<(_enemy_active)
	ldx     #>(_enemy_active)
	clc
	adc     _index
	bcc     L3A6A
	inx
L3A6A:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
	sta     _temp1
;
; if (temp1 == 0 || enemy_health[index] == 0)
;
	lda     _temp1
	beq     L3FC2
	ldy     _index
	lda     _enemy_health,y
	beq     L3FC2
;
; enemy_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _enemy_x,y
;
; enemy_moves(); // if active, do it's moves now
;
	jsr     _enemy_moves
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
L3FC2:	inc     _index
	jmp     L3FC0
;
; }
;
L3A4E:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ check_entity_objects (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check_entity_objects: near

.segment	"CODE"

;
; Generic2.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic2
;
; for (index = 0; index < MAX_ENTITY; ++index)
;
	lda     #$00
	sta     _index
L3FC3:	lda     _index
	cmp     #$10
	bcs     L39FA
;
; entity_active[index] = 0; // default to zero
;
	ldy     _index
	lda     #$00
	sta     _entity_active,y
;
; if (entity_y[index] != TURN_OFF)
;
	ldy     _index
	lda     _entity_y,y
	cmp     #$FF
	beq     L3FC4
;
; high_byte(temp5) = entity_room[index];
;
	ldy     _index
	lda     _entity_room,y
	sta     _temp5+1
;
; low_byte(temp5) = entity_actual_x[index];
;
	ldy     _index
	lda     _entity_actual_x,y
	sta     _temp5
;
; temp1 = entity_active[index] = get_position();
;
	lda     #<(_entity_active)
	ldx     #>(_entity_active)
	clc
	adc     _index
	bcc     L3A16
	inx
L3A16:	jsr     pushax
	jsr     _get_position
	ldy     #$00
	jsr     staspidx
	sta     _temp1
;
; if (temp1 == 0)
;
	lda     _temp1
;
; continue;
;
	beq     L3FC4
;
; entity_x[index] = temp_x; // screen x coords
;
	ldy     _index
	lda     _temp_x
	sta     _entity_x,y
;
; entity_moves();
;
	jsr     _entity_moves
;
; for (index = 0; index < MAX_ENTITY; ++index)
;
L3FC4:	inc     _index
	jmp     L3FC3
;
; }
;
L39FA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_collisions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_collisions: near

.segment	"CODE"

;
; Generic.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
	lda     #$00
	sta     _index
L3FC6:	lda     _index
	cmp     #$10
	bcc     L3FE7
;
; }
;
	rts
;
; if (enemy_active[index])
;
L3FE7:	ldy     _index
	lda     _enemy_active,y
	jeq     L3FCE
;
; switch (enemy_type[index])
;
	ldy     _index
	lda     _enemy_type,y
;
; }
;
	beq     L3FC7
	cmp     #$01
	beq     L3FC8
	cmp     #$02
	beq     L3FC9
	jmp     L3FCA
;
; Generic2.width = ENEMY_SNAIL_WIDTH;
;
L3FC7:	lda     #$0E
	sta     _Generic2+2
;
; Generic2.height = ENEMY_SNAIL_HEIGHT;
;
	lda     #$0F
	sta     _Generic2+3
;
; Generic2.x = enemy_x[index] + 4;
;
	ldy     _index
	lda     _enemy_x,y
	clc
	adc     #$04
;
; break;
;
	jmp     L3FD3
;
; Generic2.width = ENEMY_OWL_WIDTH;
;
L3FC8:	lda     #$0D
	sta     _Generic2+2
;
; Generic2.height = ENEMY_OWL_HEIGHT;
;
	lda     #$0F
;
; break;
;
	jmp     L3FD9
;
; Generic2.width = ENEMY_BEAR_WIDTH;
;
L3FC9:	lda     #$0E
	sta     _Generic2+2
;
; Generic2.height = ENEMY_BEAR_HEIGHT;
;
	lda     #$20
;
; break;
;
	jmp     L3FD9
;
; Generic2.width = ENEMY_WIDTH;
;
L3FCA:	lda     #$0D
	sta     _Generic2+2
;
; Generic2.height = ENEMY_HEIGHT;
;
L3FD9:	sta     _Generic2+3
;
; Generic2.x = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
L3FD3:	sta     _Generic2
;
; Generic2.y = enemy_y[index];
;
	ldy     _index
	lda     _enemy_y,y
	sta     _Generic2+1
;
; if (check_collision(&Generic, &Generic2))
;
	lda     #<(_Generic)
	ldx     #>(_Generic)
	jsr     pushax
	lda     #<(_Generic2)
	ldx     #>(_Generic2)
	jsr     _check_collision
	tax
	beq     L3FCE
;
; switch (enemy_type[index])
;
	ldy     _index
	lda     _enemy_type,y
;
; }
;
	beq     L3FCB
	cmp     #$01
	beq     L3FCD
	cmp     #$02
	beq     L3FCD
	jmp     L3FCE
;
; if (invul_frames == 0)
;
L3FCB:	lda     _invul_frames
	bne     L3FCE
;
; hit_direction = enemy_dir[index];
;
	ldy     _index
	lda     _enemy_dir,y
	sta     _hit_direction
;
; BoxGuy1.health -= ENEMY_SNAIL_DAMAGE; // check for overflow
;
	lda     _BoxGuy1+8
	sec
	sbc     #$02
;
; break;
;
	jmp     L3FDF
;
; if (invul_frames == 0)
;
L3FCD:	lda     _invul_frames
	bne     L3FCE
;
; hit_direction = enemy_dir[index];
;
	ldy     _index
	lda     _enemy_dir,y
	sta     _hit_direction
;
; BoxGuy1.health -= ENEMY_BEAR_DAMAGE; // check for overflow
;
	lda     _BoxGuy1+8
	sec
	sbc     #$05
L3FDF:	sta     _BoxGuy1+8
;
; player_on_ladder = 0;         // hitting hits you off ladder
;
	lda     #$00
	sta     _player_on_ladder
;
; sfx_play(SFX_ENEMY_HITS, 0);
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; player_in_hitstun = ENEMY_BEAR_PLAYER_HITSTUN;
;
	lda     #$1E
	sta     _player_in_hitstun
;
; invul_frames = ENEMY_BEAR_PLAYER_INVUL;
;
	lda     #$32
	sta     _invul_frames
;
; for (index = 0; index < MAX_ENEMY; ++index)
;
L3FCE:	inc     _index
	jmp     L3FC6

.endproc

; ---------------------------------------------------------------
; void __near__ entity_collisions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_entity_collisions: near

.segment	"CODE"

;
; Generic.x = high_byte(BoxGuy1.x);
;
	lda     _BoxGuy1+1
	sta     _Generic
;
; Generic.y = high_byte(BoxGuy1.y);
;
	lda     _BoxGuy1+3
	sta     _Generic+1
;
; Generic.width = HERO_WIDTH;
;
	lda     #$0E
	sta     _Generic+2
;
; Generic.height = HERO_HEIGHT;
;
	sta     _Generic+3
;
; for (index = 0; index < MAX_ENTITY; ++index)
;
	lda     #$00
	sta     _index
L3FE9:	lda     _index
	cmp     #$10
	bcc     L3FF8
;
; }
;
	rts
;
; if (entity_active[index])
;
L3FF8:	ldy     _index
	lda     _entity_active,y
	jeq     L3FF7
;
; switch (entity_type[index])
;
	ldy     _index
	lda     _entity_type,y
;
; }
;
	cmp     #$02
	beq     L3FEA
	cmp     #$04
	beq     L3FEC
	cmp     #$05
	beq     L3FED
	cmp     #$06
	beq     L3FEB
	jmp     L3FEE
;
; Generic2.width = 64;
;
L3FEA:	lda     #$40
	sta     _Generic2+2
;
; Generic2.height = 8;
;
	lda     #$08
;
; break;
;
	jmp     L3FE8
;
; Generic2.width = 64;
;
L3FEB:	lda     #$40
	sta     _Generic2+2
;
; Generic2.height = 8;
;
	lda     #$08
;
; break;
;
	jmp     L3FE8
;
; Generic2.width = 255;
;
L3FEC:	lda     #$FF
	sta     _Generic2+2
;
; Generic2.height = 8;
;
	lda     #$08
;
; break;
;
	jmp     L3FE8
;
; Generic2.width = 255;
;
L3FED:	lda     #$FF
	sta     _Generic2+2
;
; Generic2.height = 8;
;
	lda     #$08
;
; break;
;
	jmp     L3FE8
;
; Generic2.width = 16;
;
L3FEE:	lda     #$10
	sta     _Generic2+2
;
; Generic2.height = 16;
;
L3FE8:	sta     _Generic2+3
;
; Generic2.x = entity_x[index];
;
	ldy     _index
	lda     _entity_x,y
	sta     _Generic2
;
; Generic2.y = entity_y[index];
;
	ldy     _index
	lda     _entity_y,y
	sta     _Generic2+1
;
; if (check_collision(&Generic, &Generic2))
;
	lda     #<(_Generic)
	ldx     #>(_Generic)
	jsr     pushax
	lda     #<(_Generic2)
	ldx     #>(_Generic2)
	jsr     _check_collision
	tax
	jeq     L3FF7
;
; switch (entity_type[index])
;
	ldy     _index
	lda     _entity_type,y
;
; }
;
	beq     L3FF2
	cmp     #$02
	beq     L3FEF
	cmp     #$03
	beq     L3FF3
	cmp     #$04
	beq     L3FF1
	cmp     #$05
	beq     L3FF0
	cmp     #$06
	beq     L3FF4
	cmp     #$08
	beq     L3FF6
	cmp     #$09
	beq     L3FF5
	cmp     #$0A
	beq     L3E08
	cmp     #$0B
	beq     L3E2B
	jmp     L3FF7
;
; death_flag = 30; // 30 frames the player can die in
;
L3FEF:	lda     #$1E
	sta     _death_flag
;
; break;
;
	jmp     L3FF7
;
; ++level_up;
;
L3FF0:	inc     _level_up
;
; break;
;
	jmp     L3FF7
;
; ++level_down;
;
L3FF1:	inc     _level_down
;
; break;
;
	jmp     L3FF7
;
; ++level_up;
;
L3FF2:	inc     _level_up
;
; break;
;
	jmp     L3FF7
;
; ++level_down;
;
L3FF3:	inc     _level_down
;
; break;
;
	jmp     L3FF7
;
; ++death;
;
L3FF4:	inc     _death
;
; break;
;
	jmp     L3FF7
;
; load_victory();
;
L3E08:	jsr     _load_victory
;
; break;
;
	jmp     L3FF7
;
; if (BoxGuy1.health < MAX_PLAYER_HEALTH)
;
L3FF5:	lda     _BoxGuy1+8
	cmp     #$1C
	bcs     L3E0C
;
; BoxGuy1.health += 1;
;
	inc     _BoxGuy1+8
;
; sfx_play(SFX_LIFE_UP, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; entity_active[index] = 0;
;
L3E0C:	ldy     _index
	lda     #$00
	sta     _entity_active,y
;
; entity_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _entity_y,y
;
; break;
;
	jmp     L3FF7
;
; BoxGuy1.health = MAX_PLAYER_HEALTH;
;
L3FF6:	lda     #$1C
	sta     _BoxGuy1+8
;
; sfx_play(SFX_LIFE_UP, 0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; entity_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _entity_active,y
;
; entity_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _entity_y,y
;
; break;
;
	jmp     L3FF7
;
; pal_fade_to(4, 0);    // fade to black
;
L3E2B:	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; game_mode = MODE_SWITCH; // this handles loading the level
;
	lda     #$04
	sta     _game_mode
;
; ppu_off();
;
	jsr     _ppu_off
;
; scroll_x = 0;
;
	lda     #$00
	sta     _scroll_x
	sta     _scroll_x+1
;
; ++level;
;
	inc     _level
;
; level_up = 0;
;
	sta     _level_up
;
; room_to_load = 0;
;
	sta     _room_to_load
;
; nametable_to_load = 0;
;
	sta     _nametable_to_load
;
; for (index = 0; index < MAX_ENTITY; ++index)
;
L3FF7:	inc     _index
	jmp     L3FE9

.endproc

; ---------------------------------------------------------------
; void __near__ load_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_title: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; set_data_pointer(titletiled_0);
;
	lda     #<(_titletiled_0)
	ldx     #>(_titletiled_0)
	jsr     _set_data_pointer
;
; set_mt_pointer(metatile);
;
	lda     #<(_metatile)
	ldx     #>(_metatile)
	jsr     _set_mt_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L3FFB:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L3FFA:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L3FFC
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L3FFA
;
; if (y == 0xe0)
;
L3FFC:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L3115
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L3FFB
;
; ppu_on_all();
;
L3115:	jsr     _ppu_on_all
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; multi_vram_buffer_horz("CORGS DEMO", 10, NTADR_A(14, 6));
;
	jsr     decsp3
	lda     #<(L3139)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L3139)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldx     #$20
	lda     #$CE
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("BRIAN & ALAN GAMES", 18, NTADR_A(12, 8));
;
	jsr     decsp3
	lda     #<(L3143)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L3143)
	sta     (sp),y
	lda     #$12
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$0C
	jmp     _multi_vram_buffer_horz

.endproc

; ---------------------------------------------------------------
; void __near__ load_victory (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_victory: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_victory);
;
	lda     #<(_palette_victory)
	ldx     #>(_palette_victory)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(victory);
;
	lda     #<(_victory)
	ldx     #>(_victory)
	jsr     _vram_unrle
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; music_stop();
;
	jsr     _music_stop
;
; sfx_play(SFX_VICTORY, 0);
;
	lda     #$07
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; game_mode = MODE_END;
;
	lda     #$05
	sta     _game_mode
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_moves (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_moves: near

.segment	"CODE"

;
; enemy_frames[index] += 1;
;
	lda     #<(_enemy_frames)
	ldx     #>(_enemy_frames)
	clc
	adc     _index
	bcc     L3ABD
	inx
L3ABD:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	sty     _temp1
L3FFD:	lda     _temp1
	cmp     #$03
	jcs     L3AC0
;
; if (projectiles_list[temp1] != TURN_OFF)
;
	ldy     _temp1
	lda     _projectiles_list,y
	cmp     #$FF
	jeq     L4005
;
; (enemy_x[index] > projectiles_x[temp1] - 5 && enemy_x[index] < projectiles_x[temp1] + 5) &&
;
	ldy     _index
	lda     _enemy_x,y
	jsr     pusha0
	ldy     _temp1
	lda     _projectiles_x,y
	sec
	sbc     #$05
	bcs     L3AD2
	ldx     #$FF
L3AD2:	jsr     tosicmp
	jcc     L4005
	jeq     L4005
	ldy     _index
	lda     _enemy_x,y
	jsr     pusha0
	ldy     _temp1
	lda     _projectiles_x,y
	clc
	adc     #$05
	bcc     L3AD8
	ldx     #$01
L3AD8:	jsr     tosicmp
	jcs     L4005
;
; (enemy_y[index] > projectiles_y[temp1] - 30 && enemy_y[index] < projectiles_y[temp1] + 30))
;
	ldy     _index
	lda     _enemy_y,y
	jsr     pusha0
	ldy     _temp1
	lda     _projectiles_y,y
	sec
	sbc     #$1E
	bcs     L3AE0
	ldx     #$FF
L3AE0:	jsr     tosicmp
	jcc     L4005
	jeq     L4005
	ldy     _index
	lda     _enemy_y,y
	jsr     pusha0
	ldy     _temp1
	lda     _projectiles_y,y
	clc
	adc     #$1E
	bcc     L3AE6
	ldx     #$01
L3AE6:	jsr     tosicmp
	jcs     L4005
;
; projectiles_list[temp1] = TURN_OFF;
;
	ldy     _temp1
	lda     #$FF
	sta     _projectiles_list,y
;
; --enemy_health[index];
;
	lda     #<(_enemy_health)
	ldx     #>(_enemy_health)
	clc
	adc     _index
	bcc     L3AEF
	inx
L3AEF:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; sfx_play(SFX_SHOT_HITS, 0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (enemy_health[index] == 0 || enemy_health[index] > 240) // check for overflow with 240
;
	ldy     _index
	lda     _enemy_health,y
	beq     L4002
	ldy     _index
	lda     _enemy_health,y
	cmp     #$F1
	jcc     L4005
;
; if (enemy_type[index] == ENEMY_BEAR)
;
L4002:	ldy     _index
	lda     _enemy_type,y
	cmp     #$02
	bne     L4003
;
; entity_y[0] = 80;
;
	lda     #$50
	sta     _entity_y
;
; entity_x[0] = 120;
;
	lda     #$78
	sta     _entity_x
;
; entity_room[0] = enemy_room[index];
;
	ldy     _index
	lda     _enemy_room,y
	sta     _entity_room
;
; entity_active[0] = 1;
;
	lda     #$01
	sta     _entity_active
;
; entity_type[0] = ENTITY_FRUIT;
;
	lda     #$0A
	sta     _entity_type
;
; entity_actual_x[0] = 128;
;
	lda     #$80
	sta     _entity_actual_x
;
; else if (frame_counter % 2 == 0)
;
	jmp     L3B12
L4003:	lda     _frame_counter
	and     #$01
	jne     L3B12
;
; for (index2 = 0; index2 <= MAX_ENTITY; ++index2)
;
	sta     _index2
L4004:	lda     _index2
	cmp     #$11
	bcs     L3B17
;
; if (entity_y[index2] == TURN_OFF)
;
	ldy     _index2
	lda     _entity_y,y
	cmp     #$FF
;
; break;
;
	beq     L3B17
;
; for (index2 = 0; index2 <= MAX_ENTITY; ++index2)
;
	inc     _index2
	jmp     L4004
;
; entity_y[index2] = enemy_y[index];
;
L3B17:	lda     #<(_entity_y)
	ldx     #>(_entity_y)
	clc
	adc     _index2
	bcc     L3B24
	inx
L3B24:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _enemy_y,y
	ldy     #$00
	sta     (ptr1),y
;
; entity_x[index2] = enemy_x[index];
;
	lda     #<(_entity_x)
	ldx     #>(_entity_x)
	clc
	adc     _index2
	bcc     L3B2A
	inx
L3B2A:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _enemy_x,y
	ldy     #$00
	sta     (ptr1),y
;
; entity_room[index2] = enemy_room[index];
;
	lda     #<(_entity_room)
	ldx     #>(_entity_room)
	clc
	adc     _index2
	bcc     L3B30
	inx
L3B30:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _enemy_room,y
	ldy     #$00
	sta     (ptr1),y
;
; entity_active[index2] = 1;
;
	ldy     _index2
	lda     #$01
	sta     _entity_active,y
;
; entity_type[index2] = ENTITY_BUN;
;
	ldy     _index2
	lda     #$09
	sta     _entity_type,y
;
; entity_actual_x[index2] = enemy_actual_x[index];
;
	lda     #<(_entity_actual_x)
	ldx     #>(_entity_actual_x)
	clc
	adc     _index2
	bcc     L3B3E
	inx
L3B3E:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _enemy_actual_x,y
	ldy     #$00
	sta     (ptr1),y
;
; enemy_y[index] = TURN_OFF;
;
L3B12:	ldy     _index
	lda     #$FF
	sta     _enemy_y,y
;
; enemy_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
L4005:	inc     _temp1
	jmp     L3FFD
;
; if (enemy_type[index] == ENEMY_SNAIL)
;
L3AC0:	ldy     _index
	lda     _enemy_type,y
	bne     L3B4A
;
; enemy_snail_behavior();
;
	jsr     _enemy_snail_behavior
;
; if (enemy_type[index] == ENEMY_OWL)
;
L3B4A:	ldy     _index
	lda     _enemy_type,y
	cmp     #$01
	bne     L3B4F
;
; enemy_owl_behavior();
;
	jsr     _enemy_owl_behavior
;
; if (enemy_type[index] == ENEMY_BEAR)
;
L3B4F:	ldy     _index
	lda     _enemy_type,y
	cmp     #$02
;
; enemy_bear_behavior();
;
	jeq     _enemy_bear_behavior
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ entity_moves (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_entity_moves: near

.segment	"CODE"

;
; if (entity_type[index] == ENTITY_BUN || entity_type[index] == ENTITY_STARBURST || entity_type[index] == ENTITY_FRUIT)
;
	ldy     _index
	lda     _entity_type,y
	cmp     #$09
	beq     L4006
	ldy     _index
	lda     _entity_type,y
	cmp     #$0B
	beq     L4006
	ldy     _index
	lda     _entity_type,y
	cmp     #$0A
	beq     L4006
	rts
;
; Generic.x = entity_x[index];
;
L4006:	ldy     _index
	lda     _entity_x,y
	sta     _Generic
;
; Generic.y = entity_y[index] - 6; // mid point
;
	ldy     _index
	lda     _entity_y,y
	sec
	sbc     #$06
	sta     _Generic+1
;
; Generic.width = 16;
;
	lda     #$10
	sta     _Generic+2
;
; Generic.height = 1;
;
	lda     #$01
	sta     _Generic+3
;
; bg_collision_fast();
;
	jsr     _bg_collision_fast
;
; if (!collision_D)
;
	lda     _collision_D
	bne     L3A3C
;
; ++entity_y[index];
;
	lda     #<(_entity_y)
	ldx     #>(_entity_y)
	clc
	adc     _index
	bcc     L3A3B
	inx
L3A3B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (entity_y[index] != TURN_OFF && !entity_type[index] == ENTITY_STARBURST || !entity_type[index] == ENTITY_FRUIT)
;
	ldy     _index
	lda     _entity_y,y
	cmp     #$FF
	beq     L3A40
	ldy     _index
	lda     _entity_type,y
	jsr     bnega
	cmp     #$0B
	beq     L3A3D
L3A40:	ldy     _index
	lda     _entity_type,y
	jsr     bnega
	cmp     #$0A
	beq     L3A3D
	rts
;
; ++entity_y[index];
;
L3A3D:	lda     #<(_entity_y)
	ldx     #>(_entity_y)
	clc
	adc     _index
	bcc     L3A48
	inx
L3A48:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; }
;
L3A3C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ reset (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; ppu_off();   // screen off
;
	jsr     _ppu_off
;
; pal_bright(4); // back to normal brightness
;
	lda     #$04
	jsr     _pal_bright
;
; scroll_x = 0;
;
	lda     #$00
	sta     _scroll_x
	sta     _scroll_x+1
;
; scroll_y = 0;
;
	sta     _scroll_y
	sta     _scroll_y+1
;
; map_loaded = 0;
;
	sta     _map_loaded
;
; player_in_air = 0;
;
	sta     _player_in_air
;
; falling_down = 0;
;
	sta     _falling_down
;
; player_on_ladder = 0;
;
	sta     _player_on_ladder
;
; player_running = 0;
;
	sta     _player_running
;
; short_jump_count = 0;
;
	sta     _short_jump_count
;
; multi_jump = 0;
;
	sta     _multi_jump
;
; projectile_cooldown = 0;
;
	sta     _projectile_cooldown
;
; projectile_count = 0;
;
	sta     _projectile_count
;
; projectile_index = 0;
;
	sta     _projectile_index
;
; player_shooting = 0;
;
	sta     _player_shooting
;
; direction = 1;
;
	lda     #$01
	sta     _direction
;
; direction_y = 0; // down default?
;
	lda     #$00
	sta     _direction_y
;
; frame_counter = 0;
;
	sta     _frame_counter
;
; sprite_frame_counter = 0;
;
	sta     _sprite_frame_counter
;
; r_scroll_frames = 0;
;
	sta     _r_scroll_frames
;
; l_scroll_frames = 0;
;
	sta     _l_scroll_frames
;
; collision = 0;
;
	sta     _collision
;
; death = 0;
;
	sta     _death
;
; BoxGuy1.x = 0x4000;
;
	ldx     #$40
	sta     _BoxGuy1
	stx     _BoxGuy1+1
;
; BoxGuy1.y = 0x8400;
;
	ldx     #$84
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; BoxGuy1.health = MAX_PLAYER_HEALTH;
;
	lda     #$1C
	sta     _BoxGuy1+8
;
; invul_frames = 0;
;
	lda     #$00
	sta     _invul_frames
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; level = 3;    // debug, change starting level
;
	lda     #$03
	sta     _level
;
; room_to_load = 0; // debug, hacky, change starting room
;
	lda     #$00
	sta     _room_to_load
;
; debug = 0;
;
	sta     _debug
;
; player_in_hitstun = 0;
;
	sta     _player_in_hitstun
;
; invul_frames = 0;
;
	sta     _invul_frames
;
; nametable_to_load = 0;
;
	sta     _nametable_to_load
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	sta     _temp1
L4007:	lda     _temp1
	cmp     #$03
	bcs     L4008
;
; projectiles_list[temp1] = TURN_OFF;
;
	ldy     _temp1
	lda     #$FF
	sta     _projectiles_list,y
;
; for (temp1 = 0; temp1 < MAX_PROJECTILES; ++temp1)
;
	inc     _temp1
	jmp     L4007
;
; for (temp1 = 0; temp1 < MAX_ENTITY; ++temp1)
;
L4008:	lda     #$00
	sta     _temp1
L4009:	lda     _temp1
	cmp     #$10
	bcs     L400A
;
; entity_y[temp1] = TURN_OFF;
;
	ldy     _temp1
	lda     #$FF
	sta     _entity_y,y
;
; for (temp1 = 0; temp1 < MAX_ENTITY; ++temp1)
;
	inc     _temp1
	jmp     L4009
;
; for (temp1 = 0; temp1 < MAX_ENEMY; ++temp1)
;
L400A:	lda     #$00
	sta     _temp1
L400B:	lda     _temp1
	cmp     #$10
	bcs     L34B2
;
; enemy_y[temp1] = TURN_OFF;
;
	ldy     _temp1
	lda     #$FF
	sta     _enemy_y,y
;
; for (temp1 = 0; temp1 < MAX_ENEMY; ++temp1)
;
	inc     _temp1
	jmp     L400B
;
; ppu_mask(0); // grayscale mode
;
L34B2:	lda     #$00
	jsr     _ppu_mask
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; set_vram_buffer(); // do at least once, sets a pointer to a buffer
;
	jsr     _set_vram_buffer
;
; load_room();
;
	jsr     _load_room
;
; set_scroll_y(0xff); // shift the bg down 1 pixel
;
	ldx     #$00
	lda     #$FF
	jsr     _set_scroll_y
;
; ppu_on_all(); // turn on screen
;
	jmp     _ppu_on_all

.endproc

; ---------------------------------------------------------------
; void __near__ sprite_obj_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sprite_obj_init: near

.segment	"CODE"

;
; pointer = Enemy_list[level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L4012
	inx
	clc
L4012:	adc     #<(_Enemy_list)
	sta     ptr1
	txa
	adc     #>(_Enemy_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _pointer+1
	dey
	lda     (ptr1),y
	sta     _pointer
;
; for (index = 0, index2 = 0; index < MAX_ENEMY; ++index)
;
	tya
	sta     _index
	sta     _index2
L4013:	lda     _index
	cmp     #$10
	jcs     L4015
;
; enemy_x[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_y,y
;
; if (temp1 == TURN_OFF)
;
	lda     _temp1
	cmp     #$FF
;
; break;
;
	jeq     L4015
;
; ++index2;
;
	inc     _index2
;
; enemy_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; enemy_type[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _enemy_type,y
;
; if (enemy_type[index] == ENEMY_SNAIL)
;
	ldy     _index
	lda     _enemy_type,y
	bne     L3D82
;
; enemy_health[index] = ENEMY_SNAIL_HEALTH; // set enemy health here
;
	ldy     _index
	lda     #$02
	sta     _enemy_health,y
;
; if (enemy_type[index] == ENEMY_OWL)
;
L3D82:	ldy     _index
	lda     _enemy_type,y
	cmp     #$01
	bne     L3D8A
;
; enemy_health[index] = ENEMY_OWL_HEALTH; // set enemy health here
;
	ldy     _index
	sta     _enemy_health,y
;
; if (enemy_type[index] == ENEMY_BEAR)
;
L3D8A:	ldy     _index
	lda     _enemy_type,y
	cmp     #$02
	bne     L4014
;
; enemy_health[index] = ENEMY_BEAR_HEALTH; // set enemy health here
;
	ldy     _index
	lda     #$1C
	sta     _enemy_health,y
;
; ++index2;
;
L4014:	inc     _index2
;
; for (index = 0, index2 = 0; index < MAX_ENEMY; ++index)
;
	inc     _index
	jmp     L4013
;
; for (++index; index < MAX_ENEMY; ++index)
;
L4015:	inc     _index
	lda     _index
	cmp     #$10
	bcs     L3D9C
;
; enemy_y[index] = TURN_OFF;
;
	ldy     _index
	lda     #$FF
	sta     _enemy_y,y
;
; enemy_mode[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_mode,y
;
; for (++index; index < MAX_ENEMY; ++index)
;
	jmp     L4015
;
; }
;
L3D9C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ entity_obj_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_entity_obj_init: near

.segment	"CODE"

;
; pointer = entity_list[level];
;
	ldx     #$00
	lda     _level
	asl     a
	bcc     L401B
	inx
	clc
L401B:	adc     #<(_entity_list)
	sta     ptr1
	txa
	adc     #>(_entity_list)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _pointer+1
	dey
	lda     (ptr1),y
	sta     _pointer
;
; for (index = 0; index < MAX_ENTITY; ++index)
;
	sty     _index
L401C:	lda     _index
	cmp     #$10
	bcs     L401D
;
; entity_y[index] = TURN_OFF; // turn off all objects
;
	ldy     _index
	lda     #$FF
	sta     _entity_y,y
;
; for (index = 0; index < MAX_ENTITY; ++index)
;
	inc     _index
	jmp     L401C
;
; for (index = 0, index2 = 0; index < MAX_ENTITY; ++index)
;
L401D:	lda     #$00
	sta     _index
	sta     _index2
L401E:	lda     _index
	cmp     #$10
	bcc     L401F
;
; }
;
	rts
;
; entity_x[index] = 0;
;
L401F:	ldy     _index
	lda     #$00
	sta     _entity_x,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; entity_y[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _entity_y,y
;
; if (temp1 == TURN_OFF)
;
	lda     _temp1
	cmp     #$FF
;
; break;
;
	beq     L3A87
;
; ++index2;
;
	inc     _index2
;
; entity_active[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _entity_active,y
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; entity_room[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _entity_room,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; entity_actual_x[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _entity_actual_x,y
;
; ++index2;
;
	inc     _index2
;
; temp1 = pointer[index2]; // get a byte of data
;
	lda     _pointer
	ldx     _pointer+1
	ldy     _index2
	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	sta     _temp1
;
; entity_type[index] = temp1;
;
	ldy     _index
	lda     _temp1
	sta     _entity_type,y
;
; ++index2;
;
	inc     _index2
;
; for (index = 0, index2 = 0; index < MAX_ENTITY; ++index)
;
	inc     _index
	jmp     L401E
;
; }
;
L3A87:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ init_death (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_death: near

.segment	"CODE"

;
; pal_fade_to(4, 0); // fade to black
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; ppu_off();
;
	jsr     _ppu_off
;
; load_gameover();
;
	jsr     _load_gameover
;
; frame_counter = 0;
;
	lda     #$00
	sta     _frame_counter
;
; scroll_x = 0;
;
	tax
	sta     _scroll_x
	sta     _scroll_x+1
;
; set_scroll_x(0);
;
	jsr     _set_scroll_x
;
; oam_clear();
;
	jsr     _oam_clear
;
; game_mode = MODE_DEATH;
;
	lda     #$03
	sta     _game_mode
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; music_stop();
;
	jsr     _music_stop
;
; sfx_play(SFX_PLAYER_DIES, 0);
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pal_fade_to(0, 4); // fade to black
;
	lda     #$00
	jsr     pusha
	lda     #$04
	jmp     _pal_fade_to

.endproc

; ---------------------------------------------------------------
; void __near__ init_mode_switch (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_mode_switch: near

.segment	"CODE"

;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ level_down_routine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_level_down_routine: near

.segment	"CODE"

;
; pal_fade_to(4, 0); // fade to black
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; ppu_off();
;
	jsr     _ppu_off
;
; game_mode = MODE_SWITCH; // this handles loading the level
;
	lda     #$04
	sta     _game_mode
;
; --level;
;
	dec     _level
;
; level_down = 0;
;
	lda     #$00
	sta     _level_down
;
; max_rooms = level_max_rooms[level] - 1;
;
	ldy     _level
	lda     _level_max_rooms,y
	sec
	sbc     #$01
	sta     _max_rooms
;
; nametable_to_load = max_rooms % 2;
;
	and     #$01
	sta     _nametable_to_load
;
; if (max_rooms > 1)
;
	lda     _max_rooms
	cmp     #$02
	lda     #$00
	bcc     L4022
;
; max_scroll = (max_rooms * 0x100) - 1;
;
	ldx     _max_rooms
	sec
	sbc     #$01
	bcs     L3F1A
	dex
L3F1A:	sta     _max_scroll
	stx     _max_scroll+1
;
; scroll_x = max_scroll;
;
	sta     _scroll_x
	stx     _scroll_x+1
;
; else
;
	jmp     L4023
;
; max_scroll = 0;
;
L4022:	sta     _max_scroll
	sta     _max_scroll+1
;
; scroll_x = 0;
;
	sta     _scroll_x
	sta     _scroll_x+1
;
; room_to_load = max_rooms;
;
L4023:	lda     _max_rooms
	sta     _room_to_load
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ level_up_routine (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_level_up_routine: near

.segment	"CODE"

;
; pal_fade_to(4, 0); // fade to black
;
	lda     #$04
	jsr     pusha
	lda     #$00
	jsr     _pal_fade_to
;
; ppu_off();
;
	jsr     _ppu_off
;
; game_mode = MODE_SWITCH; // this handles loading the level
;
	lda     #$04
	sta     _game_mode
;
; ++level;
;
	inc     _level
;
; level_up = 0;
;
	lda     #$00
	sta     _level_up
;
; max_rooms = level_max_rooms[level] - 1;
;
	ldy     _level
	lda     _level_max_rooms,y
	sec
	sbc     #$01
	sta     _max_rooms
;
; nametable_to_load = 0;
;
	lda     #$00
	sta     _nametable_to_load
;
; scroll_x = 0;
;
	tax
	sta     _scroll_x
	sta     _scroll_x+1
;
; room_to_load = 0;
;
	sta     _room_to_load
;
; if (max_rooms > 1)
;
	lda     _max_rooms
	cmp     #$02
	txa
	bcc     L4026
;
; max_scroll = (max_rooms * 0x100) - 1;
;
	ldx     _max_rooms
	sec
	sbc     #$01
	bcs     L4026
	dex
;
; max_scroll = 0;
;
L4026:	sta     _max_scroll
	stx     _max_scroll+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_snail_behavior (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_snail_behavior: near

.segment	"CODE"

;
; Generic.x = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _Generic
;
; Generic.y = enemy_y[index] + 6; // mid point
;
	ldy     _index
	lda     _enemy_y,y
	clc
	adc     #$06
	sta     _Generic+1
;
; Generic.width = ENEMY_SNAIL_WIDTH;
;
	lda     #$0E
	sta     _Generic+2
;
; Generic.height = ENEMY_SNAIL_HEIGHT;
;
	lda     #$0F
	sta     _Generic+3
;
; if (enemy_frames[index] < 10)
;
	ldy     _index
	lda     _enemy_frames,y
	cmp     #$0A
	bcs     L3BFC
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L4039
;
; enemy_anim[index] = animate_snail1left_data;
;
	lda     _index
	asl     a
	bcc     L4031
	inx
	clc
L4031:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail1left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail1left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3C0B
;
; enemy_anim[index] = animate_snail1right_data;
;
L4039:	lda     _index
	asl     a
	bcc     L4032
	inx
	clc
L4032:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail1right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail1right_data)
	sta     (ptr1),y
;
; else if (enemy_frames[index] < 20)
;
	jmp     L3C0B
L3BFC:	ldy     _index
	lda     _enemy_frames,y
	cmp     #$14
	bcs     L3C0C
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L403A
;
; enemy_anim[index] = animate_snail2left_data;
;
	lda     _index
	asl     a
	bcc     L4033
	inx
	clc
L4033:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail2left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail2left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3C0B
;
; enemy_anim[index] = animate_snail2right_data;
;
L403A:	lda     _index
	asl     a
	bcc     L4034
	inx
	clc
L4034:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail2right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail2right_data)
	sta     (ptr1),y
;
; else if (enemy_frames[index] < 30)
;
	jmp     L3C0B
L3C0C:	ldy     _index
	lda     _enemy_frames,y
	cmp     #$1E
	bcs     L3C1C
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L403B
;
; enemy_anim[index] = animate_snail3left_data;
;
	lda     _index
	asl     a
	bcc     L4035
	inx
	clc
L4035:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail3left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail3left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3C0B
;
; enemy_anim[index] = animate_snail3right_data;
;
L403B:	lda     _index
	asl     a
	bcc     L4036
	inx
	clc
L4036:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail3right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail3right_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3C0B
;
; if (enemy_dir[index] == LEFT)
;
L3C1C:	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L403C
;
; enemy_anim[index] = animate_snail3left_data;
;
	lda     _index
	asl     a
	bcc     L4037
	inx
	clc
L4037:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail3left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail3left_data)
;
; else
;
	jmp     L403D
;
; enemy_anim[index] = animate_snail3right_data;
;
L403C:	lda     _index
	asl     a
	bcc     L4038
	inx
	clc
L4038:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_snail3right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_snail3right_data)
L403D:	sta     (ptr1),y
;
; enemy_frames[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_frames,y
;
; if (enemy_frames[index] % 3 == 0)
;
L3C0B:	ldy     _index
	lda     _enemy_frames,y
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	cpx     #$00
	beq     L403F
;
; }
;
	rts
;
; if (enemy_frames[index] % 3 == 0)
;
L403F:	cmp     #$00
	beq     L4040
;
; }
;
	rts
;
; if (enemy_mode[index] == 0)
;
L4040:	ldy     _index
	lda     _enemy_mode,y
	bne     L3C40
;
; Generic.x -= 1; // test going left
;
	dec     _Generic
;
; bg_collision_fast();
;
	jsr     _bg_collision_fast
;
; if (collision_L)
;
	lda     _collision_L
	beq     L3C47
;
; enemy_mode[index] = 1;
;
	ldy     _index
	lda     #$01
;
; return;
;
	jmp     L4030
;
; if (collision_D) // needs ground under it
;
L3C47:	lda     _collision_D
	beq     L3C4D
;
; if (enemy_actual_x[index] == 0)
;
	ldy     _index
	lda     _enemy_actual_x,y
	bne     L3C4F
;
; --enemy_room[index];
;
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L3C55
	inx
L3C55:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; --enemy_actual_x[index];
;
L3C4F:	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L3C58
	inx
L3C58:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; enemy_dir[index] = LEFT;
;
	ldy     _index
	lda     #$00
	sta     _enemy_dir,y
;
; else
;
	rts
;
; enemy_mode[index] = 1;
;
L3C4D:	ldy     _index
	lda     #$01
;
; else if (enemy_mode[index] == 1)
;
	jmp     L4030
L3C40:	ldy     _index
	lda     _enemy_mode,y
	cmp     #$01
	bne     L3C80
;
; Generic.x += 1; // test going right
;
	inc     _Generic
;
; bg_collision_fast();
;
	jsr     _bg_collision_fast
;
; if (collision_R)
;
	lda     _collision_R
;
; return;
;
	bne     L3C70
;
; if (collision_D)
;
	lda     _collision_D
	beq     L3C70
;
; ++enemy_actual_x[index];
;
	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L3C74
	inx
L3C74:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (enemy_actual_x[index] == 0)
;
	ldy     _index
	lda     _enemy_actual_x,y
	bne     L3C75
;
; ++enemy_room[index];
;
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L3C7B
	inx
L3C7B:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; enemy_dir[index] = RIGHT;
;
L3C75:	ldy     _index
	lda     #$01
	sta     _enemy_dir,y
;
; else
;
	rts
;
; enemy_mode[index] = 0;
;
L3C70:	ldy     _index
	lda     #$00
L4030:	sta     _enemy_mode,y
;
; }
;
L3C80:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_owl_behavior (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_owl_behavior: near

.segment	"CODE"

;
; if (enemy_x[index] > Generic2.x      // enemy right of player
;
	ldy     _index
	lda     _enemy_x,y
;
; && enemy_x[index] - Generic2.x < 50) // and close
;
	sec
	sbc     _Generic2
	bcc     L3C86
	beq     L3C86
	ldy     _index
	lda     _enemy_x,y
	sec
	sbc     _Generic2
	cmp     #$32
	bcs     L3C86
;
; enemy_mode[index] = 1;
;
	ldy     _index
	lda     #$01
	sta     _enemy_mode,y
;
; if (enemy_x[index] < Generic2.x      // enemy left of player
;
L3C86:	ldy     _index
	lda     _enemy_x,y
;
; && Generic2.x - enemy_x[index] < 50) // and close
;
	cmp     _Generic2
	bcs     L3C93
	lda     _Generic2
	jsr     pusha0
	ldy     _index
	lda     _enemy_x,y
	jsr     tossuba0
	cpx     #$00
	bne     L3C9A
	cmp     #$32
L3C9A:	bcs     L3C93
;
; enemy_mode[index] = 1;
;
	ldy     _index
	lda     #$01
	sta     _enemy_mode,y
;
; if (enemy_mode[index] == 0)
;
L3C93:	ldy     _index
	lda     _enemy_mode,y
	bne     L3CA0
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	tax
	lda     _enemy_dir,y
	bne     L4065
;
; enemy_anim[index] = animate_hootyowl5left_data;
;
	lda     _index
	asl     a
	bcc     L4053
	inx
	clc
L4053:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl5left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl5left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3CAF
;
; enemy_anim[index] = animate_hootyowl5right_data;
;
L4065:	lda     _index
	asl     a
	bcc     L4054
	inx
	clc
L4054:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl5right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl5right_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3CAF
;
; if (enemy_frames[index] < 4)
;
L3CA0:	ldy     _index
	lda     _enemy_frames,y
	cmp     #$04
	bcs     L3CB0
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L4066
;
; enemy_anim[index] = animate_hootyowl1left_data;
;
	lda     _index
	asl     a
	bcc     L4055
	inx
	clc
L4055:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl1left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl1left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3CAF
;
; enemy_anim[index] = animate_hootyowl1right_data;
;
L4066:	lda     _index
	asl     a
	bcc     L4056
	inx
	clc
L4056:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl1right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl1right_data)
	sta     (ptr1),y
;
; else if (enemy_frames[index] < 8)
;
	jmp     L3CAF
L3CB0:	ldy     _index
	lda     _enemy_frames,y
	cmp     #$08
	bcs     L3CC0
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L4067
;
; enemy_anim[index] = animate_hootyowl2left_data;
;
	lda     _index
	asl     a
	bcc     L4057
	inx
	clc
L4057:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl2left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl2left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3CAF
;
; enemy_anim[index] = animate_hootyowl2right_data;
;
L4067:	lda     _index
	asl     a
	bcc     L4058
	inx
	clc
L4058:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl2right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl2right_data)
	sta     (ptr1),y
;
; else if (enemy_frames[index] < 12)
;
	jmp     L3CAF
L3CC0:	ldy     _index
	lda     _enemy_frames,y
	cmp     #$0C
	bcs     L3CD0
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L4068
;
; enemy_anim[index] = animate_hootyowl3left_data;
;
	lda     _index
	asl     a
	bcc     L4059
	inx
	clc
L4059:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl3left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl3left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3CAF
;
; enemy_anim[index] = animate_hootyowl3right_data;
;
L4068:	lda     _index
	asl     a
	bcc     L405A
	inx
	clc
L405A:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl3right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl3right_data)
	sta     (ptr1),y
;
; else if (enemy_frames[index] < 16)
;
	jmp     L3CAF
L3CD0:	ldy     _index
	lda     _enemy_frames,y
	cmp     #$10
	bcs     L3CE0
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L4069
;
; enemy_anim[index] = animate_hootyowl4left_data;
;
	lda     _index
	asl     a
	bcc     L405B
	inx
	clc
L405B:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl4left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl4left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3CAF
;
; enemy_anim[index] = animate_hootyowl4right_data;
;
L4069:	lda     _index
	asl     a
	bcc     L405C
	inx
	clc
L405C:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl4right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl4right_data)
	sta     (ptr1),y
;
; else if (enemy_frames[index] < 20)
;
	jmp     L3CAF
L3CE0:	ldy     _index
	lda     _enemy_frames,y
	cmp     #$14
	bcs     L3CF0
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L406A
;
; enemy_anim[index] = animate_hootyowl3left_data;
;
	lda     _index
	asl     a
	bcc     L405D
	inx
	clc
L405D:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl3left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl3left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3CAF
;
; enemy_anim[index] = animate_hootyowl3right_data;
;
L406A:	lda     _index
	asl     a
	bcc     L405E
	inx
	clc
L405E:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl3right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl3right_data)
	sta     (ptr1),y
;
; else if (enemy_frames[index] < 24)
;
	jmp     L3CAF
L3CF0:	ldy     _index
	lda     _enemy_frames,y
	cmp     #$18
	bcs     L3D00
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L406B
;
; enemy_anim[index] = animate_hootyowl2left_data;
;
	lda     _index
	asl     a
	bcc     L405F
	inx
	clc
L405F:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl2left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl2left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3CAF
;
; enemy_anim[index] = animate_hootyowl2right_data;
;
L406B:	lda     _index
	asl     a
	bcc     L4060
	inx
	clc
L4060:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl2right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl2right_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3CAF
;
; if (enemy_dir[index] == LEFT)
;
L3D00:	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L406C
;
; enemy_anim[index] = animate_hootyowl1left_data;
;
	lda     _index
	asl     a
	bcc     L4061
	inx
	clc
L4061:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl1left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl1left_data)
;
; else
;
	jmp     L406D
;
; enemy_anim[index] = animate_hootyowl1right_data;
;
L406C:	lda     _index
	asl     a
	bcc     L4062
	inx
	clc
L4062:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_hootyowl1right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_hootyowl1right_data)
L406D:	sta     (ptr1),y
;
; enemy_frames[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_frames,y
;
; if (enemy_mode[index] == 1) // he moves every 3 frames after activated
;
L3CAF:	ldy     _index
	lda     _enemy_mode,y
	cmp     #$01
	beq     L406E
;
; }
;
	rts
;
; ++enemy_y[index];
;
L406E:	lda     #<(_enemy_y)
	ldx     #>(_enemy_y)
	clc
	adc     _index
	bcc     L3D25
	inx
L3D25:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (enemy_x[index] > Generic2.x) // enemy is right of player
;
	ldy     _index
	lda     _enemy_x,y
	sec
	sbc     _Generic2
	bcc     L3D26
	beq     L3D26
;
; if (enemy_actual_x[index] == 0)
;
	ldy     _index
	lda     _enemy_actual_x,y
	bne     L3D2A
;
; --enemy_room[index]; // I think there's a bug here
;
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L3D30
	inx
L3D30:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; --enemy_actual_x[index];
;
L3D2A:	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L3D33
	inx
L3D33:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; enemy_dir[index] = LEFT;
;
	ldy     _index
	lda     #$00
;
; else if (enemy_x[index] < Generic2.x) // enemy is left of player
;
	jmp     L4052
L3D26:	ldy     _index
	lda     _enemy_x,y
	cmp     _Generic2
	bcs     L3D39
;
; ++enemy_actual_x[index];
;
	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L3D3F
	inx
L3D3F:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (enemy_actual_x[index] == 0)
;
	ldy     _index
	lda     _enemy_actual_x,y
	bne     L3D40
;
; ++enemy_room[index]; // I think there's a bug here
;
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L3D46
	inx
L3D46:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; enemy_dir[index] = RIGHT;
;
L3D40:	ldy     _index
	lda     #$01
L4052:	sta     _enemy_dir,y
;
; }
;
L3D39:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ enemy_bear_behavior (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_enemy_bear_behavior: near

.segment	"CODE"

;
; Generic.x = enemy_x[index];
;
	ldy     _index
	lda     _enemy_x,y
	sta     _Generic
;
; Generic.y = enemy_y[index] + 6; // mid point
;
	ldy     _index
	lda     _enemy_y,y
	clc
	adc     #$06
	sta     _Generic+1
;
; Generic.width = ENEMY_BEAR_WIDTH;
;
	lda     #$0E
	sta     _Generic+2
;
; Generic.height = ENEMY_BEAR_HEIGHT;
;
	lda     #$20
	sta     _Generic+3
;
; if (enemy_frames[index] < 10)
;
	ldy     _index
	lda     _enemy_frames,y
	cmp     #$0A
	bcs     L3B67
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L4085
;
; enemy_anim[index] = animate_bearwalk1eft_data;
;
	lda     _index
	asl     a
	bcc     L407B
	inx
	clc
L407B:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_bearwalk1eft_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_bearwalk1eft_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3B76
;
; enemy_anim[index] = animate_bearwalkright_data;
;
L4085:	lda     _index
	asl     a
	bcc     L407C
	inx
	clc
L407C:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_bearwalkright_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_bearwalkright_data)
	sta     (ptr1),y
;
; else if (enemy_frames[index] < 20)
;
	jmp     L3B76
L3B67:	ldy     _index
	lda     _enemy_frames,y
	cmp     #$14
	bcs     L3B77
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L4086
;
; enemy_anim[index] = animate_bearwalk2left_data;
;
	lda     _index
	asl     a
	bcc     L407D
	inx
	clc
L407D:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_bearwalk2left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_bearwalk2left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3B76
;
; enemy_anim[index] = animate_bearwalk2right_data;
;
L4086:	lda     _index
	asl     a
	bcc     L407E
	inx
	clc
L407E:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_bearwalk2right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_bearwalk2right_data)
	sta     (ptr1),y
;
; else if (enemy_frames[index] < 30)
;
	jmp     L3B76
L3B77:	ldy     _index
	lda     _enemy_frames,y
	cmp     #$1E
	bcs     L3B87
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L4087
;
; enemy_anim[index] = animate_bearwalk3left_data;
;
	lda     _index
	asl     a
	bcc     L407F
	inx
	clc
L407F:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_bearwalk3left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_bearwalk3left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3B76
;
; enemy_anim[index] = animate_bearwalk3right_data;
;
L4087:	lda     _index
	asl     a
	bcc     L4080
	inx
	clc
L4080:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_bearwalk3right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_bearwalk3right_data)
	sta     (ptr1),y
;
; else if (enemy_frames[index] < 40)
;
	jmp     L3B76
L3B87:	ldy     _index
	lda     _enemy_frames,y
	cmp     #$28
	bcs     L3B97
;
; if (enemy_dir[index] == LEFT)
;
	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L4088
;
; enemy_anim[index] = animate_bearwalk2left_data;
;
	lda     _index
	asl     a
	bcc     L4081
	inx
	clc
L4081:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_bearwalk2left_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_bearwalk2left_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3B76
;
; enemy_anim[index] = animate_bearwalk2right_data;
;
L4088:	lda     _index
	asl     a
	bcc     L4082
	inx
	clc
L4082:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_bearwalk2right_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_bearwalk2right_data)
	sta     (ptr1),y
;
; else
;
	jmp     L3B76
;
; if (enemy_dir[index] == LEFT)
;
L3B97:	ldy     _index
	ldx     #$00
	lda     _enemy_dir,y
	bne     L4089
;
; enemy_anim[index] = animate_bearwalk1eft_data;
;
	lda     _index
	asl     a
	bcc     L4083
	inx
	clc
L4083:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_bearwalk1eft_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_bearwalk1eft_data)
;
; else
;
	jmp     L408A
;
; enemy_anim[index] = animate_bearwalkright_data;
;
L4089:	lda     _index
	asl     a
	bcc     L4084
	inx
	clc
L4084:	adc     #<(_enemy_anim)
	sta     ptr1
	txa
	adc     #>(_enemy_anim)
	sta     ptr1+1
	lda     #<(_animate_bearwalkright_data)
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #>(_animate_bearwalkright_data)
L408A:	sta     (ptr1),y
;
; enemy_frames[index] = 0;
;
	ldy     _index
	lda     #$00
	sta     _enemy_frames,y
;
; if (enemy_frames[index] % 3 == 0)
;
L3B76:	ldy     _index
	lda     _enemy_frames,y
	jsr     pusha0
	lda     #$03
	jsr     tosumoda0
	cpx     #$00
	beq     L408B
;
; }
;
	rts
;
; if (enemy_frames[index] % 3 == 0)
;
L408B:	cmp     #$00
	beq     L408C
;
; }
;
	rts
;
; if (enemy_x[index] > Generic2.x)
;
L408C:	ldy     _index
	lda     _enemy_x,y
	sec
	sbc     _Generic2
	bcc     L3BBB
	beq     L3BBB
;
; Generic.x -= 1; // test going left
;
	dec     _Generic
;
; bg_collision_fast();
;
	jsr     _bg_collision_fast
;
; if (collision_L)
;
	lda     _collision_L
;
; return;
;
	beq     L408D
;
; }
;
	rts
;
; if (collision_D) // needs ground under it
;
L408D:	lda     _collision_D
	bne     L408E
;
; }
;
	rts
;
; if (enemy_actual_x[index] == 0)
;
L408E:	ldy     _index
	lda     _enemy_actual_x,y
	bne     L3BC6
;
; --enemy_room[index];
;
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L3BCC
	inx
L3BCC:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; --enemy_actual_x[index];
;
L3BC6:	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L3BCF
	inx
L3BCF:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; enemy_dir[index] = LEFT;
;
	ldy     _index
	lda     #$00
;
; else if (enemy_x[index] < Generic2.x)
;
	jmp     L407A
L3BBB:	ldy     _index
	lda     _enemy_x,y
	cmp     _Generic2
	bcs     L3BDE
;
; Generic.x += 1; // test going right
;
	inc     _Generic
;
; bg_collision_fast();
;
	jsr     _bg_collision_fast
;
; if (collision_R)
;
	lda     _collision_R
;
; return;
;
	bne     L3BDE
;
; if (collision_D)
;
	lda     _collision_D
	beq     L3BDE
;
; ++enemy_actual_x[index];
;
	lda     #<(_enemy_actual_x)
	ldx     #>(_enemy_actual_x)
	clc
	adc     _index
	bcc     L3BE2
	inx
L3BE2:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; if (enemy_actual_x[index] == 0)
;
	ldy     _index
	lda     _enemy_actual_x,y
	bne     L3BE3
;
; ++enemy_room[index];
;
	lda     #<(_enemy_room)
	ldx     #>(_enemy_room)
	clc
	adc     _index
	bcc     L3BE9
	inx
L3BE9:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; enemy_dir[index] = RIGHT;
;
L3BE3:	ldy     _index
	lda     #$01
L407A:	sta     _enemy_dir,y
;
; }
;
L3BDE:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_L (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_L: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; eject_L = temp_x | 0xf0;
;
	lda     _temp_x
	ora     #$F0
	sta     _eject_L
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L4090
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L4090:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L4092
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L4092:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_R (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_R: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + Generic.width;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L4093
	inx
L4093:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; eject_R = (temp_x + 1) & 0x0f;
;
	lda     _temp_x
	clc
	adc     #$01
	and     #$0F
	sta     _eject_R
;
; temp_y = Generic.y + 2;
;
	lda     _Generic+1
	clc
	adc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L4095
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp_y = Generic.y + Generic.height;
;
L4095:	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L4097
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L4097:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_U (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_U: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L2CC3
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2CC3:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y;
;
	lda     _Generic+1
	sta     _temp_y
;
; eject_U = temp_y | 0xf0;
;
	ora     #$F0
	sta     _eject_U
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L4099
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L4099:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L4098
	inx
L4098:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L2CD3
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2CD3:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$40
	beq     L409B
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L409B:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L2CE1
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2CE1:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; if ((temp_y & 0x0f) > 3)
;
	and     #$0F
	cmp     #$04
	lda     #$00
	bcc     L40A1
;
; return 0; // bug fix
;
	tax
	rts
;
; eject_D = (temp_y + 1) & 0x0f;
;
L40A1:	lda     _temp_y
	clc
	adc     #$01
	and     #$0F
	sta     _eject_D
;
; if (bg_collision_sub() & COL_ALL || ((bg_collision_sub() & COL_LADDER_TOP) && !player_on_ladder))
;
	jsr     _bg_collision_sub
	and     #$40
	bne     L40A7
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$02
	beq     L40AB
	lda     _player_on_ladder
	beq     L40B6
	jmp     L40AB
;
; return 1;
;
L40A7:	ldx     #$00
L40B6:	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L40AB:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	txa
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L409D
	inx
L409D:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L2CFC
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2CFC:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub() & COL_ALL || ((bg_collision_sub() & COL_LADDER_TOP) && !player_on_ladder))
;
	jsr     _bg_collision_sub
	and     #$40
	bne     L40B1
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$02
	beq     L40B0
	lda     _player_on_ladder
	beq     L40B7
	txa
	rts
L40B0:	rts
;
; return 1;
;
L40B1:	ldx     #$00
L40B7:	lda     #$01
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_D2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_D2: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x;
;
	lda     _Generic
	clc
	adc     _scroll_x
	sta     _temp5
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
;
; temp5 += 2;
;
	lda     #$02
	clc
	adc     _temp5
	sta     _temp5
	bcc     L2D0F
	inc     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2D0F:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y += 2;
;
	lda     #$02
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L40BA
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; temp5 = Generic.x + scroll_x + Generic.width;
;
L40BA:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	txa
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     _Generic+2
	bcc     L40B9
	inx
L40B9:	sta     _temp5
	stx     _temp5+1
;
; temp5 -= 2;
;
	lda     _temp5
	sec
	sbc     #$02
	sta     _temp5
	bcs     L2D1F
	dec     _temp5+1
;
; temp_x = (char)temp5;   // low byte
;
L2D1F:	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte
;
	lda     _temp5+1
	sta     _temp_room
;
; if (bg_collision_sub())
;
	jsr     _bg_collision_sub
	tax
	beq     L40BC
;
; return 1;
;
	ldx     #$00
	lda     #$01
	rts
;
; }
;
L40BC:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_position (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_position: near

.segment	"CODE"

;
; temp5 -= scroll_x;
;
	lda     _scroll_x
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     _scroll_x+1
	eor     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = temp5 & 0xff;
;
	lda     _temp5
	ldx     #$00
	sta     _temp_x
;
; if (high_byte(temp5))
;
	lda     _temp5+1
	beq     L40BD
;
; return 0;
;
	txa
	rts
;
; return 1;
;
L40BD:	lda     #$01
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ bg_collision_fast (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_collision_fast: near

.segment	"CODE"

;
; collision_L = 0;
;
	lda     #$00
	sta     _collision_L
;
; collision_R = 0;
;
	sta     _collision_R
;
; collision_D = 0;
;
	sta     _collision_D
;
; if (Generic.y >= 0xf0)
;
	lda     _Generic+1
	cmp     #$F0
;
; return;
;
	bcc     L40C0
;
; }
;
	rts
;
; temp5 = Generic.x + scroll_x;
;
L40C0:	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	sta     _temp5+1
	pla
	sta     _temp5
;
; temp_x = temp5 & 0xff;  // low byte x
;
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp_room
;
; temp_y = Generic.y + 6; // y middle
;
	lda     _Generic+1
	clc
	adc     #$06
	sta     _temp_y
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L40BE
;
; ++collision_L;
;
	inc     _collision_L
;
; temp5 += Generic.width;
;
L40BE:	lda     _Generic+2
	clc
	adc     _temp5
	sta     _temp5
	lda     #$00
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = temp5 & 0xff;  // low byte x
;
	lda     _temp5
	sta     _temp_x
;
; temp_room = temp5 >> 8; // high byte x
;
	lda     _temp5+1
	sta     _temp_room
;
; bg_collision_sub();
;
	jsr     _bg_collision_sub
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L40BF
;
; ++collision_R;
;
	inc     _collision_R
;
; temp5 -= (Generic.width >> 1); // middle of character
;
L40BF:	lda     _Generic+2
	lsr     a
	eor     #$FF
	sec
	adc     _temp5
	sta     _temp5
	lda     #$FF
	adc     _temp5+1
	sta     _temp5+1
;
; temp_x = (char)temp5;          // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_y += 6;
;
	lda     #$06
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (bg_collision_sub() & COL_ALL)
;
	jsr     _bg_collision_sub
	and     #$40
	beq     L2C60
;
; ++collision_D;
;
	inc     _collision_D
;
; }
;
L2C60:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_ladder (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_ladder: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + 7;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     #$07
	bcc     L2C96
	inx
L2C96:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_LADDER || bg_collision_sub() & COL_LADDER_TOP)
;
	jsr     _bg_collision_sub
	and     #$01
	bne     L40C2
	jsr     _bg_collision_sub
	and     #$02
	bne     L40C2
	tax
	rts
;
; return temp5;
;
L40C2:	ldx     #$00
	lda     _temp5
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_ladder_top_at_player (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_ladder_top_at_player: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + 7;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     #$07
	bcc     L2CA5
	inx
L2CA5:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y -= 2;
;
	sec
	sbc     #$02
	sta     _temp_y
;
; if (bg_collision_sub() & COL_LADDER)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$01
	beq     L40C7
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L40C7:	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ bg_coll_ladder_top_under_player (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_bg_coll_ladder_top_under_player: near

.segment	"CODE"

;
; temp5 = Generic.x + scroll_x + 7;
;
	lda     _Generic
	clc
	adc     _scroll_x
	pha
	lda     #$00
	adc     _scroll_x+1
	tax
	pla
	clc
	adc     #$07
	bcc     L2CB3
	inx
L2CB3:	sta     _temp5
	stx     _temp5+1
;
; temp_x = (char)temp5; // low byte
;
	lda     _temp5
	sta     _temp_x
;
; temp_y = Generic.y + Generic.height;
;
	lda     _Generic+1
	clc
	adc     _Generic+3
	sta     _temp_y
;
; temp_y += 4;
;
	lda     #$04
	clc
	adc     _temp_y
	sta     _temp_y
;
; if (bg_collision_sub() & COL_LADDER_TOP)
;
	jsr     _bg_collision_sub
	ldx     #$00
	and     #$02
	beq     L40CA
;
; return 1;
;
	lda     #$01
	rts
;
; }
;
L40CA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_health_meter (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_health_meter: near

.segment	"CODE"

;
; switch (temp)
;
	lda     _temp
;
; }
;
	cmp     #$01
	jeq     L2DB1
	cmp     #$02
	jeq     L2DAD
	cmp     #$03
	jeq     L2DA9
	cmp     #$04
	jeq     L2DA5
	cmp     #$05
	jeq     L2DA1
	cmp     #$06
	jeq     L2D9D
	cmp     #$07
	jeq     L2D99
	cmp     #$08
	jeq     L2D95
	cmp     #$09
	jeq     L2D91
	cmp     #$0A
	jeq     L2D8D
	cmp     #$0B
	jeq     L2D89
	cmp     #$0C
	jeq     L2D85
	cmp     #$0D
	jeq     L2D81
	cmp     #$0E
	jeq     L2D7D
	cmp     #$0F
	jeq     L2D79
	cmp     #$10
	jeq     L2D75
	cmp     #$11
	jeq     L2D71
	cmp     #$12
	jeq     L2D6D
	cmp     #$13
	jeq     L2D69
	cmp     #$14
	beq     L2D65
	cmp     #$15
	beq     L2D61
	cmp     #$16
	beq     L2D5D
	cmp     #$17
	beq     L2D59
	cmp     #$18
	beq     L2D55
	cmp     #$19
	beq     L2D51
	cmp     #$1A
	beq     L2D4D
	cmp     #$1B
	beq     L2D49
	cmp     #$1C
	jne     L2DB4
;
; tempint2 = animate_meter28_data;
;
	lda     #>(_animate_meter28_data)
	sta     _tempint2+1
	lda     #<(_animate_meter28_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter27_data;
;
L2D49:	lda     #>(_animate_meter27_data)
	sta     _tempint2+1
	lda     #<(_animate_meter27_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter26_data;
;
L2D4D:	lda     #>(_animate_meter26_data)
	sta     _tempint2+1
	lda     #<(_animate_meter26_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter25_data;
;
L2D51:	lda     #>(_animate_meter25_data)
	sta     _tempint2+1
	lda     #<(_animate_meter25_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter24_data;
;
L2D55:	lda     #>(_animate_meter24_data)
	sta     _tempint2+1
	lda     #<(_animate_meter24_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter23_data;
;
L2D59:	lda     #>(_animate_meter23_data)
	sta     _tempint2+1
	lda     #<(_animate_meter23_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter22_data;
;
L2D5D:	lda     #>(_animate_meter22_data)
	sta     _tempint2+1
	lda     #<(_animate_meter22_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter21_data;
;
L2D61:	lda     #>(_animate_meter21_data)
	sta     _tempint2+1
	lda     #<(_animate_meter21_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter20_data;
;
L2D65:	lda     #>(_animate_meter20_data)
	sta     _tempint2+1
	lda     #<(_animate_meter20_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter19_data;
;
L2D69:	lda     #>(_animate_meter19_data)
	sta     _tempint2+1
	lda     #<(_animate_meter19_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter18_data;
;
L2D6D:	lda     #>(_animate_meter18_data)
	sta     _tempint2+1
	lda     #<(_animate_meter18_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter17_data;
;
L2D71:	lda     #>(_animate_meter17_data)
	sta     _tempint2+1
	lda     #<(_animate_meter17_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter16_data;
;
L2D75:	lda     #>(_animate_meter16_data)
	sta     _tempint2+1
	lda     #<(_animate_meter16_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter15_data;
;
L2D79:	lda     #>(_animate_meter15_data)
	sta     _tempint2+1
	lda     #<(_animate_meter15_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter14_data;
;
L2D7D:	lda     #>(_animate_meter14_data)
	sta     _tempint2+1
	lda     #<(_animate_meter14_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter13_data;
;
L2D81:	lda     #>(_animate_meter13_data)
	sta     _tempint2+1
	lda     #<(_animate_meter13_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter12_data;
;
L2D85:	lda     #>(_animate_meter12_data)
	sta     _tempint2+1
	lda     #<(_animate_meter12_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter11_data;
;
L2D89:	lda     #>(_animate_meter11_data)
	sta     _tempint2+1
	lda     #<(_animate_meter11_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter10_data;
;
L2D8D:	lda     #>(_animate_meter10_data)
	sta     _tempint2+1
	lda     #<(_animate_meter10_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter9_data;
;
L2D91:	lda     #>(_animate_meter9_data)
	sta     _tempint2+1
	lda     #<(_animate_meter9_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter8_data;
;
L2D95:	lda     #>(_animate_meter8_data)
	sta     _tempint2+1
	lda     #<(_animate_meter8_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter7_data;
;
L2D99:	lda     #>(_animate_meter7_data)
	sta     _tempint2+1
	lda     #<(_animate_meter7_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter6_data;
;
L2D9D:	lda     #>(_animate_meter6_data)
	sta     _tempint2+1
	lda     #<(_animate_meter6_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter5_data;
;
L2DA1:	lda     #>(_animate_meter5_data)
	sta     _tempint2+1
	lda     #<(_animate_meter5_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter4_data;
;
L2DA5:	lda     #>(_animate_meter4_data)
	sta     _tempint2+1
	lda     #<(_animate_meter4_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter3_data;
;
L2DA9:	lda     #>(_animate_meter3_data)
	sta     _tempint2+1
	lda     #<(_animate_meter3_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter2_data;
;
L2DAD:	lda     #>(_animate_meter2_data)
	sta     _tempint2+1
	lda     #<(_animate_meter2_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter1_data;
;
L2DB1:	lda     #>(_animate_meter1_data)
	sta     _tempint2+1
	lda     #<(_animate_meter1_data)
;
; break;
;
	jmp     L40CB
;
; tempint2 = animate_meter0_data;
;
L2DB4:	lda     #>(_animate_meter0_data)
	sta     _tempint2+1
	lda     #<(_animate_meter0_data)
L40CB:	sta     _tempint2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player_sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player_sprites: near

.segment	"CODE"

;
; temp = BoxGuy1.health;
;
	lda     _BoxGuy1+8
	sta     _temp
;
; draw_health_meter();
;
	jsr     _draw_health_meter
;
; oam_meta_spr(0x16, 0x16, tempint2);
;
	jsr     decsp2
	lda     #$16
	ldy     #$01
	sta     (sp),y
	dey
	sta     (sp),y
	lda     _tempint2
	ldx     _tempint2+1
	jsr     _oam_meta_spr
;
; temp_x = BoxGuy1.x >> 8;
;
	lda     _BoxGuy1+1
	sta     _temp_x
;
; temp_y = BoxGuy1.y >> 8;
;
	lda     _BoxGuy1+3
	sta     _temp_y
;
; if (temp_x == 0)
;
	lda     _temp_x
	bne     L40D5
;
; temp_x = 1;
;
	lda     #$01
	sta     _temp_x
;
; if (temp_y == 0)
;
L40D5:	lda     _temp_y
	bne     L40D6
;
; temp_y = 1;
;
	lda     #$01
	sta     _temp_y
;
; ++sprite_frame_counter;
;
L40D6:	inc     _sprite_frame_counter
;
; if (invul_frames > 0)
;
	lda     _invul_frames
	beq     L40D7
;
; if ((frame_counter % TOTAL_DURATION) < FLASH_DURATION)
;
	lda     _frame_counter
	jsr     pusha0
	lda     #$14
	jsr     tosumoda0
	cpx     #$00
	bne     L2DD1
	cmp     #$04
;
; return;
;
L2DD1:	bcs     L40D7
;
; }
;
	rts
;
; if (player_shooting > 0)
;
L40D7:	lda     _player_shooting
	beq     L2DD2
;
; --player_shooting;
;
	dec     _player_shooting
;
; if (player_in_hitstun)
;
L2DD2:	lda     _player_in_hitstun
	beq     L2DD5
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L40D8
;
; if (sprite_frame_counter < 8)
;
	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L2DD9
;
; tempint = animate_skeletonleft_data;
;
	lda     #>(_animate_skeletonleft_data)
	sta     _tempint+1
	lda     #<(_animate_skeletonleft_data)
	sta     _tempint
;
; else
;
	jmp     L2DEC
;
; tempint = animate_recoilleft_data;
;
L2DD9:	lda     #>(_animate_recoilleft_data)
	sta     _tempint+1
	lda     #<(_animate_recoilleft_data)
;
; else
;
	jmp     L40E4
;
; if (sprite_frame_counter < 8)
;
L40D8:	lda     _sprite_frame_counter
	cmp     #$08
	bcs     L2DE5
;
; tempint = animate_skeletonright_data;
;
	lda     #>(_animate_skeletonright_data)
	sta     _tempint+1
	lda     #<(_animate_skeletonright_data)
	sta     _tempint
;
; else
;
	jmp     L2DEC
;
; tempint = animate_recoilright_data;
;
L2DE5:	lda     #>(_animate_recoilright_data)
	sta     _tempint+1
	lda     #<(_animate_recoilright_data)
L40E4:	sta     _tempint
;
; if(sprite_frame_counter > 16){
;
	lda     _sprite_frame_counter
	cmp     #$11
	bcc     L2DEC
;
; sprite_frame_counter = 0;
;
	lda     #$00
	sta     _sprite_frame_counter
;
; oam_meta_spr(temp_x, temp_y, tempint);
;
L2DEC:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _tempint
	ldx     _tempint+1
	jmp     _oam_meta_spr
;
; else if (player_in_air)
;
L2DD5:	lda     _player_in_air
	beq     L2DF5
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2DF7
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2DF9
;
; tempint = animate_playerjumpleftshoot_data;
;
	lda     #>(_animate_playerjumpleftshoot_data)
	sta     _tempint+1
	lda     #<(_animate_playerjumpleftshoot_data)
;
; else
;
	jmp     L40CD
;
; tempint = animate_playerjumpleft_data;
;
L2DF9:	lda     #>(_animate_playerjumpleft_data)
	sta     _tempint+1
	lda     #<(_animate_playerjumpleft_data)
;
; else
;
	jmp     L40CD
;
; if (player_shooting)
;
L2DF7:	lda     _player_shooting
	beq     L2E01
;
; tempint = animate_playerjumprightshoot_data;
;
	lda     #>(_animate_playerjumprightshoot_data)
	sta     _tempint+1
	lda     #<(_animate_playerjumprightshoot_data)
;
; else
;
	jmp     L40CD
;
; tempint = animate_playerjumpright_data;
;
L2E01:	lda     #>(_animate_playerjumpright_data)
	sta     _tempint+1
	lda     #<(_animate_playerjumpright_data)
L40CD:	sta     _tempint
;
; oam_meta_spr(temp_x, temp_y, tempint);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _tempint
	ldx     _tempint+1
	jmp     _oam_meta_spr
;
; else if (player_on_ladder)
;
L2DF5:	lda     _player_on_ladder
	jeq     L2E0D
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2E0F
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2E11
;
; tempint = animate_playerclimbshootleft_data;
;
	lda     #>(_animate_playerclimbshootleft_data)
	sta     _tempint+1
	lda     #<(_animate_playerclimbshootleft_data)
	sta     _tempint
;
; player_on_ladder_pose = 0;
;
	lda     #$00
;
; else
;
	jmp     L40CE
;
; tempint = animate_playerclimbshootright_data;
;
L2E11:	lda     #>(_animate_playerclimbshootright_data)
	sta     _tempint+1
	lda     #<(_animate_playerclimbshootright_data)
	sta     _tempint
;
; player_on_ladder_pose = PLAYER_LADDER_1_FRAMES;
;
	lda     #$0F
L40CE:	sta     _player_on_ladder_pose
;
; oam_meta_spr(temp_x, temp_y, tempint);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _tempint
	ldx     _tempint+1
	jmp     _oam_meta_spr
;
; if (player_on_ladder_pose < PLAYER_LADDER_1_FRAMES)
;
L2E0F:	lda     _player_on_ladder_pose
	cmp     #$0F
	bcs     L40D9
;
; oam_meta_spr(temp_x, temp_y, animate_playerclimb1_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerclimb1_data)
	ldx     #>(_animate_playerclimb1_data)
	jmp     _oam_meta_spr
;
; else if (player_on_ladder_pose < PLAYER_LADDER_2_FRAMES)
;
L40D9:	lda     _player_on_ladder_pose
	cmp     #$1E
	bcs     L2E27
;
; oam_meta_spr(temp_x, temp_y, animate_playerclimb2_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerclimb2_data)
	ldx     #>(_animate_playerclimb2_data)
	jmp     _oam_meta_spr
;
; oam_meta_spr(temp_x, temp_y, animate_playerclimb1_data);
;
L2E27:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerclimb1_data)
	ldx     #>(_animate_playerclimb1_data)
	jsr     _oam_meta_spr
;
; player_on_ladder_pose = 0;
;
	lda     #$00
	sta     _player_on_ladder_pose
;
; return;
;
	rts
;
; else if (player_is_running) // running
;
L2E0D:	lda     _player_is_running
	jeq     L2E35
;
; if (sprite_frame_counter < PLAYER_RUN_1_FRAMES)
;
	lda     _sprite_frame_counter
	cmp     #$0C
	bcs     L40DA
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2E39
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2E3B
;
; tempint = animate_playerrunshoot2left_data;
;
	lda     #>(_animate_playerrunshoot2left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot2left_data)
;
; else
;
	jmp     L40D0
;
; tempint = animate_playerrun2left_data;
;
L2E3B:	lda     #>(_animate_playerrun2left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun2left_data)
;
; else
;
	jmp     L40D0
;
; if (player_shooting)
;
L2E39:	lda     _player_shooting
	beq     L2E43
;
; tempint = animate_playerrunshoot2right_data;
;
	lda     #>(_animate_playerrunshoot2right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot2right_data)
;
; else
;
	jmp     L40D0
;
; tempint = animate_playerrun2right_data;
;
L2E43:	lda     #>(_animate_playerrun2right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun2right_data)
;
; else if (sprite_frame_counter < PLAYER_RUN_2_FRAMES)
;
	jmp     L40D0
L40DA:	lda     _sprite_frame_counter
	cmp     #$18
	bcs     L40DB
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2E4D
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2E4F
;
; tempint = animate_playerrunshoot3left_data;
;
	lda     #>(_animate_playerrunshoot3left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot3left_data)
;
; else
;
	jmp     L40D0
;
; tempint = animate_playerrun3left_data;
;
L2E4F:	lda     #>(_animate_playerrun3left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun3left_data)
;
; else
;
	jmp     L40D0
;
; if (player_shooting)
;
L2E4D:	lda     _player_shooting
	beq     L2E57
;
; tempint = animate_playerrunshoot3right_data;
;
	lda     #>(_animate_playerrunshoot3right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot3right_data)
;
; else
;
	jmp     L40D0
;
; tempint = animate_playerrun3right_data;
;
L2E57:	lda     #>(_animate_playerrun3right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun3right_data)
;
; else if (sprite_frame_counter < PLAYER_RUN_3_FRAMES)
;
	jmp     L40D0
L40DB:	lda     _sprite_frame_counter
	cmp     #$24
	bcs     L40DC
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2E61
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2E63
;
; tempint = animate_playerrunshoot2left_data;
;
	lda     #>(_animate_playerrunshoot2left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot2left_data)
;
; else
;
	jmp     L40D0
;
; tempint = animate_playerrun2left_data;
;
L2E63:	lda     #>(_animate_playerrun2left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun2left_data)
;
; else
;
	jmp     L40D0
;
; if (player_shooting)
;
L2E61:	lda     _player_shooting
	beq     L2E6B
;
; tempint = animate_playerrunshoot2right_data;
;
	lda     #>(_animate_playerrunshoot2right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot2right_data)
;
; else
;
	jmp     L40D0
;
; tempint = animate_playerrun2right_data;
;
L2E6B:	lda     #>(_animate_playerrun2right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun2right_data)
;
; else if (sprite_frame_counter < PLAYER_RUN_4_FRAMES)
;
	jmp     L40D0
L40DC:	lda     _sprite_frame_counter
	cmp     #$30
	bcs     L40DD
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2E75
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2E77
;
; tempint = animate_playerrunshoot1left_data;
;
	lda     #>(_animate_playerrunshoot1left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot1left_data)
;
; else
;
	jmp     L40D0
;
; tempint = animate_playerrun1left_data;
;
L2E77:	lda     #>(_animate_playerrun1left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun1left_data)
;
; else
;
	jmp     L40D0
;
; if (player_shooting)
;
L2E75:	lda     _player_shooting
	beq     L2E93
;
; tempint = animate_playerrunshoot1right_data;
;
	lda     #>(_animate_playerrunshoot1right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot1right_data)
;
; else
;
	jmp     L40D0
;
; sprite_frame_counter = 0;
;
L40DD:	lda     #$00
	sta     _sprite_frame_counter
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2E89
;
; if (player_shooting)
;
	lda     _player_shooting
	beq     L2E8B
;
; tempint = animate_playerrunshoot1left_data;
;
	lda     #>(_animate_playerrunshoot1left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot1left_data)
;
; else
;
	jmp     L40D0
;
; tempint = animate_playerrun1left_data;
;
L2E8B:	lda     #>(_animate_playerrun1left_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun1left_data)
;
; else
;
	jmp     L40D0
;
; if (player_shooting)
;
L2E89:	lda     _player_shooting
	beq     L2E93
;
; tempint = animate_playerrunshoot1right_data;
;
	lda     #>(_animate_playerrunshoot1right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrunshoot1right_data)
;
; else
;
	jmp     L40D0
;
; tempint = animate_playerrun1right_data;
;
L2E93:	lda     #>(_animate_playerrun1right_data)
	sta     _tempint+1
	lda     #<(_animate_playerrun1right_data)
L40D0:	sta     _tempint
;
; oam_meta_spr(temp_x, temp_y, tempint);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _tempint
	ldx     _tempint+1
	jmp     _oam_meta_spr
;
; if (player_shooting)
;
L2E35:	lda     _player_shooting
	beq     L2E9F
;
; if (direction == LEFT)
;
	lda     _direction
	bne     L2EA1
;
; tempint = animate_playerstandshootleft_data;
;
	lda     #>(_animate_playerstandshootleft_data)
	sta     _tempint+1
	lda     #<(_animate_playerstandshootleft_data)
;
; else
;
	jmp     L40D4
;
; tempint = animate_playerstandshootright_data;
;
L2EA1:	lda     #>(_animate_playerstandshootright_data)
	sta     _tempint+1
	lda     #<(_animate_playerstandshootright_data)
;
; else
;
	jmp     L40D4
;
; if (direction == LEFT)
;
L2E9F:	lda     _direction
	bne     L2EA9
;
; tempint = animate_playerstandleft_data;
;
	lda     #>(_animate_playerstandleft_data)
	sta     _tempint+1
	lda     #<(_animate_playerstandleft_data)
;
; else
;
	jmp     L40D4
;
; tempint = animate_playerstandright_data;
;
L2EA9:	lda     #>(_animate_playerstandright_data)
	sta     _tempint+1
	lda     #<(_animate_playerstandright_data)
L40D4:	sta     _tempint
;
; oam_meta_spr(temp_x, temp_y, tempint);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     _tempint
	ldx     _tempint+1
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; reset();
;
	jsr     _reset
;
; load_title();
;
	jsr     _load_title
;
; while (game_mode == MODE_TITLE)
;
	jmp     L40F1
;
; ppu_wait_nmi();
;
L2EBB:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	jeq     L40F1
;
; sfx_play(SFX_START_LEVEL, 0);
;
	lda     #$06
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pal_bright(3);
;
	lda     #$03
	jsr     _pal_bright
;
; for (temp = 0; temp < 10; ++temp)
;
	lda     #$00
	sta     _temp
L40E6:	lda     _temp
	cmp     #$0A
	bcs     L2ECE
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (temp = 0; temp < 10; ++temp)
;
	inc     _temp
	jmp     L40E6
;
; pal_bright(2);
;
L2ECE:	lda     #$02
	jsr     _pal_bright
;
; for (temp = 0; temp < 10; ++temp)
;
	lda     #$00
	sta     _temp
L40E7:	lda     _temp
	cmp     #$0A
	bcs     L2ED9
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (temp = 0; temp < 10; ++temp)
;
	inc     _temp
	jmp     L40E7
;
; pal_bright(1);
;
L2ED9:	lda     #$01
	jsr     _pal_bright
;
; for (temp = 0; temp < 10; ++temp)
;
	lda     #$00
	sta     _temp
L40E8:	lda     _temp
	cmp     #$0A
	bcs     L2EE4
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (temp = 0; temp < 10; ++temp)
;
	inc     _temp
	jmp     L40E8
;
; pal_bright(0);
;
L2EE4:	lda     #$00
	jsr     _pal_bright
;
; for (temp = 0; temp < 10; ++temp)
;
	lda     #$00
	sta     _temp
L40E9:	lda     _temp
	cmp     #$0A
	bcs     L2EEF
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (temp = 0; temp < 10; ++temp)
;
	inc     _temp
	jmp     L40E9
;
; ppu_off();
;
L2EEF:	jsr     _ppu_off
;
; for (temp = 0; temp < 20; ++temp)
;
	lda     #$00
	sta     _temp
L40EA:	lda     _temp
	cmp     #$14
	bcs     L40EB
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (temp = 0; temp < 20; ++temp)
;
	inc     _temp
	jmp     L40EA
;
; game_mode = MODE_GAME;
;
L40EB:	lda     #$01
	sta     _game_mode
;
; load_room();
;
	jsr     _load_room
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; pal_bright(1);
;
	lda     #$01
	jsr     _pal_bright
;
; for (temp = 0; temp < 10; ++temp)
;
	lda     #$00
	sta     _temp
L40EC:	lda     _temp
	cmp     #$0A
	bcs     L2F08
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (temp = 0; temp < 10; ++temp)
;
	inc     _temp
	jmp     L40EC
;
; pal_bright(2);
;
L2F08:	lda     #$02
	jsr     _pal_bright
;
; for (temp = 0; temp < 10; ++temp)
;
	lda     #$00
	sta     _temp
L40ED:	lda     _temp
	cmp     #$0A
	bcs     L2F13
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (temp = 0; temp < 10; ++temp)
;
	inc     _temp
	jmp     L40ED
;
; pal_bright(3);
;
L2F13:	lda     #$03
	jsr     _pal_bright
;
; for (temp = 0; temp < 10; ++temp)
;
	lda     #$00
	sta     _temp
L40EE:	lda     _temp
	cmp     #$0A
	bcs     L2F1E
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (temp = 0; temp < 10; ++temp)
;
	inc     _temp
	jmp     L40EE
;
; pal_bright(4);
;
L2F1E:	lda     #$04
	jsr     _pal_bright
;
; for (temp = 0; temp < 10; ++temp)
;
	lda     #$00
	sta     _temp
L40EF:	lda     _temp
	cmp     #$0A
	bcs     L40F0
;
; ppu_wait_nmi();
;
	jsr     _ppu_wait_nmi
;
; for (temp = 0; temp < 10; ++temp)
;
	inc     _temp
	jmp     L40EF
;
; song = SONG_GAME;
;
L40F0:	lda     #$00
	sta     _song
;
; music_play(song);
;
	jsr     _music_play
;
; set_music_speed(11);
;
	lda     #$0B
	jsr     _set_music_speed
;
; while (game_mode == MODE_TITLE)
;
L40F1:	lda     _game_mode
	jeq     L2EBB
;
; while (game_mode == MODE_GAME)
;
	jmp     L4108
;
; ++frame_counter;
;
L40F2:	inc     _frame_counter
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L2F43
;
; game_mode = MODE_PAUSE;
;
	lda     #$02
	sta     _game_mode
;
; music_stop();
;
	jsr     _music_stop
;
; ppu_mask(0b00011001); // grayscale mode
;
	lda     #$19
	jsr     _ppu_mask
;
; break; // out of the game loop
;
	jmp     L4111
;
; movement();
;
L2F43:	jsr     _movement
;
; check_spr_objects();
;
	jsr     _check_spr_objects
;
; check_entity_objects();
;
	jsr     _check_entity_objects
;
; projectile_movement();
;
	jsr     _projectile_movement
;
; sprite_collisions();
;
	jsr     _sprite_collisions
;
; entity_collisions();
;
	jsr     _entity_collisions
;
; set_scroll_x(scroll_x);
;
	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; set_scroll_y(scroll_y);
;
	lda     _scroll_y
	ldx     _scroll_y+1
	jsr     _set_scroll_y
;
; handle_scrolling();
;
	jsr     _handle_scrolling
;
; draw_sprites();
;
	jsr     _draw_sprites
;
; if (BoxGuy1.health == 0 || BoxGuy1.health > MAX_PLAYER_HEALTH) // if it wraps
;
	lda     _BoxGuy1+8
	beq     L40F3
	cmp     #$1D
	bcc     L2F56
;
; death = 1;
;
L40F3:	lda     #$01
	sta     _death
;
; if (death)
;
L2F56:	lda     _death
	beq     L40F4
;
; init_death();
;
	jsr     _init_death
;
; if (high_byte(BoxGuy1.y) < 0x08 && level_up && player_on_ladder)
;
L40F4:	lda     _BoxGuy1+3
	cmp     #$08
	bcs     L40F8
	lda     _level_up
	beq     L40F8
	lda     _player_on_ladder
	beq     L40F8
;
; BoxGuy1.y = 0xD000;    // put the user above the bottom of the screen.
;
	ldx     #$D0
	lda     #$00
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; level_up_routine();
;
	jsr     _level_up_routine
;
; if (high_byte(BoxGuy1.y) > 0xd0 && high_byte(BoxGuy1.y) < 0xf4 && level_up) // todo: might need less than 0xd0
;
L40F8:	lda     _BoxGuy1+3
	cmp     #$D1
	bcc     L40FC
	cmp     #$F4
	bcs     L40FC
	lda     _level_up
	beq     L40FC
;
; BoxGuy1.y = 0x1800;    // put the user near the top of screen
;
	ldx     #$18
	lda     #$00
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; level_up_routine();
;
	jsr     _level_up_routine
;
; if (high_byte(BoxGuy1.y) < 0x08 && level_down && player_on_ladder)
;
L40FC:	lda     _BoxGuy1+3
	cmp     #$08
	bcs     L4100
	lda     _level_down
	beq     L4100
	lda     _player_on_ladder
	beq     L4100
;
; BoxGuy1.y = 0xD000; // put the user above the bottom of the screen.
;
	ldx     #$D0
	lda     #$00
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; level_down_routine();
;
	jsr     _level_down_routine
;
; if (high_byte(BoxGuy1.y) > 0xd0 && level_down)
;
L4100:	lda     _BoxGuy1+3
	cmp     #$D1
	bcc     L4104
	lda     _level_down
	beq     L4104
;
; BoxGuy1.y = 0x1800; // put the user near the top of screen
;
	ldx     #$18
	lda     #$00
	sta     _BoxGuy1+2
	stx     _BoxGuy1+2+1
;
; level_down_routine();
;
	jsr     _level_down_routine
;
; if (high_byte(BoxGuy1.y) > 0xe8 && death_flag)
;
L4104:	lda     _BoxGuy1+3
	cmp     #$E9
	bcc     L4108
	lda     _death_flag
	beq     L4108
;
; ++death;
;
	inc     _death
;
; while (game_mode == MODE_GAME)
;
L4108:	lda     _game_mode
	cmp     #$01
	jeq     L40F2
;
; while (game_mode == MODE_DEATH)
;
	jmp     L4111
;
; ppu_wait_nmi();
;
L2F85:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; temp_x = 120;
;
	lda     #$78
	sta     _temp_x
;
; temp_y = 195;
;
	lda     #$C3
	sta     _temp_y
;
; if (frame_counter < 250)
;
	lda     _frame_counter
	cmp     #$FA
	jcs     L4110
;
; oam_clear();
;
	jsr     _oam_clear
;
; ++frame_counter;
;
	inc     _frame_counter
;
; if (frame_counter < 40)
;
	lda     _frame_counter
	cmp     #$28
	bcs     L4109
;
; oam_meta_spr(temp_x, temp_y, animate_playerstandright_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_playerstandright_data)
	ldx     #>(_animate_playerstandright_data)
;
; else if (frame_counter < 50)
;
	jmp     L40E5
L4109:	lda     _frame_counter
	cmp     #$32
	bcs     L410A
;
; oam_meta_spr(temp_x, temp_y, animate_deathright1_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_deathright1_data)
	ldx     #>(_animate_deathright1_data)
;
; else if (frame_counter < 60)
;
	jmp     L40E5
L410A:	lda     _frame_counter
	cmp     #$3C
	bcs     L410B
;
; oam_meta_spr(temp_x, temp_y, animate_deathright2_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_deathright2_data)
	ldx     #>(_animate_deathright2_data)
;
; else if (frame_counter < 70)
;
	jmp     L40E5
L410B:	lda     _frame_counter
	cmp     #$46
	bcs     L410C
;
; oam_meta_spr(temp_x, temp_y, animate_deathright3_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_deathright3_data)
	ldx     #>(_animate_deathright3_data)
;
; else if (frame_counter < 80)
;
	jmp     L40E5
L410C:	lda     _frame_counter
	cmp     #$50
	bcs     L410D
;
; oam_meta_spr(temp_x, temp_y, animate_deathright4_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_deathright4_data)
	ldx     #>(_animate_deathright4_data)
;
; else if (frame_counter < 90)
;
	jmp     L40E5
L410D:	lda     _frame_counter
	cmp     #$5A
	bcs     L410E
;
; oam_meta_spr(temp_x, temp_y, animate_deathright5_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_deathright5_data)
	ldx     #>(_animate_deathright5_data)
;
; else if (frame_counter < 100)
;
	jmp     L40E5
L410E:	lda     _frame_counter
	cmp     #$64
	bcs     L410F
;
; oam_meta_spr(temp_x, temp_y, animate_deathright6_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_deathright6_data)
	ldx     #>(_animate_deathright6_data)
;
; else if (frame_counter < 110)
;
	jmp     L40E5
L410F:	lda     _frame_counter
	cmp     #$6E
	bcs     L2FC9
;
; oam_meta_spr(temp_x, temp_y, animate_deathright7_data);
;
	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_deathright7_data)
	ldx     #>(_animate_deathright7_data)
;
; else
;
	jmp     L40E5
;
; oam_meta_spr(temp_x, temp_y, animate_deathright8_data);
;
L2FC9:	jsr     decsp2
	lda     _temp_x
	ldy     #$01
	sta     (sp),y
	lda     _temp_y
	dey
	sta     (sp),y
	lda     #<(_animate_deathright8_data)
	ldx     #>(_animate_deathright8_data)
L40E5:	jsr     _oam_meta_spr
;
; if (pad1_new & PAD_START)
;
L4110:	lda     _pad1_new
	and     #$10
	beq     L4111
;
; reset();
;
	jsr     _reset
;
; load_title();
;
	jsr     _load_title
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; while (game_mode == MODE_DEATH)
;
L4111:	lda     _game_mode
	cmp     #$03
	jeq     L2F85
;
; while (game_mode == MODE_PAUSE)
;
	jmp     L4112
;
; ppu_wait_nmi();
;
L2FDA:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L4112
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; song = SONG_GAME;
;
	lda     #$00
	sta     _song
;
; music_play(song);
;
	jsr     _music_play
;
; ppu_mask(0b00011000); // grayscale mode
;
	lda     #$18
	jsr     _ppu_mask
;
; while (game_mode == MODE_PAUSE)
;
L4112:	lda     _game_mode
	cmp     #$02
	beq     L2FDA
;
; while (game_mode == MODE_SWITCH)
;
	jmp     L4113
;
; ppu_wait_nmi();
;
L2FEF:	jsr     _ppu_wait_nmi
;
; ++bright_count;
;
	inc     _bright_count
;
; if (bright_count >= 0x10)
;
	lda     _bright_count
	cmp     #$10
	bcc     L2FFA
;
; bright_count = 0;
;
	lda     #$00
	sta     _bright_count
;
; --bright;
;
	dec     _bright
;
; if (bright != 0xff)
;
	lda     _bright
	cmp     #$FF
	beq     L2FFA
;
; pal_bright(bright); // fade out
;
	jsr     _pal_bright
;
; set_scroll_x(scroll_x);
;
L2FFA:	lda     _scroll_x
	ldx     _scroll_x+1
	jsr     _set_scroll_x
;
; if (bright == 0xff)
;
	lda     _bright
	cmp     #$FF
	bne     L4113
;
; ppu_off();
;
	jsr     _ppu_off
;
; oam_clear();
;
	jsr     _oam_clear
;
; if (level < 20)
;
	lda     _level
	cmp     #$14
	bcs     L4113
;
; load_room();
;
	jsr     _load_room
;
; game_mode = MODE_GAME;
;
	lda     #$01
	sta     _game_mode
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; pal_bright(4); // back to normal brighness
;
	lda     #$04
	jsr     _pal_bright
;
; while (game_mode == MODE_SWITCH)
;
L4113:	lda     _game_mode
	cmp     #$04
	beq     L2FEF
;
; while (game_mode == MODE_END)
;
	jmp     L4114
;
; ppu_wait_nmi();
;
L300C:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0); // read the first controller
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; if (pad1_new & PAD_START)
;
	and     #$10
	beq     L4114
;
; reset();
;
	jsr     _reset
;
; game_mode = MODE_TITLE;
;
	lda     #$00
	sta     _game_mode
;
; while (game_mode == MODE_END)
;
L4114:	lda     _game_mode
	cmp     #$05
	beq     L300C
;
; while (1)
;
	jmp     L40F1

.endproc

; ---------------------------------------------------------------
; void __near__ load_gameover (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_gameover: near

.segment	"CODE"

;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; pal_bg(palette_gameover);
;
	lda     #<(_palette_gameover)
	ldx     #>(_palette_gameover)
	jsr     _pal_bg
;
; set_data_pointer(gameovertiled_0);
;
	lda     #<(_gameovertiled_0)
	ldx     #>(_gameovertiled_0)
	jsr     _set_data_pointer
;
; for (y = 0;; y += 0x20)
;
	lda     #$00
L4117:	sta     _y
;
; for (x = 0;; x += 0x20)
;
	lda     #$00
L4116:	sta     _x
;
; address = get_ppu_addr(0, x, y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _x
	dey
	sta     (sp),y
	lda     _y
	jsr     _get_ppu_addr
	sta     _address
	stx     _address+1
;
; index = (y & 0xf0) + (x >> 4);
;
	lda     _y
	and     #$F0
	sta     ptr1
	lda     _x
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	clc
	adc     ptr1
	sta     _index
;
; buffer_4_mt(address, index); // ppu_address, index to the data
;
	lda     _address
	ldx     _address+1
	jsr     pushax
	lda     _index
	jsr     _buffer_4_mt
;
; flush_vram_update2();
;
	jsr     _flush_vram_update2
;
; if (x == 0xe0)
;
	lda     _x
	cmp     #$E0
;
; break;
;
	beq     L4118
;
; for (x = 0;; x += 0x20)
;
	lda     #$20
	clc
	adc     _x
	jmp     L4116
;
; if (y == 0xe0)
;
L4118:	lda     _y
	cmp     #$E0
;
; break;
;
	beq     L3254
;
; for (y = 0;; y += 0x20)
;
	lda     #$20
	clc
	adc     _y
	jmp     L4117
;
; multi_vram_buffer_horz("GAME OVER", 10, NTADR_A(11, 12));
;
L3254:	jsr     decsp3
	lda     #<(L3275)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L3275)
	sta     (sp),y
	lda     #$0A
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$8B
	jsr     _multi_vram_buffer_horz
;
; multi_vram_buffer_horz("PRESS START", 12, NTADR_A(10, 14));
;
	jsr     decsp3
	lda     #<(L327F)
	ldy     #$01
	sta     (sp),y
	iny
	lda     #>(L327F)
	sta     (sp),y
	lda     #$0C
	ldy     #$00
	sta     (sp),y
	ldx     #$21
	lda     #$CA
	jmp     _multi_vram_buffer_horz

.endproc

